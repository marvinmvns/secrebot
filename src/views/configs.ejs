<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configurações do Sistema</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .config-editor {
            font-family: 'Courier New', monospace;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 20px;
            border-radius: 8px;
            max-height: 600px;
            overflow-y: auto;
        }
        .config-item {
            margin-bottom: 15px;
            padding: 10px;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 5px;
        }
        .config-key {
            font-weight: bold;
            color: #495057;
            margin-bottom: 5px;
        }
        .config-value {
            font-family: monospace;
            background: #f8f9fa;
            padding: 5px;
            border-radius: 3px;
            border: 1px solid #dee2e6;
        }
        .save-btn {
            position: sticky;
            bottom: 20px;
            right: 20px;
            float: right;
            z-index: 1000;
        }
        .nested-config {
            margin-left: 20px;
            border-left: 3px solid #007bff;
            padding-left: 10px;
        }
        .array-item {
            background: #e3f2fd;
            margin: 5px 0;
            padding: 5px;
            border-radius: 3px;
        }
        .config-actions {
            margin-top: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 5px;
        }
        .spinner-border {
            width: 1rem;
            height: 1rem;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-cog"></i> Sistema de Configuração
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/"><i class="fas fa-home"></i> Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/config"><i class="fas fa-tools"></i> Config Original</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/configs"><i class="fas fa-database"></i> Todas as Configs</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h4><i class="fas fa-database"></i> Todas as Configurações da Base de Dados</h4>
                        <small class="text-muted">Visualize e edite todas as configurações armazenadas na base de dados</small>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            <strong>Atenção:</strong> Esta tela permite editar diretamente todas as configurações da base de dados. 
                            Após salvar, a solução será reiniciada automaticamente.
                        </div>

                        <div class="config-actions">
                            <div class="row">
                                <div class="col-md-6">
                                    <button type="button" class="btn btn-primary" onclick="loadConfigs()">
                                        <i class="fas fa-sync-alt"></i> Recarregar Configurações
                                    </button>
                                    <button type="button" class="btn btn-secondary" onclick="formatJson()">
                                        <i class="fas fa-code"></i> Formatar JSON
                                    </button>
                                </div>
                                <div class="col-md-6 text-end">
                                    <button type="button" class="btn btn-success" onclick="saveConfigs()" id="saveBtn">
                                        <i class="fas fa-save"></i> Salvar e Reiniciar
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div id="configEditor" class="config-editor">
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                                <p class="mt-2">Carregando configurações...</p>
                            </div>
                        </div>

                        <div class="mt-3">
                            <label for="jsonEditor" class="form-label">
                                <i class="fas fa-edit"></i> Editor JSON Direto:
                            </label>
                            <textarea id="jsonEditor" class="form-control" rows="20" style="font-family: monospace;"></textarea>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentConfig = {};

        // Carregar configurações
        async function loadConfigs() {
            try {
                const response = await fetch('/api/configs');
                if (!response.ok) throw new Error('Erro ao carregar configurações');
                
                currentConfig = await response.json();
                renderConfigEditor();
                updateJsonEditor();
            } catch (error) {
                console.error('Erro:', error);
                showAlert('Erro ao carregar configurações: ' + error.message, 'danger');
            }
        }

        // Renderizar editor visual
        function renderConfigEditor() {
            const container = document.getElementById('configEditor');
            container.innerHTML = '';
            
            const configHtml = renderConfigObject(currentConfig, '');
            container.innerHTML = configHtml;
        }

        // Renderizar objeto de configuração recursivamente
        function renderConfigObject(obj, path) {
            let html = '';
            
            for (const [key, value] of Object.entries(obj)) {
                const fullPath = path ? `${path}.${key}` : key;
                
                html += `<div class="config-item">`;
                html += `<div class="config-key">${key}</div>`;
                
                if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                    html += `<div class="nested-config">`;
                    html += renderConfigObject(value, fullPath);
                    html += `</div>`;
                } else if (Array.isArray(value)) {
                    html += `<div class="array-item">`;
                    html += `<strong>Array com ${value.length} itens:</strong><br>`;
                    value.forEach((item, index) => {
                        html += `<input type="text" class="form-control form-control-sm mt-1" 
                                value="${typeof item === 'string' ? item : JSON.stringify(item)}" 
                                onchange="updateConfigValue('${fullPath}', ${index}, this.value)">`;
                    });
                    html += `</div>`;
                } else {
                    const inputType = typeof value === 'boolean' ? 'checkbox' : 
                                     typeof value === 'number' ? 'number' : 'text';
                    
                    if (inputType === 'checkbox') {
                        html += `<div class="form-check">`;
                        html += `<input class="form-check-input" type="checkbox" ${value ? 'checked' : ''} 
                                onchange="updateConfigValue('${fullPath}', null, this.checked)">`;
                        html += `<label class="form-check-label">${value ? 'Habilitado' : 'Desabilitado'}</label>`;
                        html += `</div>`;
                    } else {
                        html += `<input type="${inputType}" class="form-control config-value" 
                                value="${value}" 
                                onchange="updateConfigValue('${fullPath}', null, this.value)">`;
                    }
                }
                
                html += `</div>`;
            }
            
            return html;
        }

        // Atualizar valor de configuração
        function updateConfigValue(path, index, value) {
            const keys = path.split('.');
            let current = currentConfig;
            
            // Navegar até o objeto pai
            for (let i = 0; i < keys.length - 1; i++) {
                current = current[keys[i]];
            }
            
            const lastKey = keys[keys.length - 1];
            
            if (index !== null) {
                // Atualizar item do array
                current[lastKey][index] = value;
            } else {
                // Converter tipo se necessário
                if (typeof current[lastKey] === 'number') {
                    value = parseFloat(value);
                } else if (typeof current[lastKey] === 'boolean') {
                    value = Boolean(value);
                }
                current[lastKey] = value;
            }
            
            updateJsonEditor();
        }

        // Atualizar editor JSON
        function updateJsonEditor() {
            const jsonEditor = document.getElementById('jsonEditor');
            jsonEditor.value = JSON.stringify(currentConfig, null, 2);
        }

        // Formatar JSON
        function formatJson() {
            const jsonEditor = document.getElementById('jsonEditor');
            try {
                const parsed = JSON.parse(jsonEditor.value);
                jsonEditor.value = JSON.stringify(parsed, null, 2);
                currentConfig = parsed;
                renderConfigEditor();
                showAlert('JSON formatado com sucesso!', 'success');
            } catch (error) {
                showAlert('Erro ao formatar JSON: ' + error.message, 'danger');
            }
        }

        // Salvar configurações
        async function saveConfigs() {
            const saveBtn = document.getElementById('saveBtn');
            const originalText = saveBtn.innerHTML;
            
            try {
                // Atualizar configuração a partir do editor JSON
                const jsonEditor = document.getElementById('jsonEditor');
                currentConfig = JSON.parse(jsonEditor.value);
                
                saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Salvando...';
                saveBtn.disabled = true;
                
                const response = await fetch('/api/configs', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(currentConfig)
                });
                
                if (!response.ok) throw new Error('Erro ao salvar configurações');
                
                const result = await response.json();
                showAlert('Configurações salvas com sucesso! A solução será reiniciada.', 'success');
                
                // Recarregar configurações após salvar
                setTimeout(() => {
                    loadConfigs();
                }, 2000);
                
            } catch (error) {
                console.error('Erro:', error);
                showAlert('Erro ao salvar configurações: ' + error.message, 'danger');
            } finally {
                saveBtn.innerHTML = originalText;
                saveBtn.disabled = false;
            }
        }

        // Mostrar alerta
        function showAlert(message, type) {
            const alertContainer = document.querySelector('.card-body');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            alertContainer.insertBefore(alertDiv, alertContainer.firstChild);
            
            // Remover alerta após 5 segundos
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        // Carregar configurações ao iniciar
        document.addEventListener('DOMContentLoaded', loadConfigs);
    </script>
</body>
</html>