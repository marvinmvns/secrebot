<style>
.whatsapp-chat {
  max-width: 900px;
  margin: 0 auto;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 15px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.3);
}

.chat-header {
  background: rgba(255,255,255,0.1);
  backdrop-filter: blur(10px);
  padding: 20px;
  border-radius: 15px 15px 0 0;
  color: white;
  text-align: center;
}

.chat-config {
  background: rgba(255,255,255,0.95);
  padding: 20px;
  border-radius: 10px;
  margin: 20px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.whatsapp-input-area {
  background: rgba(255,255,255,0.98);
  padding: 20px;
  border-radius: 0 0 15px 15px;
  box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
}

.message-input-container {
  display: flex;
  align-items: center;
  gap: 12px;
  background: #f1f2f6;
  border-radius: 25px;
  padding: 8px 12px;
  border: 2px solid #e0e6ed;
  transition: all 0.3s ease;
}

.message-input-container:focus-within {
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.message-input {
  flex: 1;
  border: none;
  background: transparent;
  padding: 12px 16px;
  font-size: 16px;
  resize: none;
  outline: none;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.action-buttons {
  display: flex;
  gap: 8px;
  align-items: center;
}

.whatsapp-btn {
  width: 44px;
  height: 44px;
  border-radius: 50%;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  font-size: 18px;
}

.btn-audio {
  background: #25d366;
  color: white;
}

.btn-audio:hover {
  background: #20c157;
  transform: scale(1.05);
}

.btn-audio.recording {
  background: #ff4757;
  animation: pulse 1.5s infinite;
}

.btn-send {
  background: #667eea;
  color: white;
}

.btn-send:hover {
  background: #5a6fd8;
  transform: scale(1.05);
}

.btn-attach {
  background: #54a3ff;
  color: white;
}

.btn-attach:hover {
  background: #4593e8;
  transform: scale(1.05);
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.6; }
  100% { opacity: 1; }
}

.config-section {
  background: white;
  border-radius: 12px;
  padding: 15px;
  margin-bottom: 15px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.config-row {
  display: flex;
  gap: 15px;
  align-items: center;
  margin-bottom: 10px;
}

.config-item {
  flex: 1;
  min-width: 0;
}

.config-label {
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 5px;
  font-size: 14px;
}

.modern-select {
  border: 2px solid #e0e6ed;
  border-radius: 8px;
  padding: 8px 12px;
  background: white;
  transition: all 0.3s ease;
  font-size: 14px;
  width: 100%;
}

.modern-select:focus {
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  outline: none;
}

.status-indicator {
  display: inline-block;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  margin-right: 6px;
}

.status-online { background: #25d366; }
.status-offline { background: #ff4757; }

.recording-indicator {
  background: rgba(255, 71, 87, 0.1);
  border: 1px solid #ff4757;
  border-radius: 8px;
  padding: 12px;
  margin-top: 10px;
  display: none;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

.chat-messages {
  max-height: 60vh;
  overflow-y: auto;
  padding: 20px;
  background: rgba(255,255,255,0.05);
  margin: 20px;
  border-radius: 15px;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.message-bubble {
  max-width: 80%;
  padding: 12px 16px;
  border-radius: 18px;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  line-height: 1.4;
  word-wrap: break-word;
  animation: slideIn 0.3s ease;
}

.message-user {
  align-self: flex-end;
  background: #667eea;
  color: white;
  border-bottom-right-radius: 4px;
}

.message-assistant {
  align-self: flex-start;
  background: white;
  color: #333;
  border-bottom-left-radius: 4px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.message-meta {
  font-size: 11px;
  opacity: 0.7;
  margin-top: 4px;
  text-align: right;
}

.message-assistant .message-meta {
  text-align: left;
}

.endpoint-info {
  font-size: 10px;
  background: rgba(102, 126, 234, 0.1);
  padding: 2px 6px;
  border-radius: 8px;
  display: inline-block;
  margin-top: 2px;
}

.message-assistant .endpoint-info {
  background: rgba(0,0,0,0.05);
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.chat-empty {
  text-align: center;
  color: rgba(255,255,255,0.7);
  font-style: italic;
  padding: 40px 20px;
}

.typing-indicator {
  align-self: flex-start;
  background: white;
  border-radius: 18px;
  border-bottom-left-radius: 4px;
  padding: 12px 16px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  display: none;
}

.typing-dots {
  display: flex;
  gap: 4px;
}

.typing-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #ccc;
  animation: typing 1.4s infinite;
}

.typing-dot:nth-child(2) { animation-delay: 0.2s; }
.typing-dot:nth-child(3) { animation-delay: 0.4s; }

@keyframes typing {
  0%, 60%, 100% { transform: translateY(0); }
  30% { transform: translateY(-10px); }
}
</style>

<div class="whatsapp-chat">
  <div class="chat-header">
    <div style="display: flex; justify-content: space-between; align-items: center;">
      <div>
        <h2 style="margin: 0; font-weight: 300;">
          <i class="fas fa-robot" style="margin-right: 10px;"></i>
          Chat com Assistente IA
        </h2>
        <p style="margin: 5px 0 0 0; opacity: 0.8; font-size: 14px;">Escolha o endpoint e modelo para conversar</p>
        <div id="session-indicator" style="display: none; margin-top: 5px; font-size: 12px; opacity: 0.7;">
          <i class="fas fa-user-circle" style="margin-right: 5px;"></i>
          Sessão: <span id="session-id-display"></span>
        </div>
      </div>
      <div class="btn-group">
        <button type="button" id="clear-chat-btn" class="btn btn-sm" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white; border-radius: 20px 0 0 20px; padding: 8px 16px;" title="Limpar conversa">
          <i class="fas fa-trash" style="margin-right: 5px;"></i>
          Limpar
        </button>
        <button type="button" id="clear-all-btn" class="btn btn-sm dropdown-toggle dropdown-toggle-split" style="background: rgba(255,255,255,0.2); border: 1px solid rgba(255,255,255,0.3); color: white; border-radius: 0 20px 20px 0; padding: 8px 12px;" title="Opções de limpeza" data-bs-toggle="dropdown">
          <span class="visually-hidden">Opções</span>
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
          <li><a class="dropdown-item" href="#" id="clear-chat-only"><i class="fas fa-comments"></i> Apenas conversa</a></li>
          <li><a class="dropdown-item" href="#" id="clear-all-data"><i class="fas fa-broom"></i> Conversa + Preferências</a></li>
        </ul>
      </div>
    </div>
  </div>

  <div class="chat-config">
    <div class="config-section">
      <div class="config-row">
        <div class="config-item">
          <div class="config-label">
            <i class="fas fa-server" style="margin-right: 5px;"></i>
            Endpoint Ollama
          </div>
          <select id="endpoint-selector" class="modern-select" disabled>
            <option value="">Carregando endpoints...</option>
          </select>
        </div>
        <div class="config-item">
          <div class="config-label">
            <i class="fas fa-brain" style="margin-right: 5px;"></i>
            Modelo IA
          </div>
          <select id="model-selector" class="modern-select" disabled>
            <option value="">Selecione um endpoint primeiro</option>
          </select>
        </div>
      </div>
    </div>
  </div>

  <!-- Chat Messages Area -->
  <div class="chat-messages" id="chat-messages">
    <div class="chat-empty" id="chat-empty">
      <i class="fas fa-comments" style="font-size: 48px; margin-bottom: 15px; opacity: 0.5;"></i>
      <div>Inicie uma conversa escolhendo um endpoint e modelo</div>
    </div>
    
    <!-- Real-time Transcription Display -->
    <div id="realtime-transcription-display" style="display: none; background: #e0f7fa; padding: 10px; border-radius: 8px; margin-bottom: 10px; color: #00796b; font-style: italic;">
      <i class="fas fa-microphone-alt-slash" style="margin-right: 5px;"></i>
      <span id="realtime-transcription-text"></span>
    </div>

    <!-- Typing Indicator -->
    <div class="typing-indicator" id="typing-indicator">
      <div class="typing-dots">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    </div>
  </div>

  <div class="whatsapp-input-area">
    <form action="/chat" method="POST" enctype="multipart/form-data" id="chat-form">
      <input type="hidden" name="endpoint" id="selected-endpoint" value="">
      <input type="hidden" name="model" id="selected-model" value="">
      <input type="hidden" name="audioData" id="audio-data" value="">
      
      <div class="message-input-container">
        <textarea name="message" id="message-input" class="message-input" rows="1" placeholder="Digite sua mensagem..."><%= message %></textarea>
        
        <input type="file" id="audio-upload" accept="audio/*" style="display: none;" disabled>
        
        <div class="action-buttons">
          <button type="button" id="attach-btn" class="whatsapp-btn btn-attach" title="Anexar arquivo de áudio">
            <i class="fas fa-paperclip"></i>
          </button>
          
          <button type="button" id="record-btn" class="whatsapp-btn btn-audio" disabled title="Gravar áudio">
            <i class="fas fa-microphone"></i>
          </button>
          <button type="button" id="realtime-record-btn" class="whatsapp-btn btn-audio" disabled title="Gravar áudio em tempo real">
            <i class="fas fa-microphone-alt"></i>
          </button>
          
          <button type="submit" class="whatsapp-btn btn-send" title="Enviar mensagem">
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
      </div>
      
      <div id="recording-status" class="recording-indicator">
        <i class="fas fa-microphone-alt" style="margin-right: 8px; color: #ff4757;"></i>
        <strong>Gravando áudio...</strong> Clique no microfone novamente para parar.
      </div>
    </form>
  </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
  const endpointSelector = document.getElementById('endpoint-selector');
  const modelSelector = document.getElementById('model-selector');
  const recordBtn = document.getElementById('record-btn');
  const realtimeRecordBtn = document.getElementById('realtime-record-btn');
  const attachBtn = document.getElementById('attach-btn');
  const audioUpload = document.getElementById('audio-upload');
  const messageInput = document.getElementById('message-input');
  const audioDataInput = document.getElementById('audio-data');
  const selectedEndpointInput = document.getElementById('selected-endpoint');
  const selectedModelInput = document.getElementById('selected-model');
  const recordingStatus = document.getElementById('recording-status');
  const chatMessages = document.getElementById('chat-messages');
  const chatEmpty = document.getElementById('chat-empty');
  const typingIndicator = document.getElementById('typing-indicator');
  const chatForm = document.getElementById('chat-form');
  const clearChatBtn = document.getElementById('clear-chat-btn');
  const realtimeTranscriptionDisplay = document.getElementById('realtime-transcription-display');
  const realtimeTranscriptionText = document.getElementById('realtime-transcription-text');
  
  let mediaRecorder = null;
  let audioChunks = [];
  let isRecording = false;
  let isRealtimeRecording = false;
  let realtimeSessionId = null;
  let chatHistory = JSON.parse(localStorage.getItem('chatHistory')) || [];
  let realtimeInterval = null;
  let webSessionId = localStorage.getItem('webChatSessionId'); // Armazenar sessionId para manter contexto
  
  // Persistir seleções de endpoint e modelo
  let savedEndpoint = localStorage.getItem('selectedEndpoint');
  let savedModel = localStorage.getItem('selectedModel');

  // Funções de Chat
  function addMessageToChat(message, isUser = false, endpoint = null, model = null) {
    const messageData = {
      text: message,
      isUser: isUser,
      timestamp: new Date().toISOString(),
      endpoint: endpoint,
      model: model
    };
    
    chatHistory.push(messageData);
    localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    displayMessage(messageData);
    scrollToBottom();
  }

  function displayMessage(messageData) {
    if (chatEmpty.style.display !== 'none') {
      chatEmpty.style.display = 'none';
    }

    const messageDiv = document.createElement('div');
    messageDiv.className = `message-bubble ${messageData.isUser ? 'message-user' : 'message-assistant'}`;
    
    const time = new Date(messageData.timestamp).toLocaleTimeString('pt-BR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
    
    let metaInfo = time;
    if (!messageData.isUser && messageData.endpoint) {
      const endpointInfo = messageData.model ? `${messageData.endpoint} • ${messageData.model}` : messageData.endpoint;
      metaInfo = `<div class="endpoint-info">${endpointInfo}</div>${time}`;
    }
    
    messageDiv.innerHTML = `
      <div style="white-space: pre-wrap;">${messageData.text}</div>
      <div class="message-meta">${metaInfo}</div>
    `;
    
    // Inserir antes do typing indicator
    chatMessages.insertBefore(messageDiv, typingIndicator);
  }

  function scrollToBottom() {
    setTimeout(() => {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 100);
  }

  function showTypingIndicator() {
    typingIndicator.style.display = 'block';
    scrollToBottom();
  }

  function hideTypingIndicator() {
    typingIndicator.style.display = 'none';
  }

  function updateSessionIndicator() {
    const sessionIndicator = document.getElementById('session-indicator');
    const sessionIdDisplay = document.getElementById('session-id-display');
    
    if (webSessionId) {
      sessionIdDisplay.textContent = webSessionId.substring(0, 12) + '...';
      sessionIndicator.style.display = 'block';
    } else {
      sessionIndicator.style.display = 'none';
    }
  }

  function loadChatHistory() {
    chatHistory.forEach(messageData => {
      displayMessage(messageData);
    });
    if (chatHistory.length > 0) {
      chatEmpty.style.display = 'none';
    }
  }

  function clearChat() {
    chatHistory = [];
    localStorage.removeItem('chatHistory');
    
    // Resetar sessionId para nova sessão
    webSessionId = null;
    localStorage.removeItem('webChatSessionId');
    updateSessionIndicator();
    console.log('Sessão reiniciada - novo contexto será criado');
    console.log('Endpoint e modelo mantidos para facilitar uso contínuo');
    chatMessages.innerHTML = `
      <div class="chat-empty" id="chat-empty">
        <i class="fas fa-comments" style="font-size: 48px; margin-bottom: 15px; opacity: 0.5;"></i>
        <div>Inicie uma conversa escolhendo um endpoint e modelo</div>
      </div>
      <div id="realtime-transcription-display" style="display: none; background: #e0f7fa; padding: 10px; border-radius: 8px; margin-bottom: 10px; color: #00796b; font-style: italic;">
        <i class="fas fa-microphone-alt-slash" style="margin-right: 5px;"></i>
        <span id="realtime-transcription-text"></span>
      </div>
      <div class="typing-indicator" id="typing-indicator">
        <div class="typing-dots">
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
        </div>
      </div>
    `;
    // Update references after innerHTML change
    chatEmpty = document.getElementById('chat-empty');
    typingIndicator = document.getElementById('typing-indicator');
    realtimeTranscriptionDisplay = document.getElementById('realtime-transcription-display');
    realtimeTranscriptionText = document.getElementById('realtime-transcription-text');
  }

  function clearAllData() {
    // Limpar conversa
    clearChat();
    
    // Limpar preferências de endpoint e modelo
    localStorage.removeItem('selectedEndpoint');
    localStorage.removeItem('selectedModel');
    savedEndpoint = null;
    savedModel = null;
    
    // Resetar seletores para primeira opção
    endpointSelector.selectedIndex = 0;
    modelSelector.selectedIndex = 0;
    selectedEndpointInput.value = '';
    selectedModelInput.value = '';
    
    console.log('Todas as preferências foram resetadas');
    
    // Recarregar endpoints para aplicar seleção padrão
    loadEndpoints();
  }

  // Handle form submission with AJAX
  async function handleFormSubmit(event) {
    event.preventDefault();
    
    const message = messageInput.value.trim();
    const audioData = audioDataInput.value;
    const endpoint = selectedEndpointInput.value;
    const model = selectedModelInput.value;
    
    if (!message && !audioData) {
      alert('Digite uma mensagem ou grave um áudio');
      return;
    }
    
    if (!endpoint) {
      alert('Selecione um endpoint');
      return;
    }
    
    // Add user message to chat
    if (message) {
      addMessageToChat(message, true);
    } else {
      addMessageToChat('🎵 Mensagem de áudio', true);
    }
    
    // Clear input
    messageInput.value = '';
    audioDataInput.value = '';
    messageInput.placeholder = 'Digite sua mensagem...';
    messageInput.style.height = 'auto';
    
    // Show typing indicator
    showTypingIndicator();
    
    try {
      const formData = new FormData();
      formData.append('message', message);
      formData.append('endpoint', endpoint);
      formData.append('model', model);
      formData.append('audioData', audioData);
      
      // Adicionar sessionId se disponível para manter contexto
      if (webSessionId) {
        formData.append('sessionId', webSessionId);
      }
      
      // Adicionar tipo de endpoint se disponível
      const selectedOption = endpointSelector.options[endpointSelector.selectedIndex];
      if (selectedOption && selectedOption.dataset.type) {
        formData.append('endpointType', selectedOption.dataset.type);
      }
      
      const response = await fetch('/api/chat', {
        method: 'POST',
        body: formData
      });
      
      const data = await response.json();
      
      hideTypingIndicator();
      
      if (data.success) {
        // Armazenar sessionId se retornado pelo servidor
        if (data.sessionId && data.sessionId !== webSessionId) {
          webSessionId = data.sessionId;
          localStorage.setItem('webChatSessionId', webSessionId);
          updateSessionIndicator();
          console.log('SessionId armazenado:', webSessionId);
        }
        
        addMessageToChat(data.result, false, data.usedEndpoint, data.usedModel);
      } else {
        addMessageToChat(data.error || 'Erro ao processar resposta', false);
      }
      
    } catch (error) {
      hideTypingIndicator();
      addMessageToChat('Erro ao enviar mensagem: ' + error.message, false);
    }
  }

  // Carregar endpoints disponíveis
  async function loadEndpoints() {
    try {
      endpointSelector.innerHTML = '<option value="">Carregando endpoints...</option>';
      
      // Carregar endpoints Ollama e ChatGPT em paralelo
      const [ollamaResponse, chatgptResponse] = await Promise.allSettled([
        fetch('/api/ollama-api/status'),
        fetch('/api/chatgpt/status')
      ]);
      
      endpointSelector.innerHTML = '<option value="">Selecione um endpoint</option>';
      
      let allEndpoints = [];
      
      // Processar endpoints Ollama
      if (ollamaResponse.status === 'fulfilled') {
        const ollamaData = await ollamaResponse.value.json();
        if (ollamaData.enabled && ollamaData.endpoints && ollamaData.endpoints.length > 0) {
          const healthyOllamaEndpoints = ollamaData.endpoints.filter(ep => ep.healthy);
          allEndpoints.push(...healthyOllamaEndpoints);
        }
      }
      
      // Processar endpoints ChatGPT
      if (chatgptResponse.status === 'fulfilled') {
        const chatgptData = await chatgptResponse.value.json();
        if (chatgptData.enabled && chatgptData.endpoints && chatgptData.endpoints.length > 0) {
          const healthyChatGPTEndpoints = chatgptData.endpoints.filter(ep => ep.healthy);
          allEndpoints.push(...healthyChatGPTEndpoints);
        }
      }
      
      if (allEndpoints.length > 0) {
        allEndpoints.forEach(endpoint => {
          const option = document.createElement('option');
          option.value = endpoint.url;
          option.dataset.type = endpoint.type; // Armazenar tipo para uso posterior
          
          let displayText = `${endpoint.url} (${endpoint.type.toUpperCase()})`;
          if (endpoint.currentModel) {
            displayText += ` - ${endpoint.currentModel}`;
          }
          if (endpoint.processing && endpoint.processing.activeRequests > 0) {
            displayText += ` [${endpoint.processing.activeRequests} req ativas]`;
          }
          
          option.textContent = displayText;
          endpointSelector.appendChild(option);
        });
        
        endpointSelector.disabled = false;
        
        // Selecionar endpoint salvo ou primeiro por padrão
        if (allEndpoints.length > 0) {
          let endpointToSelect = allEndpoints[0];
          
          // Verificar se há endpoint salvo e se ainda está disponível
          if (savedEndpoint) {
            const savedEndpointObj = allEndpoints.find(ep => ep.url === savedEndpoint);
            if (savedEndpointObj) {
              endpointToSelect = savedEndpointObj;
              console.log('Restaurando endpoint salvo:', savedEndpoint);
            }
          }
          
          endpointSelector.value = endpointToSelect.url;
          selectedEndpointInput.value = endpointToSelect.url;
          loadModelsForEndpoint(endpointToSelect.url, endpointToSelect.type);
        }
      } else {
        endpointSelector.innerHTML = '<option value="">Nenhum endpoint disponível</option>';
      }
    } catch (error) {
      console.error('Erro ao carregar endpoints:', error);
      endpointSelector.innerHTML = '<option value="">Erro ao carregar endpoints</option>';
    }
  }

  // Carregar modelos para um endpoint específico
  async function loadModelsForEndpoint(endpointUrl, endpointType) {
    if (!endpointUrl) {
      modelSelector.innerHTML = '<option value="">Selecione um endpoint primeiro</option>';
      modelSelector.disabled = true;
      return;
    }

    try {
      modelSelector.innerHTML = '<option value="">Carregando modelos...</option>';
      modelSelector.disabled = true;

      let response, data;
      
      if (endpointType === 'chatgpt') {
        // Carregar modelos ChatGPT
        response = await fetch('/api/chatgpt/models', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            url: endpointUrl
          })
        });
        data = await response.json();
      } else {
        // Carregar modelos Ollama (comportamento original)
        response = await fetch('/api/ollama-api/endpoint-models', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            url: endpointUrl, 
            type: endpointType || 'ollama' 
          })
        });
        data = await response.json();
      }
      
      modelSelector.innerHTML = '<option value="">Selecione um modelo</option>';
      
      // Verificar se há erro primeiro
      if (data.error) {
        modelSelector.innerHTML = `<option value="">Erro: ${data.error}</option>`;
        return;
      }
      
      if (data.success && data.models && data.models.length > 0) {
        data.models.forEach(model => {
          const option = document.createElement('option');
          const modelName = typeof model === 'string' ? model : model.name || model.model;
          option.value = modelName;
          
          let displayText = modelName;
          
          // Add size info if available (Ollama)
          if (model.size) {
            displayText += ` (${(model.size / 1024 / 1024 / 1024).toFixed(1)}GB)`;
          }
          
          // Add capabilities info if available (ChatGPT)
          if (model.capabilities && endpointType === 'chatgpt') {
            const capabilities = model.capabilities.substring(0, 40);
            displayText += ` - ${capabilities}${model.capabilities.length > 40 ? '...' : ''}`;
          }
          
          option.textContent = displayText;
          modelSelector.appendChild(option);
        });
        
        modelSelector.disabled = false;
        
        // Selecionar modelo salvo ou primeiro por padrão
        if (data.models.length > 0) {
          let modelToSelect = typeof data.models[0] === 'string' ? data.models[0] : data.models[0].name || data.models[0].model;
          
          // Verificar se há modelo salvo e se ainda está disponível
          if (savedModel && endpointSelector.value === savedEndpoint) {
            const availableModels = data.models.map(model => 
              typeof model === 'string' ? model : model.name || model.model
            );
            if (availableModels.includes(savedModel)) {
              modelToSelect = savedModel;
              console.log('Restaurando modelo salvo:', savedModel);
            }
          }
          
          modelSelector.value = modelToSelect;
          selectedModelInput.value = modelToSelect;
        }
      } else {
        modelSelector.innerHTML = '<option value="">Nenhum modelo disponível</option>';
      }
    } catch (error) {
      console.error('Erro ao carregar modelos:', error);
      let errorMessage = 'Erro ao carregar modelos';
      
      if (endpointType === 'chatgpt') {
        errorMessage = 'ChatGPT: Configurar API Key';
      }
      
      modelSelector.innerHTML = `<option value="">${errorMessage}</option>`;
    }
  }

  // Verificar suporte a áudio
  async function checkAudioSupport() {
    try {
      // Verificar se Whisper API está ativo
      const response = await fetch('/api/whisper/status');
      const data = await response.json();
      
      if (data.available) {
        recordBtn.disabled = false;
        realtimeRecordBtn.disabled = false;
        audioUpload.disabled = false;
        
        // Verificar suporte a MediaRecorder
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
          recordBtn.title = 'Gravar áudio com o microfone';
          realtimeRecordBtn.title = 'Gravar áudio em tempo real com o microfone';
        } else {
          recordBtn.disabled = true;
          realtimeRecordBtn.disabled = true;
          recordBtn.title = 'Navegador não suporta gravação de áudio';
          realtimeRecordBtn.title = 'Navegador não suporta gravação de áudio';
        }
      } else {
        recordBtn.title = 'Whisper API não está disponível';
        realtimeRecordBtn.title = 'Whisper API não está disponível';
        audioUpload.title = 'Whisper API não está disponível';
      }
    } catch (error) {
      console.error('Erro ao verificar suporte a áudio:', error);
    }
  }

  // Gravação de áudio (botão normal)
  recordBtn.addEventListener('click', async function() {
    if (!isRecording) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);
        audioChunks = [];
        
        mediaRecorder.ondataavailable = function(event) {
          audioChunks.push(event.data);
        };
        
        mediaRecorder.onstop = function() {
          const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
          convertAudioToBase64(audioBlob);
          
          // Parar o stream
          stream.getTracks().forEach(track => track.stop());
        };
        
        mediaRecorder.start();
        isRecording = true;
        recordBtn.classList.add('recording');
        recordBtn.innerHTML = '<i class="fas fa-stop"></i>';
        recordingStatus.style.display = 'block';
        
      } catch (error) {
        console.error('Erro ao acessar microfone:', error);
        alert('Erro ao acessar o microfone. Verifique as permissões.');
      }
    } else {
      mediaRecorder.stop();
      isRecording = false;
      recordBtn.classList.remove('recording');
      recordBtn.innerHTML = '<i class="fas fa-microphone"></i>';
      recordingStatus.style.display = 'none';
    }
  });

  // Gravação de áudio em tempo real
  realtimeRecordBtn.addEventListener('click', async function() {
    if (!isRealtimeRecording) {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' }); // Use webm for streaming
        audioChunks = [];
        
        // Start real-time session on backend
        const startResponse = await fetch('/api/transcribe/realtime/start', { method: 'POST' });
        const startData = await startResponse.json();
        if (!startData.success) throw new Error(startData.error);
        realtimeSessionId = startData.sessionId;

        mediaRecorder.ondataavailable = function(event) {
          audioChunks.push(event.data);
        };
        
        mediaRecorder.onstop = async function() {
          // Send remaining chunks as last chunk
          if (audioChunks.length > 0) {
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            const base64Data = await blobToBase64(audioBlob);
            await sendRealtimeChunk(base64Data, true);
          }
          
          // Stop the stream
          stream.getTracks().forEach(track => track.stop());
          clearInterval(realtimeInterval);
          realtimeTranscriptionDisplay.style.display = 'none';
          realtimeTranscriptionText.textContent = '';
          addMessageToChat(`🎤 Transcrição em tempo real finalizada: ${messageInput.value}`, true);
          messageInput.value = '';
        };
        
        mediaRecorder.start(1000); // Capture 1-second chunks
        isRealtimeRecording = true;
        realtimeRecordBtn.classList.add('recording');
        realtimeRecordBtn.innerHTML = '<i class="fas fa-stop"></i>';
        recordingStatus.style.display = 'block';
        realtimeTranscriptionDisplay.style.display = 'block';
        realtimeTranscriptionText.textContent = 'Iniciando transcrição...';

        realtimeInterval = setInterval(async () => {
          if (audioChunks.length > 0) {
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            audioChunks = []; // Clear chunks after sending
            const base64Data = await blobToBase64(audioBlob);
            const transcription = await sendRealtimeChunk(base64Data, false);
            if (transcription) {
              realtimeTranscriptionText.textContent = transcription;
              messageInput.value = transcription; // Update message input with current transcription
            }
          }
        }, 2000); // Send chunks every 2 seconds
        
      } catch (error) {
        console.error('Erro ao acessar microfone para tempo real:', error);
        alert('Erro ao acessar o microfone. Verifique as permissões.');
      }
    } else {
      mediaRecorder.stop();
      isRealtimeRecording = false;
      realtimeRecordBtn.classList.remove('recording');
      realtimeRecordBtn.innerHTML = '<i class="fas fa-microphone-alt"></i>';
      recordingStatus.style.display = 'none';
    }
  });

  async function sendRealtimeChunk(base64Data, isLastChunk) {
    try {
      const response = await fetch('/api/transcribe/realtime/chunk', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sessionId: realtimeSessionId,
          audioData: base64Data,
          isLastChunk: isLastChunk
        })
      });
      const data = await response.json();
      if (!data.success) throw new Error(data.error);
      return data.transcription;
    } catch (error) {
      console.error('Erro ao enviar chunk em tempo real:', error);
      return '';
    }
  }

  function blobToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result.split(',')[1]);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  }

  // Upload de arquivo de áudio
  audioUpload.addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
      convertAudioToBase64(file);
    }
  });

  // Converter áudio para base64
  function convertAudioToBase64(audioFile) {
    const reader = new FileReader();
    reader.onload = function(event) {
      const base64Data = event.target.result.split(',')[1];
      audioDataInput.value = base64Data;
      messageInput.placeholder = '🎵 Áudio carregado! Clique em enviar para transcrever e processar.';
      messageInput.value = '';
    };
    reader.readAsDataURL(audioFile);
  }

  // Atualizar endpoint selecionado
  endpointSelector.addEventListener('change', function() {
    selectedEndpointInput.value = this.value;
    
    // Salvar endpoint selecionado
    if (this.value) {
      localStorage.setItem('selectedEndpoint', this.value);
      savedEndpoint = this.value;
      console.log('Endpoint salvo:', this.value);
      
      // Usar o tipo armazenado no dataset
      const selectedOption = this.options[this.selectedIndex];
      const type = selectedOption.dataset.type || 'ollama';
      loadModelsForEndpoint(this.value, type);
    } else {
      localStorage.removeItem('selectedEndpoint');
      savedEndpoint = null;
      modelSelector.innerHTML = '<option value="">Selecione um endpoint primeiro</option>';
      modelSelector.disabled = true;
      selectedModelInput.value = '';
    }
  });

  // Atualizar modelo selecionado
  modelSelector.addEventListener('change', function() {
    selectedModelInput.value = this.value;
    
    // Salvar modelo selecionado
    if (this.value) {
      localStorage.setItem('selectedModel', this.value);
      savedModel = this.value;
      console.log('Modelo salvo:', this.value);
    } else {
      localStorage.removeItem('selectedModel');
      savedModel = null;
    }
  });

  // Anexar arquivo de áudio
  attachBtn.addEventListener('click', function() {
    audioUpload.click();
  });

  // Auto-resize textarea
  messageInput.addEventListener('input', function() {
    this.style.height = 'auto';
    this.style.height = Math.min(this.scrollHeight, 120) + 'px';
  });

  // Form submission
  chatForm.addEventListener('submit', handleFormSubmit);

  // Enter key to submit (but Shift+Enter for new line)
  messageInput.addEventListener('keydown', function(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      handleFormSubmit(event);
    }
  });

  // Clear chat button
  clearChatBtn.addEventListener('click', function() {
    if (confirm('Tem certeza que deseja limpar toda a conversa?')) {
      clearChat();
    }
  });

  // Clear chat only option
  document.getElementById('clear-chat-only').addEventListener('click', function(e) {
    e.preventDefault();
    if (confirm('Limpar apenas a conversa (manter endpoint e modelo selecionados)?')) {
      clearChat();
    }
  });

  // Clear all data option
  document.getElementById('clear-all-data').addEventListener('click', function(e) {
    e.preventDefault();
    if (confirm('Limpar conversa E preferências (endpoint/modelo serão resetados)?')) {
      clearAllData();
    }
  });

  // Carregar dados iniciais
  loadEndpoints();
  checkAudioSupport();
  loadChatHistory();
  updateSessionIndicator(); // Mostrar sessionId se já existir
  
  // Recarregar endpoints a cada 30 segundos
  setInterval(loadEndpoints, 30000);
});
</script>

