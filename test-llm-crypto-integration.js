#!/usr/bin/env node

/**
 * Test script para verificar a integra√ß√£o LLM de an√°lise crypto
 */

import CryptoService from './src/services/cryptoService.js';

async function testLLMIntegration() {
  console.log('üß™ Testando integra√ß√£o LLM para an√°lise crypto...\n');
  
  const cryptoService = new CryptoService();
  
  try {
    // 1. Conectar ao MongoDB
    console.log('1. Conectando ao MongoDB...');
    await cryptoService.connect();
    
    // 2. Adicionar dados de teste para bitcoin
    console.log('2. Adicionando dados hist√≥ricos de teste...');
    const basePrice = 50000;
    
    // Adicionar dados hist√≥ricos simulados
    for (let i = 0; i < 30; i++) {
      const variation = (Math.random() - 0.5) * 0.1; // Varia√ß√£o de ¬±5%
      const price = basePrice * (1 + variation);
      const timestamp = Date.now() - (i * 24 * 60 * 60 * 1000); // i dias atr√°s
      
      cryptoService.storePriceHistory('bitcoin', price, new Date(timestamp));
    }
    
    console.log('   ‚úÖ 30 pontos hist√≥ricos adicionados');
    
    // 3. Testar se a fun√ß√£o LLM existe
    console.log('3. Verificando se a fun√ß√£o generateLLMAnalysis existe...');
    
    if (typeof cryptoService.generateLLMAnalysis === 'function') {
      console.log('   ‚úÖ Fun√ß√£o generateLLMAnalysis encontrada');
    } else {
      console.log('   ‚ùå Fun√ß√£o generateLLMAnalysis n√£o encontrada');
      return;
    }
    
    // 4. Testar prepara√ß√£o de dados
    console.log('4. Testando prepara√ß√£o de dados...');
    
    try {
      // Test individual helper functions if they exist
      if (typeof cryptoService.prepareDataForLLM === 'function') {
        const preparedData = await cryptoService.prepareDataForLLM('bitcoin', 30);
        console.log('   ‚úÖ Dados preparados:', {
          dataPointsCount: preparedData.historicalPrices?.length || 0,
          hasStatistics: !!preparedData.statistics,
          hasIndicators: !!preparedData.technicalIndicators
        });
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è Erro na prepara√ß√£o de dados (esperado se LLM n√£o dispon√≠vel):', error.message);
    }
    
    // 5. Testar an√°lise completa (pode falhar se LLM n√£o dispon√≠vel)
    console.log('5. Testando an√°lise LLM completa...');
    
    try {
      // Set a timeout for the LLM analysis
      const analysisPromise = cryptoService.generateLLMAnalysis('bitcoin');
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout after 30 seconds')), 30000);
      });
      
      const analysis = await Promise.race([analysisPromise, timeoutPromise]);
      
      if (analysis && analysis.recommendation) {
        console.log('   ‚úÖ An√°lise LLM bem-sucedida:');
        console.log('     - Recomenda√ß√£o:', analysis.recommendation);
        console.log('     - Confian√ßa:', analysis.confidence + '%');
        console.log('     - Pre√ßo atual: $' + analysis.currentPrice?.toLocaleString());
        console.log('     - Resumo:', analysis.reasoning?.substring(0, 100) + '...');
      } else {
        console.log('   ‚ùå An√°lise LLM retornou dados inv√°lidos');
      }
      
    } catch (error) {
      if (error.message.includes('LLM service')) {
        console.log('   ‚ö†Ô∏è LLM service n√£o dispon√≠vel (esperado em ambiente de teste)');
        console.log('   üí° Para testar completamente, certifique-se de que o Ollama esteja rodando');
      } else if (error.message === 'Timeout after 30 seconds') {
        console.log('   ‚ö†Ô∏è LLM analysis timeout (pode ser normal para modelos grandes)');
      } else {
        console.log('   ‚ùå Erro na an√°lise LLM:', error.message);
      }
    }
    
    // 6. Verificar estrutura de resposta esperada
    console.log('6. Testando estrutura de resposta...');
    
    // Mock analysis para testar estrutura
    const mockAnalysis = {
      recommendation: 'SEGURAR',
      confidence: 75,
      currentPrice: 50000,
      targetPrice: 52000,
      stopLoss: 48000,
      reasoning: 'An√°lise baseada em dados hist√≥ricos mostra tend√™ncia consolida√ß√£o...',
      technicalSummary: 'RSI neutro, SMA positiva',
      marketContext: 'Mercado em consolida√ß√£o'
    };
    
    console.log('   ‚úÖ Estrutura de resposta mock v√°lida:', {
      hasRecommendation: !!mockAnalysis.recommendation,
      hasConfidence: typeof mockAnalysis.confidence === 'number',
      hasReasoning: !!mockAnalysis.reasoning,
      recommendationValid: ['COMPRAR', 'VENDER', 'SEGURAR'].includes(mockAnalysis.recommendation)
    });
    
    console.log('\n‚úÖ Teste de integra√ß√£o LLM conclu√≠do com sucesso!');
    console.log('\nüìã Resumo:');
    console.log('   - CryptoService: ‚úÖ Inicializado');
    console.log('   - MongoDB: ‚úÖ Conectado');
    console.log('   - Dados hist√≥ricos: ‚úÖ Adicionados');
    console.log('   - Fun√ß√£o LLM: ‚úÖ Existe');
    console.log('   - Estrutura: ‚úÖ V√°lida');
    console.log('\nüí° Para teste completo do LLM, execute o bot com Ollama ativo');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    // Cleanup
    await cryptoService.disconnect();
  }
}

// Executar teste
testLLMIntegration().catch(console.error);