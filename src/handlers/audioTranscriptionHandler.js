import logger from '../utils/logger.js';
import { CHAT_MODES } from '../config/index.js';

export default class AudioTranscriptionHandler {
  constructor(whatsAppBot) {
    this.whatsAppBot = whatsAppBot;
  }

  async handleTranscreverCommand(contactId) {
    try {
      await this.whatsAppBot.setMode(contactId, CHAT_MODES.TRANSCRIBE);
      await this.whatsAppBot.sendResponse(contactId, 'üé§ *Modo Transcri√ß√£o Ativado*\n\nEnvie um √°udio que deseja transcrever.\n\nüí° O √°udio ser√° convertido em texto.\n\n‚ùå Digite "cancelar" para sair.');
      return true;
    } catch (error) {
      logger.error('‚ùå Erro ao iniciar transcri√ß√£o:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao iniciar transcri√ß√£o.');
      return false;
    }
  }

  async handleTranscreverResumir(contactId) {
    try {
      await this.whatsAppBot.setMode(contactId, CHAT_MODES.TRANSCRIBE_SUMMARIZE);
      await this.whatsAppBot.sendResponse(contactId, 'üé§üìù *Modo Transcrever + Resumir Ativado*\n\nEnvie um √°udio que deseja transcrever e resumir.\n\nüí° O √°udio ser√° convertido em texto e resumido.\n\n‚ùå Digite "cancelar" para sair.');
      return true;
    } catch (error) {
      logger.error('‚ùå Erro ao iniciar transcri√ß√£o + resumo:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao iniciar transcri√ß√£o + resumo.');
      return false;
    }
  }

  async handleAudioMessage(msg, contactId) {
    try {
      logger.info(`üé§ Processando √°udio de ${contactId}`);
      
      // Check current mode to determine how to process audio
      const currentMode = await this.whatsAppBot.getCurrentMode(contactId);
      const navigationState = await this.whatsAppBot.getNavigationState(contactId);

      // Handle audio in specific modes
      if (currentMode === CHAT_MODES.TRANSCRIBE) {
        return await this.processTranscriptionMode(msg, contactId);
      } else if (currentMode === CHAT_MODES.TRANSCRIBE_SUMMARIZE) {
        return await this.processTranscribeSummarizeMode(msg, contactId);
      } else if (currentMode === CHAT_MODES.SCHEDULER) {
        return await this.processSchedulerMode(msg, contactId);
      } else if (navigationState) {
        return await this.processAudioNavigation(msg, contactId);
      } else {
        return await this.processGeneralAudioMode(msg, contactId);
      }
    } catch (error) {
      logger.error(`‚ùå Erro ao processar √°udio para ${contactId}:`, error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao processar √°udio.');
      return false;
    }
  }

  async processTranscriptionMode(msg, contactId) {
    try {
      await this.whatsAppBot.sendResponse(contactId, 'üé§ Transcrevendo √°udio...', true);
      
      // Download the audio data from the message
      const media = await msg.downloadMedia();
      if (!media || !media.data) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå N√£o foi poss√≠vel baixar o √°udio.');
        return false;
      }
      
      // Convert base64 to buffer
      const audioBuffer = Buffer.from(media.data, 'base64');
      
      const transcription = await this.whatsAppBot.transcriber.transcribe(audioBuffer, 'ogg', contactId);
      
      await this.whatsAppBot.sendResponse(contactId, `üìù *Transcri√ß√£o:*\n\n${transcription}`);
      
      // Exit transcription mode
      await this.whatsAppBot.setMode(contactId, null);
      await this.whatsAppBot.sendResponse(contactId, '‚úÖ Transcri√ß√£o conclu√≠da!\n\nüîô Para voltar ao menu: !menu');
      
      return true;
    } catch (error) {
      logger.error('‚ùå Erro no modo transcri√ß√£o:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao transcrever √°udio.');
      return false;
    }
  }

  async processTranscribeSummarizeMode(msg, contactId) {
    try {
      await this.whatsAppBot.sendResponse(contactId, 'üé§üìù Transcrevendo e resumindo √°udio...', true);
      
      // Download the audio data from the message
      const media = await msg.downloadMedia();
      if (!media || !media.data) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå N√£o foi poss√≠vel baixar o √°udio.');
        return false;
      }
      
      // Convert base64 to buffer
      const audioBuffer = Buffer.from(media.data, 'base64');
      
      const result = await this.whatsAppBot.transcriber.transcribeAndSummarize(audioBuffer);
      
      if (result.success) {
        let response = `üìù *Transcri√ß√£o + Resumo:*\n\n`;
        
        if (result.transcription) {
          response += `üé§ *Transcri√ß√£o:*\n${result.transcription}\n\n`;
        }
        
        if (result.summary) {
          response += `üìã *Resumo:*\n${result.summary}`;
        }
        
        await this.whatsAppBot.sendResponse(contactId, response);
        
        // Exit mode
        await this.whatsAppBot.setMode(contactId, null);
        await this.whatsAppBot.sendResponse(contactId, '‚úÖ Transcri√ß√£o + Resumo conclu√≠dos!\n\nüîô Para voltar ao menu: !menu');
      } else {
        await this.whatsAppBot.sendResponse(contactId, `‚ùå Erro: ${result.error}\n\nTente novamente ou digite "cancelar" para sair.`);
      }
      
      return true;
    } catch (error) {
      logger.error('‚ùå Erro no modo transcrever + resumir:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao processar √°udio.');
      return false;
    }
  }

  async processAudioNavigation(msg, contactId) {
    try {
      // Transcribe audio for navigation purposes
      await this.whatsAppBot.sendResponse(contactId, 'üé§ Processando comando de voz...', true);
      
      // Download the audio data from the message
      const media = await msg.downloadMedia();
      if (!media || !media.data) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå N√£o foi poss√≠vel baixar o √°udio.');
        return false;
      }
      
      // Convert base64 to buffer
      const audioBuffer = Buffer.from(media.data, 'base64');
      
      const transcription = await this.whatsAppBot.transcriber.transcribe(audioBuffer, 'ogg', contactId);
      
      logger.info(`üé§ Comando de voz transcrito: "${transcription}" de ${contactId}`);
      
      // Process transcription as navigation command
      const navigationState = await this.whatsAppBot.getNavigationState(contactId);
      return await this.whatsAppBot.menuNavigationHandler.processAudioNavigation(
        msg, contactId, transcription, navigationState
      );
    } catch (error) {
      logger.error('‚ùå Erro na navega√ß√£o por √°udio:', error);
      return false;
    }
  }

  async processSchedulerMode(msg, contactId) {
    try {
      await this.whatsAppBot.sendResponse(contactId, 'üé§ Transcrevendo para criar agendamento...', true);
      
      // Download the audio data from the message
      const media = await msg.downloadMedia();
      if (!media || !media.data) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå N√£o foi poss√≠vel baixar o √°udio.');
        return false;
      }
      
      // Convert base64 to buffer
      const audioBuffer = Buffer.from(media.data, 'base64');
      
      const transcription = await this.whatsAppBot.transcriber.transcribe(audioBuffer, 'ogg', contactId);
      
      // Process the transcribed text as scheduler input
      logger.info(`üìù Agendamento via √°udio transcrito: "${transcription}" de ${contactId}`);
      
      // Delegate to scheduler handler to process the transcribed text
      return await this.whatsAppBot.scheduleHandler.processSchedulerMessage(contactId, transcription);
      
    } catch (error) {
      logger.error('‚ùå Erro no modo scheduler via √°udio:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao processar √°udio para agendamento.');
      return false;
    }
  }

  async processGeneralAudioMode(msg, contactId) {
    try {
      // Default audio processing with suggestion to summarize
      await this.whatsAppBot.sendResponse(contactId, 'üé§ Processando √°udio...', true);
      
      // Download the audio data from the message
      const media = await msg.downloadMedia();
      if (!media || !media.data) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå N√£o foi poss√≠vel baixar o √°udio.');
        return false;
      }
      
      // Convert base64 to buffer
      const audioBuffer = Buffer.from(media.data, 'base64');
      
      const transcription = await this.whatsAppBot.transcriber.transcribe(audioBuffer, 'ogg', contactId);
      
      await this.whatsAppBot.sendResponse(contactId, `üìù *Transcri√ß√£o:*\n\n${transcription}`);
      
      // Suggest summarization for longer audios
      if (transcription.length > 500) {
        await this.whatsAppBot.sendResponse(contactId, 'üí° *√Åudio longo detectado!*\n\nDeseja que eu fa√ßa um resumo?\n\n1Ô∏è‚É£ - Sim, fazer resumo\n‚ùå - N√£o, obrigado');
        
        // Store audio buffer for potential summarization
        this.whatsAppBot.setUserPreference(contactId, 'awaitingSummarizationResponse', {
          audioBuffer: audioBuffer,
          timestamp: Date.now()
        });
      }
      
      return true;
    } catch (error) {
      logger.error('‚ùå Erro no modo geral de √°udio:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao processar √°udio.');
      return false;
    }
  }

  async handleWhisperSilentConfigCommand(contactId) {
    try {
      await this.whatsAppBot.setMode(contactId, 'WHISPER_SILENT_CONFIG');
      await this.whatsAppBot.sendResponse(contactId, 'üîß *Configura√ß√£o Whisper Silent*\n\nEnvie o comando de configura√ß√£o que deseja executar.\n\nüí° Comandos dispon√≠veis:\n‚Ä¢ health - Status geral\n‚Ä¢ status - Status detalhado\n‚Ä¢ transcriptions_list - Listar transcri√ß√µes\n‚Ä¢ control_start - Iniciar servi√ßo\n‚Ä¢ control_stop - Parar servi√ßo\n\n‚ùå Digite "cancelar" para sair.');
      return true;
    } catch (error) {
      logger.error('‚ùå Erro ao iniciar configura√ß√£o Whisper Silent:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao iniciar configura√ß√£o.');
      return false;
    }
  }

  async handleWhisperSilentSearchCommand(contactId) {
    try {
      await this.whatsAppBot.setMode(contactId, 'WHISPER_SILENT_SEARCH');
      await this.whatsAppBot.sendResponse(contactId, 'üîç *Busca em Transcri√ß√µes*\n\nDigite a palavra ou frase que deseja buscar nas transcri√ß√µes.\n\nüí° Exemplo: "reuni√£o cliente"\n\n‚ùå Digite "cancelar" para sair.');
      return true;
    } catch (error) {
      logger.error('‚ùå Erro ao iniciar busca Whisper Silent:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao iniciar busca.');
      return false;
    }
  }

  async handleWhisperSilentCommand(contactId, action) {
    try {
      logger.info(`üîß Executando comando Whisper Silent: ${action} para ${contactId}`);
      
      // Execute whisper silent command
      const result = await this.whatsAppBot.whisperSilentService.executeCommand(action, { userId: contactId });
      
      let response = `üîß *Whisper Silent - ${action.toUpperCase()}*\n\n`;
      
      if (result.success) {
        switch (action) {
          case 'health':
          case 'health_detailed':
            response += this.formatHealthStatus(result.data);
            break;
          case 'status':
            response += this.formatDetailedStatus(result.data);
            break;
          case 'transcriptions_list':
            response += this.formatTranscriptionsList(result.data);
            break;
          case 'transcriptions_stats':
            response += this.formatTranscriptionsStats(result.data);
            break;
          default:
            response += result.message || 'Comando executado com sucesso.';
        }
      } else {
        response += `‚ùå Erro: ${result.error || 'Comando falhou'}`;
      }
      
      await this.whatsAppBot.sendResponse(contactId, response);
      return true;
    } catch (error) {
      logger.error(`‚ùå Erro ao executar comando Whisper Silent ${action}:`, error);
      await this.whatsAppBot.sendErrorMessage(contactId, `Erro ao executar comando ${action}.`);
      return false;
    }
  }

  formatHealthStatus(data) {
    if (!data) return '‚ùå Dados de sa√∫de n√£o dispon√≠veis.';
    
    let status = '';
    status += `üü¢ Status: ${data.status || 'Desconhecido'}\n`;
    status += `üìä APIs ativas: ${data.activeApis || 0}\n`;
    status += `üíæ Transcri√ß√µes: ${data.totalTranscriptions || 0}\n`;
    status += `‚è±Ô∏è √öltima atividade: ${data.lastActivity || 'N/A'}`;
    
    return status;
  }

  formatDetailedStatus(data) {
    if (!data) return '‚ùå Status detalhado n√£o dispon√≠vel.';
    
    let status = '';
    status += `üîß *Sistema:*\n`;
    status += `‚Ä¢ CPU: ${data.cpu || 'N/A'}%\n`;
    status += `‚Ä¢ RAM: ${data.memory || 'N/A'} MB\n`;
    status += `‚Ä¢ Disco: ${data.disk || 'N/A'} GB\n\n`;
    
    if (data.apis && data.apis.length > 0) {
      status += `üåê *APIs:*\n`;
      data.apis.forEach(api => {
        status += `‚Ä¢ ${api.name}: ${api.status} (${api.url})\n`;
      });
    }
    
    return status;
  }

  formatTranscriptionsList(data) {
    if (!data || !data.transcriptions || data.transcriptions.length === 0) {
      return 'üìù Nenhuma transcri√ß√£o encontrada.';
    }
    
    let list = `üìù *√öltimas ${data.transcriptions.length} transcri√ß√µes:*\n\n`;
    
    data.transcriptions.forEach((t, index) => {
      const date = new Date(t.timestamp).toLocaleString('pt-BR');
      const preview = t.text.substring(0, 50) + (t.text.length > 50 ? '...' : '');
      list += `${index + 1}. ${date}\n   "${preview}"\n\n`;
    });
    
    return list;
  }

  formatTranscriptionsStats(data) {
    if (!data) return 'üìä Estat√≠sticas n√£o dispon√≠veis.';
    
    let stats = `üìä *Estat√≠sticas de Transcri√ß√µes:*\n\n`;
    stats += `üî¢ Total: ${data.total || 0}\n`;
    stats += `üìÖ Hoje: ${data.today || 0}\n`;
    stats += `üìÜ Esta semana: ${data.thisWeek || 0}\n`;
    stats += `üóìÔ∏è Este m√™s: ${data.thisMonth || 0}\n`;
    
    if (data.avgDuration) {
      stats += `‚è±Ô∏è Dura√ß√£o m√©dia: ${data.avgDuration}s\n`;
    }
    
    if (data.languages && Object.keys(data.languages).length > 0) {
      stats += `\nüó£Ô∏è *Idiomas:*\n`;
      Object.entries(data.languages).forEach(([lang, count]) => {
        stats += `‚Ä¢ ${lang}: ${count}\n`;
      });
    }
    
    return stats;
  }

  async processWhisperSilentConfigMessage(contactId, text) {
    try {
      const command = text.toLowerCase().trim();
      
      if (command === 'cancelar' || command === 'sair') {
        await this.whatsAppBot.setMode(contactId, null);
        await this.whatsAppBot.sendResponse(contactId, '‚ùå Configura√ß√£o Whisper Silent cancelada.');
        return;
      }
      
      // Execute the command
      await this.handleWhisperSilentCommand(contactId, command);
      
      // Keep in config mode for multiple commands
      await this.whatsAppBot.sendResponse(contactId, '\nüí° Digite outro comando ou "cancelar" para sair.');
    } catch (error) {
      logger.error('‚ùå Erro ao processar comando de configura√ß√£o:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao processar comando.');
    }
  }

  async processWhisperSilentSearchMessage(contactId, text) {
    try {
      const searchTerm = text.trim();
      
      if (searchTerm.toLowerCase() === 'cancelar' || searchTerm.toLowerCase() === 'sair') {
        await this.whatsAppBot.setMode(contactId, null);
        await this.whatsAppBot.sendResponse(contactId, '‚ùå Busca cancelada.');
        return;
      }
      
      if (searchTerm.length < 3) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå Digite pelo menos 3 caracteres para buscar.\n\nüí° Exemplo: "reuni√£o cliente"');
        return;
      }
      
      await this.whatsAppBot.sendResponse(contactId, `üîç Buscando por "${searchTerm}"...`, true);
      
      // Execute search
      const result = await this.whatsAppBot.whisperSilentService.searchTranscriptions(searchTerm, {
        userId: contactId,
        limit: 10
      });
      
      if (result.success && result.results && result.results.length > 0) {
        let response = `üîç *Resultados para "${searchTerm}":*\n\n`;
        
        result.results.forEach((item, index) => {
          const date = new Date(item.timestamp).toLocaleString('pt-BR');
          const snippet = this.highlightSearchTerm(item.text, searchTerm);
          response += `${index + 1}. ${date}\n   ${snippet}\n\n`;
        });
        
        response += `üìä ${result.results.length} resultado(s) encontrado(s).`;
        await this.whatsAppBot.sendResponse(contactId, response);
      } else {
        await this.whatsAppBot.sendResponse(contactId, `‚ùå Nenhum resultado encontrado para "${searchTerm}".`);
      }
      
      // Exit search mode
      await this.whatsAppBot.setMode(contactId, null);
    } catch (error) {
      logger.error('‚ùå Erro ao processar busca:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao realizar busca.');
    }
  }

  highlightSearchTerm(text, searchTerm) {
    const index = text.toLowerCase().indexOf(searchTerm.toLowerCase());
    if (index === -1) return text.substring(0, 100) + '...';
    
    const start = Math.max(0, index - 30);
    const end = Math.min(text.length, index + searchTerm.length + 30);
    const snippet = text.substring(start, end);
    
    return (start > 0 ? '...' : '') + snippet + (end < text.length ? '...' : '');
  }
}