#!/usr/bin/env node

/**
 * Teste real do balanceamento Round Robin do Whisper API
 * Este script simula requisi√ß√µes para verificar se est√£o sendo distribu√≠das
 */

import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Importa o AudioTranscriber diretamente para testar
async function testRoundRobinDistribution() {
  console.log('üß™ Teste Real do Round Robin do Whisper API');
  console.log('=============================================\n');

  try {
    // Simula 6 transcri√ß√µes sequenciais para ver a distribui√ß√£o
    console.log('üéØ Simulando 6 requisi√ß√µes de transcri√ß√£o...\n');
    
    // Cria um arquivo de √°udio pequeno e falso para teste
    const testAudioBuffer = Buffer.from('fake-audio-content-for-testing');
    
    // Vamos interceptar os logs para capturar qual endpoint foi selecionado
    const selections = [];
    
    // Patch do logger para capturar sele√ß√µes
    const originalLog = console.log;
    console.log = function(...args) {
      const message = args.join(' ');
      if (message.includes('Cliente selecionado:') && message.includes('whisper')) {
        const match = message.match(/Cliente selecionado: (http:\/\/[^)]+)/);
        if (match) {
          selections.push(match[1]);
        }
      }
      // Chama o log original apenas para mensagens importantes
      if (message.includes('üéØ') || message.includes('‚úÖ') || message.includes('‚ùå') || message.includes('üìä')) {
        originalLog.apply(console, args);
      }
    };

    // Como n√£o podemos fazer transcri√ß√µes reais, vamos testar diretamente o pool
    const { getDynamicConfig } = await import('./src/config/index.js');
    const WhisperAPIPool = (await import('./src/services/whisperApiPool.js')).default;
    
    // Mock config service para pegar a configura√ß√£o atual
    const mockConfigService = {
      async getConfig() {
        // Retorna configura√ß√£o atual do MongoDB ou null para usar padr√£o
        return null;
      }
    };

    const pool = new WhisperAPIPool(mockConfigService);
    
    // Aguarda inicializa√ß√£o
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    if (pool.clients.length === 0) {
      console.log('‚ùå Nenhum cliente Whisper configurado');
      return;
    }

    console.log(`üìä Encontrados ${pool.clients.length} endpoints configurados`);
    console.log('Endpoints:');
    pool.clients.forEach((client, i) => {
      console.log(`  ${i + 1}. ${client.baseURL} (prioridade: ${client.endpoint.priority})`);
    });

    console.log('\nüîÑ Testando sele√ß√£o de clientes (6 requisi√ß√µes):');
    console.log('===============================================');

    const actualSelections = [];
    for (let i = 1; i <= 6; i++) {
      try {
        const client = await pool.selectBestClient();
        actualSelections.push(client.baseURL);
        console.log(`Req ${i}: ${client.baseURL} (currentIndex ap√≥s: ${pool.currentIndex})`);
      } catch (error) {
        console.log(`Req ${i}: ERRO - ${error.message}`);
      }
    }

    // An√°lise da distribui√ß√£o
    console.log('\nüìà An√°lise da distribui√ß√£o:');
    console.log('==========================');
    const distribution = {};
    actualSelections.forEach(url => {
      distribution[url] = (distribution[url] || 0) + 1;
    });
    
    let totalRequests = actualSelections.length;
    Object.entries(distribution).forEach(([url, count]) => {
      const percentage = ((count / totalRequests) * 100).toFixed(1);
      console.log(`${url}: ${count} requisi√ß√µes (${percentage}%)`);
    });

    // Verifica se a distribui√ß√£o est√° equilibrada
    const uniqueEndpoints = Object.keys(distribution).length;
    const expectedPerEndpoint = Math.floor(totalRequests / pool.clients.length);
    const isBalanced = Object.values(distribution).every(count => count >= expectedPerEndpoint);
    
    if (isBalanced && uniqueEndpoints >= 2) {
      console.log('\n‚úÖ SUCESSO: Round Robin est√° funcionando corretamente!');
      console.log('   As requisi√ß√µes est√£o sendo distribu√≠das entre os endpoints.');
    } else {
      console.log('\n‚ùå PROBLEMA: Round Robin N√ÉO est√° distribuindo adequadamente');
      console.log(`   Endpoints √∫nicos usados: ${uniqueEndpoints}/${pool.clients.length}`);
    }

    pool.destroy();
    
    // Restaura console.log
    console.log = originalLog;

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

// Executa o teste
testRoundRobinDistribution().catch(console.error);