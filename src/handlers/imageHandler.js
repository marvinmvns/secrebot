import logger from '../utils/logger.js';
import { CHAT_MODES } from '../config/index.js';

export default class ImageHandler {
  constructor(whatsAppBot) {
    this.whatsAppBot = whatsAppBot;
  }

  async handleImageMessage(msg, contactId, lowerText) {
    try {
      logger.info(`üñºÔ∏è Processando imagem de ${contactId}`);
      
      // Check if it's an image analysis request
      if (lowerText.includes('analise') || lowerText.includes('describe') || lowerText.includes('o que √©')) {
        return await this.analyzeImage(msg, contactId);
      }
      
      // Check if it's an OCR request
      if (lowerText.includes('texto') || lowerText.includes('ler') || lowerText.includes('ocr')) {
        return await this.extractTextFromImage(msg, contactId);
      }
      
      // Check if it's a translation request
      if (lowerText.includes('traduz') || lowerText.includes('translate')) {
        return await this.translateImageText(msg, contactId);
      }
      
      // Default: provide image analysis options
      await this.showImageOptions(msg, contactId);
      return true;
      
    } catch (error) {
      logger.error(`‚ùå Erro ao processar imagem para ${contactId}:`, error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao processar imagem.');
      return false;
    }
  }

  async analyzeImage(msg, contactId) {
    try {
      await this.whatsAppBot.sendResponse(contactId, 'üñºÔ∏è Analisando imagem com IA...', true);
      
      // Download image
      const media = await msg.downloadMedia();
      if (!media || !media.data) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå N√£o foi poss√≠vel baixar a imagem.');
        return false;
      }
      
      // Check if we have an LLM service with vision capabilities
      if (this.whatsAppBot.llmService && this.whatsAppBot.llmService.supportsImages) {
        const analysis = await this.whatsAppBot.llmService.analyzeImage(media.data, {
          userId: contactId,
          prompt: 'Descreva esta imagem em detalhes em portugu√™s brasileiro. Inclua objetos, pessoas, cores, ambiente e contexto.'
        });
        
        if (analysis.success) {
          let response = `üñºÔ∏è *An√°lise da Imagem:*\n\n${analysis.response}`;
          
          // Add additional information if available
          if (analysis.objects && analysis.objects.length > 0) {
            response += `\n\nüéØ *Objetos detectados:*\n${analysis.objects.join(', ')}`;
          }
          
          if (analysis.colors && analysis.colors.length > 0) {
            response += `\n\nüé® *Cores principais:*\n${analysis.colors.join(', ')}`;
          }
          
          await this.whatsAppBot.sendResponse(contactId, response);
        } else {
          await this.whatsAppBot.sendResponse(contactId, `‚ùå Erro na an√°lise: ${analysis.error}`);
        }
      } else {
        await this.whatsAppBot.sendResponse(contactId, 
          '‚ö†Ô∏è *An√°lise de imagem n√£o dispon√≠vel*\n\n' +
          'Para usar esta funcionalidade:\n' +
          '‚Ä¢ Configure um modelo LLM com suporte a imagens\n' +
          '‚Ä¢ Ex: llava, bakllava, ou GPT-4 Vision\n\n' +
          'üîß Verifique sua configura√ß√£o de LLM'
        );
      }
      
      return true;
    } catch (error) {
      logger.error('‚ùå Erro na an√°lise de imagem:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao analisar imagem.');
      return false;
    }
  }

  async extractTextFromImage(msg, contactId) {
    try {
      await this.whatsAppBot.sendResponse(contactId, 'üìñ Extraindo texto da imagem (OCR)...', true);
      
      // Download image
      const media = await msg.downloadMedia();
      if (!media || !media.data) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå N√£o foi poss√≠vel baixar a imagem.');
        return false;
      }
      
      // Use OCR service or LLM with vision
      let ocrResult = null;
      
      if (this.whatsAppBot.llmService && this.whatsAppBot.llmService.supportsImages) {
        ocrResult = await this.whatsAppBot.llmService.analyzeImage(media.data, {
          userId: contactId,
          prompt: 'Extraia todo o texto vis√≠vel nesta imagem. Mantenha a formata√ß√£o original quando poss√≠vel. Se n√£o houver texto, responda "Nenhum texto encontrado".'
        });
      }
      
      if (ocrResult && ocrResult.success) {
        if (ocrResult.response.toLowerCase().includes('nenhum texto') || ocrResult.response.trim().length < 10) {
          await this.whatsAppBot.sendResponse(contactId, 'üìñ *Nenhum texto encontrado na imagem*\n\nüí° Certifique-se de que:\n‚Ä¢ A imagem cont√©m texto leg√≠vel\n‚Ä¢ A qualidade est√° boa\n‚Ä¢ O texto n√£o est√° muito pequeno');
        } else {
          await this.whatsAppBot.sendResponse(contactId, `üìñ *Texto extra√≠do da imagem:*\n\n${ocrResult.response}`);
          
          // Offer translation if text is detected
          await this.whatsAppBot.sendResponse(contactId, 'üåê *Precisa traduzir o texto?*\n\nüí° Responda "traduzir para [idioma]" se necess√°rio\nEx: "traduzir para ingl√™s"');
        }
      } else {
        await this.whatsAppBot.sendResponse(contactId, 
          '‚ö†Ô∏è *OCR n√£o dispon√≠vel*\n\n' +
          'Para extrair texto de imagens:\n' +
          '‚Ä¢ Configure um modelo LLM com suporte a imagens\n' +
          '‚Ä¢ Ou instale uma ferramenta de OCR dedicada'
        );
      }
      
      return true;
    } catch (error) {
      logger.error('‚ùå Erro no OCR:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao extrair texto da imagem.');
      return false;
    }
  }

  async translateImageText(msg, contactId) {
    try {
      await this.whatsAppBot.sendResponse(contactId, 'üåê Extraindo e traduzindo texto...', true);
      
      // First extract text
      const media = await msg.downloadMedia();
      if (!media || !media.data) {
        await this.whatsAppBot.sendResponse(contactId, '‚ùå N√£o foi poss√≠vel baixar a imagem.');
        return false;
      }
      
      if (this.whatsAppBot.llmService && this.whatsAppBot.llmService.supportsImages) {
        const result = await this.whatsAppBot.llmService.analyzeImage(media.data, {
          userId: contactId,
          prompt: 'Extraia todo o texto desta imagem e traduza para portugu√™s brasileiro. Se o texto j√° estiver em portugu√™s, traduza para ingl√™s. Formato: [TEXTO ORIGINAL]\n\n[TRADU√á√ÉO]'
        });
        
        if (result.success) {
          await this.whatsAppBot.sendResponse(contactId, `üåê *Texto extra√≠do e traduzido:*\n\n${result.response}`);
        } else {
          await this.whatsAppBot.sendResponse(contactId, `‚ùå Erro na tradu√ß√£o: ${result.error}`);
        }
      } else {
        await this.whatsAppBot.sendResponse(contactId, '‚ö†Ô∏è Funcionalidade de tradu√ß√£o de imagem n√£o dispon√≠vel.');
      }
      
      return true;
    } catch (error) {
      logger.error('‚ùå Erro na tradu√ß√£o de imagem:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao traduzir texto da imagem.');
      return false;
    }
  }

  async showImageOptions(msg, contactId) {
    try {
      let message = `üñºÔ∏è *Op√ß√µes para Imagem*\n\n`;
      message += `üìã **O que posso fazer:**\n\n`;
      
      message += `üîç **1. Analisar imagem**\n`;
      message += `‚Ä¢ Descrever conte√∫do\n`;
      message += `‚Ä¢ Identificar objetos e pessoas\n`;
      message += `‚Ä¢ Analisar cores e composi√ß√£o\n\n`;
      
      message += `üìñ **2. Extrair texto (OCR)**\n`;
      message += `‚Ä¢ Ler texto da imagem\n`;
      message += `‚Ä¢ Manter formata√ß√£o\n`;
      message += `‚Ä¢ Documentos digitalizados\n\n`;
      
      message += `üåê **3. Traduzir texto**\n`;
      message += `‚Ä¢ Extrair e traduzir automaticamente\n`;
      message += `‚Ä¢ Suporte a m√∫ltiplos idiomas\n`;
      message += `‚Ä¢ Ideal para placas e documentos\n\n`;
      
      message += `üí° **Como usar:**\n`;
      message += `‚Ä¢ "analise esta imagem"\n`;
      message += `‚Ä¢ "extrair texto"\n`;
      message += `‚Ä¢ "traduzir texto"\n\n`;
      
      // Check capabilities
      const hasVision = this.whatsAppBot.llmService && this.whatsAppBot.llmService.supportsImages;
      
      if (hasVision) {
        message += `‚úÖ **Funcionalidades dispon√≠veis:** Todas\n`;
        message += `ü§ñ **Modelo:** ${await this.getVisionModelName()}`;
      } else {
        message += `‚ö†Ô∏è **Limitado:** Configure modelo com suporte a imagens\n`;
        message += `üí° **Modelos recomendados:** llava, bakllava`;
      }
      
      await this.whatsAppBot.sendResponse(contactId, message);
      return true;
    } catch (error) {
      logger.error('‚ùå Erro ao mostrar op√ß√µes de imagem:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao mostrar op√ß√µes.');
      return false;
    }
  }

  async processImageAnalysisMode(contactId, text, msg) {
    try {
      if (msg && msg.hasMedia) {
        // Process the image with the text as context
        const media = await msg.downloadMedia();
        
        if (this.whatsAppBot.llmService && this.whatsAppBot.llmService.supportsImages) {
          const analysis = await this.whatsAppBot.llmService.analyzeImage(media.data, {
            userId: contactId,
            prompt: `${text}\n\nAnalise esta imagem considerando o contexto acima. Responda em portugu√™s brasileiro.`
          });
          
          if (analysis.success) {
            await this.whatsAppBot.sendResponse(contactId, `üñºÔ∏è *An√°lise contextual:*\n\n${analysis.response}`);
          } else {
            await this.whatsAppBot.sendResponse(contactId, `‚ùå Erro na an√°lise: ${analysis.error}`);
          }
        }
        
        await this.whatsAppBot.setMode(contactId, null);
      } else if (text.toLowerCase().includes('cancelar') || text.toLowerCase().includes('sair')) {
        await this.whatsAppBot.setMode(contactId, null);
        await this.whatsAppBot.sendResponse(contactId, '‚ùå An√°lise de imagem cancelada.');
      } else {
        await this.whatsAppBot.sendResponse(contactId, 'üì∏ Envie uma imagem para analisar com o contexto fornecido.\n\nOu digite "cancelar" para sair.');
      }
    } catch (error) {
      logger.error('‚ùå Erro no modo an√°lise de imagem:', error);
      await this.whatsAppBot.sendErrorMessage(contactId, 'Erro ao processar an√°lise de imagem.');
    }
  }

  async getVisionModelName() {
    try {
      if (this.whatsAppBot.llmService) {
        return await this.whatsAppBot.llmService.getCurrentModel() || 'Modelo com vis√£o';
      }
      return 'Desconhecido';
    } catch (error) {
      return 'N√£o dispon√≠vel';
    }
  }

  async validateImageFormat(media) {
    const supportedFormats = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    
    if (!media.mimetype || !supportedFormats.includes(media.mimetype.toLowerCase())) {
      return {
        valid: false,
        error: 'Formato de imagem n√£o suportado. Use: JPEG, PNG, GIF ou WebP'
      };
    }
    
    // Check file size (max 10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB
    const buffer = Buffer.from(media.data, 'base64');
    
    if (buffer.length > maxSize) {
      return {
        valid: false,
        error: 'Imagem muito grande. Tamanho m√°ximo: 10MB'
      };
    }
    
    return { valid: true };
  }

  async getImageMetadata(media) {
    try {
      const buffer = Buffer.from(media.data, 'base64');
      
      return {
        size: buffer.length,
        format: media.mimetype,
        sizeFormatted: this.formatFileSize(buffer.length)
      };
    } catch (error) {
      return null;
    }
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
}