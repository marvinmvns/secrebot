<style>
        .endpoint-card {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }
        .endpoint-card:hover {
            border-color: #007bff;
            box-shadow: 0 4px 12px rgba(0,123,255,0.15);
        }
        .endpoint-card.active {
            border-color: #28a745;
            background-color: #f8fff9;
        }
        .endpoint-card.error {
            border-color: #dc3545;
            background-color: #fff5f5;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .status-indicator.healthy {
            background-color: #28a745;
            animation: pulse 2s infinite;
        }
        .status-indicator.unhealthy {
            background-color: #dc3545;
        }
        .status-indicator.unknown {
            background-color: #ffc107;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .load-score {
            font-family: monospace;
            font-weight: bold;
        }
        .test-result {
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.9rem;
        }
        .test-result.success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .test-result.error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        .config-section {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .form-label {
            font-weight: 600;
            color: #495057;
        }
        .strategy-option {
            padding: 15px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .strategy-option:hover {
            border-color: #007bff;
            background-color: #f8f9fa;
        }
        .strategy-option.selected {
            border-color: #007bff;
            background-color: #e3f2fd;
        }
        .model-info {
            background: #f1f3f4;
            border-radius: 6px;
            padding: 8px;
            font-family: monospace;
            font-size: 0.85rem;
        }
        .processing-badge {
            animation: pulse-orange 2s infinite;
        }
        @keyframes pulse-orange {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        .endpoint-card.processing {
            border-color: #fd7e14;
            background-color: #fff8f0;
        }
    </style>

<!-- Breadcrumb -->
<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i> Home</a></li>
        <li class="breadcrumb-item"><a href="/configs"><i class="fas fa-cog"></i> Configura√ß√µes</a></li>
        <li class="breadcrumb-item active" aria-current="page"><i class="fas fa-robot"></i> Ollama API</li>
    </ol>
</nav>

<div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h2><i class="fas fa-robot text-primary"></i> Configura√ß√£o Ollama API</h2>
                        <p class="text-muted">Configure endpoints de API Ollama com balanceamento de carga</p>
                    </div>
                    <div class="btn-group">
                        <button class="btn btn-outline-info" onclick="loadCurrentStatus()">
                            <i class="fas fa-sync-alt"></i> Atualizar Status
                        </button>
                        <button class="btn btn-success" onclick="saveConfiguration()">
                            <i class="fas fa-save"></i> Salvar Configura√ß√£o
                        </button>
                    </div>
                </div>

                <!-- Status Geral -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-info-circle"></i> Status Geral</h5>
                    </div>
                    <div class="card-body" id="generalStatus">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Configura√ß√£o Principal -->
                <div class="config-section">
                    <h4><i class="fas fa-cogs"></i> Configura√ß√£o Principal</h4>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">N√∫mero de Endpoints</label>
                                <select class="form-select" id="endpointCount">
                                    <!-- Options will be generated dynamically from 1 to 99 -->
                                </select>
                                <div class="form-text">Quantidade de endpoints para configurar (1-99)</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Status Geral do OllamaAPI</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="ollamaApiEnabled">
                                    <label class="form-check-label" for="ollamaApiEnabled">
                                        <strong>Habilitar OllamaAPI</strong>
                                    </label>
                                </div>
                                <div class="form-text">
                                    Ativa ou desativa completamente o sistema de OllamaAPI
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Modo de Opera√ß√£o</label>
                                <select class="form-select" id="operationMode">
                                    <option value="local">Local (Ollama instalado localmente)</option>
                                    <option value="api">API (Endpoints externos)</option>
                                </select>
                                <div class="form-text">
                                    <strong>Local:</strong> Usa Ollama instalado localmente<br>
                                    <strong>API:</strong> Usa endpoints externos com fallback para local
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <!-- Configura√ß√£o Local -->
                            <div id="localConfigSection" style="display: none;">
                                <div class="card">
                                    <div class="card-header">
                                        <h6><i class="fas fa-home"></i> Configura√ß√£o Local</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label class="form-label">Porta</label>
                                                    <input type="number" class="form-control" id="localPort" 
                                                           min="1" max="65535" value="11434" placeholder="11434">
                                                    <div class="form-text">
                                                        Porta do servi√ßo local
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label class="form-label">Protocolo</label>
                                                    <select class="form-select" id="localProtocol">
                                                        <option value="ollama">üß† Ollama (porta 11434)</option>
                                                        <option value="rkllama">ü§ñ RKLLama (porta 8080)</option>
                                                    </select>
                                                    <div class="form-text">
                                                        Tipo de API local
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-4">
                                                <div class="mb-3">
                                                    <label class="form-label">Status</label>
                                                    <div class="input-group">
                                                        <span class="form-control" id="localConnectionStatus">
                                                            <i class="fas fa-question-circle text-muted"></i> N√£o testado
                                                        </span>
                                                        <button class="btn btn-outline-info" type="button" id="testLocalConnection" 
                                                                title="Testar conex√£o">
                                                            <i class="fas fa-vial"></i>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="mb-3">
                                                    <label class="form-label">Modelo Local</label>
                                                    <div class="input-group">
                                                        <select class="form-select" id="localModel" disabled>
                                                            <option value="">Selecione um modelo...</option>
                                                        </select>
                                                        <button class="btn btn-outline-secondary" type="button" id="loadLocalModels" 
                                                                title="Carregar modelos locais">
                                                            <i class="fas fa-sync-alt"></i>
                                                        </button>
                                                    </div>
                                                    <div class="form-text">
                                                        <span id="localModelStatus">Configure a porta e protocolo, depois clique em atualizar</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <!-- RKLLama Model Loading Section -->
                                        <div class="row" id="localRKLlamaSection" style="display: none;">
                                            <div class="col-md-12">
                                                <div class="alert alert-info">
                                                    <i class="fas fa-info-circle"></i>
                                                    <strong>RKLLama:</strong> Selecione um modelo acima e clique em "Carregar Modelo" para ativ√°-lo no endpoint local.
                                                    <button class="btn btn-sm btn-primary ms-2" id="loadLocalModelBtn" disabled>
                                                        <i class="fas fa-download"></i> Carregar Modelo
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Timeout (ms)</label>
                                <input type="number" class="form-control" id="apiTimeout" min="60000" max="1800000" step="1000">
                                <div class="form-text">Tempo limite para requisi√ß√µes API (1min - 30min)</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Estrat√©gia de Load Balancing</label>
                                <div id="loadBalancingStrategy">
                                    <div class="strategy-option" data-strategy="queue_length">
                                        <strong>Queue Length</strong><br>
                                        <small>Seleciona o endpoint com menor carga de modelos</small>
                                    </div>
                                    <div class="strategy-option" data-strategy="response_efficiency">
                                        <strong>Response Efficiency üöÄ</strong><br>
                                        <small>Inteligente: considera tempo de resposta vs fila para m√°xima efici√™ncia</small>
                                    </div>
                                    <div class="strategy-option" data-strategy="round_robin">
                                        <strong>Round Robin</strong><br>
                                        <small>Alterna entre endpoints sequencialmente</small>
                                    </div>
                                    <div class="strategy-option" data-strategy="priority">
                                        <strong>Priority</strong><br>
                                        <small>Sempre usa o endpoint de maior prioridade dispon√≠vel</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Delay entre Tentativas (ms)</label>
                                <input type="number" class="form-control" id="retryDelay" min="1000" max="10000" step="500">
                                <div class="form-text">Tempo de espera entre tentativas de retry</div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Intervalo Health Check (ms)</label>
                                <input type="number" class="form-control" id="healthCheckInterval" min="10000" max="300000" step="5000">
                                <div class="form-text">Frequ√™ncia de verifica√ß√£o de sa√∫de dos endpoints</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Endpoints -->
                <div class="card" id="endpointsCard">
                    <div class="card-header">
                        <h5><i class="fas fa-server"></i> Endpoints de API</h5>
                    </div>
                    <div class="card-body">
                        <div id="endpointsContainer">
                            <!-- Endpoints ser√£o gerados dinamicamente -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
</div>

<script>
        let currentConfig = {};
        let generalStatus = {};

        // Carregar configura√ß√£o inicial
        document.addEventListener('DOMContentLoaded', function() {
            loadConfiguration();
            loadCurrentStatus();
            loadSelectedModels();
            loadSavedLocalModel();
            setupEventListeners();
            
            // Auto-refresh status every 10 seconds
            setInterval(() => {
                loadCurrentStatus();
            }, 10000);
        });

        function setupEventListeners() {
            // Strategy selection
            document.querySelectorAll('.strategy-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.strategy-option').forEach(o => o.classList.remove('selected'));
                    this.classList.add('selected');
                });
            });

            // Operation mode change
            document.getElementById('operationMode').addEventListener('change', function() {
                toggleModeVisibility();
                updateConfigFromForm();
            });

            // Local configuration event listeners
            document.getElementById('localPort').addEventListener('change', function() {
                updatePortBasedProtocol();
                updateConfigFromForm();
            });
            
            document.getElementById('localProtocol').addEventListener('change', function() {
                updateProtocolBasedPort();
                toggleLocalRKLlamaSection();
                updateConfigFromForm();
            });

            document.getElementById('loadLocalModels').addEventListener('click', loadLocalModels);
            document.getElementById('testLocalConnection').addEventListener('click', testLocalConnection);
            document.getElementById('loadLocalModelBtn').addEventListener('click', loadLocalModelInRKLlama);

            // Local model selection change
            document.getElementById('localModel').addEventListener('change', function() {
                updateLocalLoadModelButton();
                saveLocalModelSelection();
                updateConfigFromForm();
            });

            // Auto-save on change
            ['ollamaApiEnabled', 'apiTimeout', 'retryDelay', 'healthCheckInterval'].forEach(id => {
                document.getElementById(id).addEventListener('change', updateConfigFromForm);
            });
            
            // Endpoint count change
            document.getElementById('endpointCount').addEventListener('change', function() {
                updateConfigFromForm();
                updateEndpointsForm();
            });
        }

        async function loadConfiguration() {
            try {
                const response = await fetch('/api/configs');
                const config = await response.json();
                currentConfig = config;
                updateFormFromConfig();
            } catch (error) {
                console.error('Erro ao carregar configura√ß√£o:', error);
                showAlert('Erro ao carregar configura√ß√£o', 'danger');
            }
        }

        async function loadCurrentStatus() {
            try {
                const response = await fetch('/api/ollama-api/status');
                generalStatus = await response.json();
                updateGeneralStatus();
                updateEndpointsStatus();
            } catch (error) {
                console.error('Erro ao carregar status:', error);
                document.getElementById('generalStatus').innerHTML = 
                    '<div class="alert alert-warning">Erro ao carregar status</div>';
            }
        }

        function updateFormFromConfig() {
            const ollamaApi = currentConfig.ollamaApi || {};
            
            // Initialize endpoint count selector
            initializeEndpointCountSelector();
            
            // Set current endpoint count
            const currentEndpointCount = ollamaApi.endpoints ? ollamaApi.endpoints.length : 5;
            document.getElementById('endpointCount').value = Math.min(currentEndpointCount, 99);
            
            document.getElementById('ollamaApiEnabled').checked = ollamaApi.enabled || false;
            document.getElementById('operationMode').value = ollamaApi.mode || 'local';
            document.getElementById('apiTimeout').value = ollamaApi.timeout || 600000;
            document.getElementById('retryDelay').value = ollamaApi.retryDelay || 2000;
            document.getElementById('healthCheckInterval').value = 
                ollamaApi.loadBalancing?.healthCheckInterval || 30000;

            // Update strategy selection
            const strategy = ollamaApi.loadBalancing?.strategy || 'queue_length';
            document.querySelectorAll('.strategy-option').forEach(option => {
                option.classList.remove('selected');
                if (option.dataset.strategy === strategy) {
                    option.classList.add('selected');
                }
            });

            // Load local configuration
            document.getElementById('localPort').value = ollamaApi.localPort || 11434;
            document.getElementById('localProtocol').value = ollamaApi.localProtocol || 'ollama';
            
            // Load local model if saved
            const localModel = ollamaApi.localModel || currentConfig.llm?.model;
            if (localModel) {
                const localModelSelect = document.getElementById('localModel');
                // Add saved model as option if it doesn't exist
                const existingOption = Array.from(localModelSelect.options).find(
                    option => option.value === localModel
                );
                if (!existingOption && localModel) {
                    const option = document.createElement('option');
                    option.value = localModel;
                    option.textContent = localModel;
                    option.setAttribute('data-saved', 'true');
                    localModelSelect.appendChild(option);
                }
                localModelSelect.value = localModel;
            }

            toggleModeVisibility();
            toggleLocalRKLlamaSection();
            updateEndpointsForm();
        }

        function updateConfigFromForm() {
            if (!currentConfig.ollamaApi) currentConfig.ollamaApi = {};
            if (!currentConfig.ollamaApi.loadBalancing) currentConfig.ollamaApi.loadBalancing = {};

            currentConfig.ollamaApi.enabled = document.getElementById('ollamaApiEnabled').checked;
            currentConfig.ollamaApi.mode = document.getElementById('operationMode').value;
            currentConfig.ollamaApi.timeout = parseInt(document.getElementById('apiTimeout').value);
            currentConfig.ollamaApi.retryDelay = parseInt(document.getElementById('retryDelay').value);
            currentConfig.ollamaApi.loadBalancing.healthCheckInterval = 
                parseInt(document.getElementById('healthCheckInterval').value);

            const selectedStrategy = document.querySelector('.strategy-option.selected');
            if (selectedStrategy) {
                currentConfig.ollamaApi.loadBalancing.strategy = selectedStrategy.dataset.strategy;
            }

            // Save local configuration
            currentConfig.ollamaApi.localPort = parseInt(document.getElementById('localPort').value);
            currentConfig.ollamaApi.localProtocol = document.getElementById('localProtocol').value;
            
            const localModel = document.getElementById('localModel').value;
            if (localModel) {
                currentConfig.ollamaApi.localModel = localModel;
                // Also update the main LLM config for consistency
                if (!currentConfig.llm) currentConfig.llm = {};
                currentConfig.llm.model = localModel;
                
                // Update host based on local config
                const localPort = currentConfig.ollamaApi.localPort || 11434;
                currentConfig.llm.host = `http://localhost:${localPort}`;
            }
            
            // Update endpoint count
            const endpointCount = parseInt(document.getElementById('endpointCount').value) || 5;
            if (!currentConfig.ollamaApi.endpoints) currentConfig.ollamaApi.endpoints = [];
            
            // Ensure endpoints array matches the selected count
            while (currentConfig.ollamaApi.endpoints.length < endpointCount) {
                currentConfig.ollamaApi.endpoints.push({
                    url: '',
                    name: '',
                    type: 'ollama',
                    enabled: false,
                    priority: currentConfig.ollamaApi.endpoints.length + 1,
                    maxRetries: 2
                });
            }
            
            // Trim if necessary
            if (currentConfig.ollamaApi.endpoints.length > endpointCount) {
                currentConfig.ollamaApi.endpoints.splice(endpointCount);
            }
        }

        function toggleModeVisibility() {
            const mode = document.getElementById('operationMode').value;
            const localConfigSection = document.getElementById('localConfigSection');
            const endpointsCard = document.getElementById('endpointsCard');
            const loadBalancingSection = document.getElementById('loadBalancingStrategy').closest('.col-md-6');
            
            if (mode === 'local') {
                // Show local config section, hide endpoints
                localConfigSection.style.display = 'block';
                endpointsCard.style.display = 'none';
                loadBalancingSection.style.display = 'none';
            } else {
                // Show endpoints, hide local config section
                localConfigSection.style.display = 'none';
                endpointsCard.style.display = 'block';
                loadBalancingSection.style.display = 'block';
            }
        }

        function updatePortBasedProtocol() {
            const port = parseInt(document.getElementById('localPort').value);
            const protocolSelect = document.getElementById('localProtocol');
            
            // Auto-detect protocol based on common ports
            if (port === 8080) {
                protocolSelect.value = 'rkllama';
            } else if (port === 11434) {
                protocolSelect.value = 'ollama';
            }
            
            toggleLocalRKLlamaSection();
        }

        function updateProtocolBasedPort() {
            const protocol = document.getElementById('localProtocol').value;
            const portInput = document.getElementById('localPort');
            
            // Auto-update port based on protocol
            if (protocol === 'rkllama' && portInput.value == 11434) {
                portInput.value = 8080;
            } else if (protocol === 'ollama' && portInput.value == 8080) {
                portInput.value = 11434;
            }
        }

        function toggleLocalRKLlamaSection() {
            const protocol = document.getElementById('localProtocol').value;
            const rkLlamaSection = document.getElementById('localRKLlamaSection');
            
            if (protocol === 'rkllama') {
                rkLlamaSection.style.display = 'block';
            } else {
                rkLlamaSection.style.display = 'none';
            }
        }

        function updateLocalLoadModelButton() {
            const protocol = document.getElementById('localProtocol').value;
            const modelSelect = document.getElementById('localModel');
            const loadModelBtn = document.getElementById('loadLocalModelBtn');
            
            if (protocol === 'rkllama' && modelSelect.value) {
                loadModelBtn.disabled = false;
                loadModelBtn.innerHTML = `<i class="fas fa-download"></i> Carregar ${modelSelect.value}`;
            } else {
                loadModelBtn.disabled = true;
                loadModelBtn.innerHTML = '<i class="fas fa-download"></i> Carregar Modelo';
            }
        }

        async function testLocalConnection() {
            const port = document.getElementById('localPort').value;
            const protocol = document.getElementById('localProtocol').value;
            const statusSpan = document.getElementById('localConnectionStatus');
            const testButton = document.getElementById('testLocalConnection');
            
            // Update UI state
            testButton.disabled = true;
            testButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            statusSpan.innerHTML = '<i class="fas fa-spinner fa-spin text-info"></i> Testando...';

            try {
                const url = `http://localhost:${port}`;
                const response = await fetch('/api/ollama-api/test', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url, type: protocol })
                });

                const result = await response.json();
                
                if (result.success) {
                    statusSpan.innerHTML = `<i class="fas fa-check-circle text-success"></i> Online - ${result.type} v${result.version}`;
                    
                    // Show additional info based on type
                    if (result.type === 'RKLLama') {
                        const currentModel = result.currentModel || 'Nenhum carregado';
                        statusSpan.innerHTML += `<br><small>Modelo atual: ${currentModel}</small>`;
                    }
                } else {
                    statusSpan.innerHTML = `<i class="fas fa-times-circle text-danger"></i> Offline`;
                }
            } catch (error) {
                statusSpan.innerHTML = `<i class="fas fa-times-circle text-danger"></i> Erro: ${error.message}`;
            } finally {
                testButton.disabled = false;
                testButton.innerHTML = '<i class="fas fa-vial"></i>';
            }
        }

        async function loadLocalModelInRKLlama() {
            const port = document.getElementById('localPort').value;
            const model = document.getElementById('localModel').value;
            const loadModelBtn = document.getElementById('loadLocalModelBtn');
            
            if (!model) {
                showAlert('Selecione um modelo primeiro', 'warning');
                return;
            }

            // Update UI state
            loadModelBtn.disabled = true;
            loadModelBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Carregando...';

            try {
                const url = `http://localhost:${port}`;
                const response = await fetch('/api/ollama-api/load-model', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url, model, type: 'rkllama' })
                });

                const result = await response.json();
                
                if (result.success) {
                    showAlert(`Modelo ${model} carregado com sucesso no RKLLama local!`, 'success');
                    loadModelBtn.innerHTML = `<i class="fas fa-check"></i> ${model} Carregado`;
                    loadModelBtn.className = 'btn btn-sm btn-success ms-2';
                    
                    // Refresh connection status
                    setTimeout(() => {
                        testLocalConnection();
                    }, 1000);
                } else {
                    showAlert(`Erro ao carregar modelo: ${result.error}`, 'danger');
                    loadModelBtn.innerHTML = `<i class="fas fa-download"></i> Carregar ${model}`;
                    loadModelBtn.className = 'btn btn-sm btn-primary ms-2';
                }
            } catch (error) {
                showAlert(`Erro na conex√£o: ${error.message}`, 'danger');
                loadModelBtn.innerHTML = `<i class="fas fa-download"></i> Carregar ${model}`;
                loadModelBtn.className = 'btn btn-sm btn-primary ms-2';
            } finally {
                loadModelBtn.disabled = false;
            }
        }

        async function loadLocalModels() {
            const localModelSelect = document.getElementById('localModel');
            const loadButton = document.getElementById('loadLocalModels');
            const statusSpan = document.getElementById('localModelStatus');
            const port = document.getElementById('localPort').value;
            const protocol = document.getElementById('localProtocol').value;
            
            // Update UI state
            loadButton.disabled = true;
            loadButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            statusSpan.textContent = 'Carregando modelos locais...';
            statusSpan.className = 'text-info';
            localModelSelect.disabled = true;

            try {
                const url = `http://localhost:${port}`;
                
                // Use endpoint that accepts specific URL and type
                const response = await fetch('/api/ollama-api/endpoint-models', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url, type: protocol })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    const models = result.models || [];
                    
                    // Clear existing options
                    localModelSelect.innerHTML = '<option value="">Selecione um modelo...</option>';
                    
                    // Add models to select
                    models.forEach(model => {
                        const option = document.createElement('option');
                        const modelName = typeof model === 'string' ? model : model.name || model.model;
                        option.value = modelName;
                        option.textContent = modelName;
                        
                        // Add size info if available
                        if (model.size) {
                            option.textContent += ` (${(model.size / 1024 / 1024 / 1024).toFixed(1)}GB)`;
                        }
                        localModelSelect.appendChild(option);
                    });
                    
                    // Restore selected model if it exists
                    const savedModel = currentConfig.ollamaApi?.localModel || currentConfig.llm?.model;
                    if (savedModel && models.some(m => {
                        const modelName = typeof m === 'string' ? m : m.name || m.model;
                        return modelName === savedModel;
                    })) {
                        localModelSelect.value = savedModel;
                    }
                    
                    localModelSelect.disabled = false;
                    statusSpan.innerHTML = `<i class="fas fa-server text-info"></i> ${models.length} modelo(s) encontrado(s) em ${url} (${result.type || protocol})`;
                    statusSpan.className = 'text-success';
                    
                    // Update load model button for RKLLama
                    updateLocalLoadModelButton();
                } else {
                    throw new Error(result.error || 'Erro desconhecido');
                }
            } catch (error) {
                statusSpan.textContent = `Erro ao conectar: ${error.message}`;
                statusSpan.className = 'text-danger';
                console.error('Erro ao carregar modelos locais:', error);
            } finally {
                loadButton.disabled = false;
                loadButton.innerHTML = '<i class="fas fa-sync-alt"></i>';
            }
        }

        async function saveLocalModelSelection() {
            const localModel = document.getElementById('localModel').value;
            const localPort = document.getElementById('localPort').value;
            const localProtocol = document.getElementById('localProtocol').value;
            
            if (!localModel) return;

            try {
                const response = await fetch('/api/ollama-local/save-model', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        model: localModel,
                        port: parseInt(localPort),
                        protocol: localProtocol
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    // Update current config
                    updateConfigFromForm();
                    
                    // Show feedback
                    const statusSpan = document.getElementById('localModelStatus');
                    statusSpan.innerHTML = `<i class="fas fa-save text-success"></i> Configura√ß√£o salva: ${localModel} em localhost:${result.savedPort} (${result.savedProtocol})`;
                    statusSpan.className = 'text-success';
                    
                    // Clear feedback after 5 seconds
                    setTimeout(() => {
                        if (statusSpan.innerHTML.includes('Configura√ß√£o salva')) {
                            statusSpan.innerHTML = `<i class="fas fa-database text-info"></i> Modelo atual: ${localModel}`;
                            statusSpan.className = 'text-info';
                        }
                    }, 5000);
                } else {
                    console.error('Erro ao salvar configura√ß√£o local:', result.error);
                    showAlert(`Erro ao salvar configura√ß√£o: ${result.error}`, 'warning');
                }
            } catch (error) {
                console.error('Erro ao salvar configura√ß√£o local:', error);
                showAlert(`Erro ao salvar configura√ß√£o: ${error.message}`, 'danger');
            }
        }

        async function loadSavedLocalModel() {
            try {
                const response = await fetch('/api/ollama-local/selected-model');
                const result = await response.json();
                
                if (result.success) {
                    // Load port and protocol
                    if (result.port) {
                        document.getElementById('localPort').value = result.port;
                    }
                    if (result.protocol) {
                        document.getElementById('localProtocol').value = result.protocol;
                        toggleLocalRKLlamaSection();
                    }
                    
                    // Load model if available
                    if (result.model) {
                        const localModelSelect = document.getElementById('localModel');
                        const statusSpan = document.getElementById('localModelStatus');
                        
                        // Add saved model as option if it doesn't exist
                        const existingOption = Array.from(localModelSelect.options).find(
                            option => option.value === result.model
                        );
                        if (!existingOption) {
                            const option = document.createElement('option');
                            option.value = result.model;
                            option.textContent = result.model;
                            option.setAttribute('data-saved', 'true');
                            localModelSelect.appendChild(option);
                        }
                        
                        // Select the saved model
                        localModelSelect.value = result.model;
                        
                        // Update load model button for RKLLama
                        updateLocalLoadModelButton();
                        
                        // Show feedback
                        let statusHtml = `<i class="fas fa-database text-success"></i> Configura√ß√£o carregada: ${result.model} em localhost:${result.port} (${result.protocol})`;
                        if (result.lastSelectedAt) {
                            statusHtml += `<br><small>√öltima atualiza√ß√£o: ${new Date(result.lastSelectedAt).toLocaleString('pt-BR')}</small>`;
                        }
                        statusSpan.innerHTML = statusHtml;
                        statusSpan.className = 'text-success';
                    }
                }
            } catch (error) {
                console.error('Erro ao carregar configura√ß√£o local salva:', error);
            }
        }

        function updateGeneralStatus() {
            const container = document.getElementById('generalStatus');
            
            if (!generalStatus) {
                container.innerHTML = '<div class="alert alert-warning">Status n√£o dispon√≠vel</div>';
                return;
            }

            const modeClass = generalStatus.mode === 'api' ? 'success' : 'info';
            const healthyCount = generalStatus.healthyEndpoints || 0;
            const totalCount = generalStatus.totalEndpoints || 0;
            
            container.innerHTML = `
                <div class="row">
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">Modo Atual</h5>
                                <span class="badge bg-${modeClass} fs-6">${generalStatus.mode || 'local'}</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">Endpoints</h5>
                                <span class="fs-4">${healthyCount}/${totalCount}</span>
                                <br><small class="text-muted">Saud√°veis</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">Estrat√©gia</h5>
                                <span class="badge bg-info fs-6">${generalStatus.strategy || 'queue_length'}</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">Status</h5>
                                <span class="badge bg-${generalStatus.enabled ? 'success' : 'secondary'} fs-6">
                                    ${generalStatus.enabled ? 'Habilitado' : 'Desabilitado'}
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function initializeEndpointCountSelector() {
            const endpointCountSelect = document.getElementById('endpointCount');
            if (endpointCountSelect.children.length === 0) {
                // Generate options from 1 to 99
                for (let i = 1; i <= 99; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = i;
                    endpointCountSelect.appendChild(option);
                }
            }
        }

        function updateEndpointsForm() {
            const container = document.getElementById('endpointsContainer');
            const endpoints = currentConfig.ollamaApi?.endpoints || [];
            const endpointCount = parseInt(document.getElementById('endpointCount').value) || 5;
            
            // Adjust endpoints array to match selected count
            while (endpoints.length < endpointCount) {
                endpoints.push({
                    url: '',
                    name: '',
                    type: 'ollama',
                    enabled: false,
                    priority: endpoints.length + 1,
                    maxRetries: 2
                });
            }
            
            // Trim endpoints if count is reduced
            if (endpoints.length > endpointCount) {
                endpoints.splice(endpointCount);
            }

            // Ensure existing endpoints have a type
            endpoints.forEach(endpoint => {
                if (!endpoint.type) {
                    endpoint.type = 'ollama';
                }
            });

            // Sort endpoints by priority (1 first, then 2, 3, etc.)
            const sortedEndpoints = endpoints.slice(0, endpointCount).sort((a, b) => {
                const priorityA = parseInt(a.priority) || 999;
                const priorityB = parseInt(b.priority) || 999;
                return priorityA - priorityB;
            });

            // Create a mapping from sorted index to original index
            const sortedToOriginalIndex = new Map();
            sortedEndpoints.forEach((endpoint, sortedIndex) => {
                const originalIndex = endpoints.findIndex(ep => ep === endpoint);
                sortedToOriginalIndex.set(sortedIndex, originalIndex);
            });

            container.innerHTML = sortedEndpoints.map((endpoint, index) => 
                createEndpointCard(endpoint, index)
            ).join('');

            // Attach event listeners for visible endpoints only
            sortedEndpoints.forEach((_, sortedIndex) => {
                const originalIndex = sortedToOriginalIndex.get(sortedIndex);
                ['url', 'type', 'enabled', 'priority', 'maxRetries', 'model', 'apikey'].forEach(field => {
                    const element = document.getElementById(`endpoint_${sortedIndex}_${field}`);
                    if (element) {
                        element.addEventListener('change', () => {
                            updateEndpointConfig(originalIndex);
                            if (field === 'type') {
                                toggleRKLlamaSection(sortedIndex);
                            }
                            if (field === 'model') {
                                const currentType = document.getElementById(`endpoint_${sortedIndex}_type`).value;
                                if (currentType === 'rkllama') {
                                    updateLoadModelButton(sortedIndex);
                                }
                                // Auto-save model selection
                                saveSelectedModel(originalIndex);
                            }
                        });
                    }
                });

                // Load models button
                document.getElementById(`loadModels_${sortedIndex}`).addEventListener('click', 
                    () => loadEndpointModels(originalIndex));
                
                // Load model button (RKLLama)
                document.getElementById(`loadModelBtn_${sortedIndex}`).addEventListener('click', 
                    () => loadModelInRKLlama(originalIndex));

                document.getElementById(`testEndpoint_${sortedIndex}`).addEventListener('click', 
                    () => testEndpoint(originalIndex));
                
                document.getElementById(`diagnoseEndpoint_${sortedIndex}`).addEventListener('click', 
                    () => diagnoseEndpoint(originalIndex));
                
                // Initialize RKLLama section visibility
                toggleRKLlamaSection(sortedIndex);
            });
        }

        function updateEndpointsStatus() {
            if (!generalStatus.endpoints) return;

            // Clear all cards first
            document.querySelectorAll('.endpoint-card').forEach(card => {
                const indicator = card.querySelector('.status-indicator');
                const statusText = card.querySelector('.endpoint-status');
                const modelInfo = card.querySelector('.model-info');
                const typeIndicator = card.querySelector('.endpoint-type');
                
                // Reset to unknown status
                indicator.className = 'status-indicator unknown';
                card.className = 'endpoint-card';
                statusText.innerHTML = '<i class="fas fa-question-circle text-muted"></i> Desconhecido';
                if (typeIndicator) {
                    typeIndicator.innerHTML = '<i class="fas fa-question-circle"></i> Detectando...';
                    typeIndicator.className = 'endpoint-type badge bg-secondary ms-2';
                }
                if (modelInfo) {
                    modelInfo.innerHTML = 'Aguardando informa√ß√µes...';
                }
            });

            // Update cards that have matching status by URL
            generalStatus.endpoints.forEach((status) => {
                // Find the card that matches this status by URL
                const cards = document.querySelectorAll('.endpoint-card');
                let matchingCard = null;
                
                for (const card of cards) {
                    const index = card.getAttribute('data-endpoint-index');
                    const urlInput = document.getElementById(`endpoint_${index}_url`);
                    if (urlInput && urlInput.value === status.url) {
                        matchingCard = card;
                        break;
                    }
                }
                
                if (!matchingCard) return;

                const indicator = matchingCard.querySelector('.status-indicator');
                const statusText = matchingCard.querySelector('.endpoint-status');
                const modelInfo = matchingCard.querySelector('.model-info');
                const typeIndicator = matchingCard.querySelector('.endpoint-type');

                // Update type indicator
                if (typeIndicator) {
                    let iconHtml, badgeClass;
                    
                    if (status.type === 'rkllama') {
                        iconHtml = '<i class="fas fa-robot text-white"></i> RKLLama';
                        badgeClass = 'bg-info';
                    } else if (status.type === 'chatgpt') {
                        iconHtml = '<i class="fas fa-rocket text-white"></i> ChatGPT';
                        badgeClass = 'bg-success';
                    } else {
                        iconHtml = '<i class="fas fa-brain text-white"></i> Ollama';
                        badgeClass = 'bg-primary';
                    }
                    
                    typeIndicator.innerHTML = iconHtml;
                    typeIndicator.className = `endpoint-type badge ${badgeClass}`;
                }

                if (status.healthy) {
                    indicator.className = 'status-indicator healthy';
                    
                    // Update card class based on processing status
                    const isProcessing = status.processing && status.processing.activeRequests > 0;
                    matchingCard.className = isProcessing ? 'endpoint-card processing' : 'endpoint-card active';
                    
                    // Check for processing status
                    let statusHtml = `<i class="fas fa-check-circle text-success"></i> Online`;
                    if (isProcessing) {
                        statusHtml += ` <span class="badge bg-warning text-dark ms-2 processing-badge">
                            <i class="fas fa-cog fa-spin"></i> ${status.processing.activeRequests} processando
                        </span>`;
                    }
                    statusText.innerHTML = statusHtml;
                    
                    if (status.runningModels !== undefined && modelInfo) {
                        let modelInfoHtml = `
                            Modelos em execu√ß√£o: ${status.runningModels} | 
                            Score: <span class="load-score">${status.loadScore}</span> |
                            Vers√£o: ${status.version || 'N/A'}
                        `;
                        
                        // Add current model info for RKLLama
                        if (status.type === 'rkllama' && status.currentModel) {
                            modelInfoHtml += `<br>Modelo atual: ${status.currentModel}`;
                        }
                        
                        // Add processing statistics
                        if (status.processing) {
                            const proc = status.processing;
                            modelInfoHtml += `<br>Processamento: ${proc.totalRequests || 0} total | `;
                            if (proc.averageResponseTime) {
                                modelInfoHtml += `M√©dia: ${Math.round(proc.averageResponseTime)}ms | `;
                            }
                            modelInfoHtml += `Ativos: ${proc.activeRequests || 0}`;
                            
                            // Show recent activity indicator
                            if (proc.recentRequests > 0) {
                                modelInfoHtml += ` <span class="badge bg-info ms-1">${proc.recentRequests} recentes</span>`;
                            }
                        }
                        
                        modelInfo.innerHTML = modelInfoHtml;
                    }
                } else {
                    indicator.className = 'status-indicator unhealthy';
                    matchingCard.className = 'endpoint-card error';
                    statusText.innerHTML = `<i class="fas fa-times-circle text-danger"></i> Offline`;
                    if (modelInfo) {
                        modelInfo.innerHTML = status.error || 'Endpoint n√£o dispon√≠vel';
                    }
                }
            });
        }

        function createEndpointCard(endpoint, index) {
            const isPort8080 = endpoint.url && endpoint.url.includes(':8080');
            const placeholderUrl = isPort8080 ? 'http://localhost:8080' : 'http://localhost:11434';
            const selectedModel = endpoint.model || '';
            
            return `
                <div class="endpoint-card" data-endpoint-index="${index}">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <span class="status-indicator unknown"></span>
                                <span class="endpoint-name">${endpoint.name || `Endpoint ${index + 1}`}</span>
                                <span class="endpoint-type badge bg-secondary ms-2">
                                    <i class="fas fa-question-circle"></i> Detectando...
                                </span>
                            </h6>
                            <div class="endpoint-status">
                                <i class="fas fa-question-circle text-muted"></i> Desconhecido
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Nome do Endpoint</label>
                                    <input type="text" class="form-control" id="endpoint_${index}_name" 
                                           value="${endpoint.name || ''}" 
                                           placeholder="Ex: Servidor Principal, GPU 1, etc.">
                                    <div class="form-text">
                                        Apelido para identificar facilmente este endpoint
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <div class="mb-3">
                                    <label class="form-label">Prioridade</label>
                                    <input type="number" class="form-control" id="endpoint_${index}_priority" 
                                           value="${endpoint.priority || index + 1}" min="1" max="5">
                                    <div class="form-text">Ordem</div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">URL do Endpoint</label>
                                    <input type="url" class="form-control" id="endpoint_${index}_url" 
                                           value="${endpoint.url || ''}" 
                                           placeholder="${placeholderUrl}">
                                    <div class="form-text">
                                        <strong>Ollama:</strong> :11434<br>
                                        <strong>RKLLama:</strong> :8080
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label class="form-label">Tipo</label>
                                    <select class="form-select" id="endpoint_${index}_type">
                                        <option value="ollama" ${(endpoint.type || 'ollama') === 'ollama' ? 'selected' : ''}>
                                            üß† Ollama
                                        </option>
                                        <option value="rkllama" ${endpoint.type === 'rkllama' ? 'selected' : ''}>
                                            ü§ñ RKLLama
                                        </option>
                                        <option value="chatgpt" ${endpoint.type === 'chatgpt' ? 'selected' : ''}>
                                            üöÄ ChatGPT
                                        </option>
                                    </select>
                                    <div class="form-text">
                                        Escolha o tipo de API
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Modelo Preferido</label>
                                    <div class="input-group">
                                        <select class="form-select" id="endpoint_${index}_model" disabled>
                                            <option value="">Selecione um modelo...</option>
                                            ${selectedModel ? `<option value="${selectedModel}" selected>${selectedModel}</option>` : ''}
                                        </select>
                                        <button class="btn btn-outline-secondary" type="button" id="loadModels_${index}" 
                                                title="Carregar modelos dispon√≠veis">
                                            <i class="fas fa-sync-alt"></i>
                                        </button>
                                    </div>
                                    <div class="form-text">
                                        <span id="modelStatus_${index}">Conecte-se ao endpoint para ver modelos</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <div class="mb-3">
                                    <label class="form-label">Max Retries</label>
                                    <input type="number" class="form-control" id="endpoint_${index}_maxRetries" 
                                           value="${endpoint.maxRetries || 2}" min="0" max="5">
                                </div>
                            </div>
                            <div class="col-md-1">
                                <div class="mb-3">
                                    <label class="form-label">Habilitado</label>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" 
                                               id="endpoint_${index}_enabled" 
                                               ${endpoint.enabled ? 'checked' : ''}>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- RKLLama Model Loading Section -->
                        <div class="row rkllama-section" id="rkllama_${index}" style="display: none;">
                            <div class="col-md-12">
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle"></i>
                                    <strong>RKLLama:</strong> Selecione um modelo acima e clique em "Carregar Modelo" para ativ√°-lo no endpoint.
                                    <button class="btn btn-sm btn-primary ms-2" id="loadModelBtn_${index}" disabled>
                                        <i class="fas fa-download"></i> Carregar Modelo
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row chatgpt-section" id="chatgpt_${index}" style="display: none;">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">API Key da OpenAI</label>
                                    <input type="password" class="form-control" id="endpoint_${index}_apikey" 
                                           value="${endpoint.apikey || ''}" 
                                           placeholder="sk-...">
                                    <div class="form-text">
                                        Sua chave de API da OpenAI para acessar o ChatGPT
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="endpoint_${index}_useStreaming" 
                                               ${endpoint.useStreaming !== false ? 'checked' : ''}>
                                        <label class="form-check-label" for="endpoint_${index}_useStreaming">
                                            Usar Streaming
                                        </label>
                                        <div class="form-text">
                                            Ativa respostas em tempo real (recomendado)
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="alert alert-info mb-0">
                                    <i class="fas fa-info-circle"></i>
                                    <strong>ChatGPT:</strong> Configure sua API Key da OpenAI para usar os modelos GPT.
                                    <br><small>A URL ser√° automaticamente definida como: https://api.openai.com</small>
                                    <br><small>Modelos dispon√≠veis: o3 (reasoning), o4-mini (fast), GPT-4.1 (agentic), GPT-4.1-mini, GPT-4.1-nano</small>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="model-info">
                                Aguardando informa√ß√µes...
                            </div>
                            <div class="btn-group">
                                <button class="btn btn-outline-primary btn-sm" id="testEndpoint_${index}">
                                    <i class="fas fa-vial"></i> Testar
                                </button>
                                <button class="btn btn-outline-warning btn-sm" id="diagnoseEndpoint_${index}">
                                    <i class="fas fa-stethoscope"></i> Diagnosticar
                                </button>
                            </div>
                        </div>
                        
                        <div id="testResult_${index}"></div>
                    </div>
                </div>
            `;
        }

        function updateEndpointConfig(index) {
            if (!currentConfig.ollamaApi) currentConfig.ollamaApi = {};
            if (!currentConfig.ollamaApi.endpoints) currentConfig.ollamaApi.endpoints = [];

            while (currentConfig.ollamaApi.endpoints.length <= index) {
                currentConfig.ollamaApi.endpoints.push({});
            }

            const endpoint = currentConfig.ollamaApi.endpoints[index];
            endpoint.url = document.getElementById(`endpoint_${index}_url`).value;
            endpoint.name = document.getElementById(`endpoint_${index}_name`).value;
            endpoint.type = document.getElementById(`endpoint_${index}_type`).value;
            endpoint.enabled = document.getElementById(`endpoint_${index}_enabled`).checked;
            endpoint.priority = parseInt(document.getElementById(`endpoint_${index}_priority`).value);
            endpoint.maxRetries = parseInt(document.getElementById(`endpoint_${index}_maxRetries`).value);
            endpoint.model = document.getElementById(`endpoint_${index}_model`).value;
            
            // Save API key for ChatGPT endpoints
            const apikeyField = document.getElementById(`endpoint_${index}_apikey`);
            if (apikeyField) {
                endpoint.apikey = apikeyField.value;
            }
            
            // Save ChatGPT-specific settings
            const useStreamingField = document.getElementById(`endpoint_${index}_useStreaming`);
            if (useStreamingField) {
                endpoint.useStreaming = useStreamingField.checked;
            }
        }

        function toggleTypeSpecificSections(index) {
            const type = document.getElementById(`endpoint_${index}_type`).value;
            const rkLlamaSection = document.getElementById(`rkllama_${index}`);
            const chatgptSection = document.getElementById(`chatgpt_${index}`);
            
            // Hide all type-specific sections first
            rkLlamaSection.style.display = 'none';
            chatgptSection.style.display = 'none';
            
            // Show the appropriate section based on type
            if (type === 'rkllama') {
                rkLlamaSection.style.display = 'block';
            } else if (type === 'chatgpt') {
                chatgptSection.style.display = 'block';
                // Auto-set URL for ChatGPT
                const urlInput = document.getElementById(`endpoint_${index}_url`);
                if (urlInput && !urlInput.value) {
                    urlInput.value = 'https://api.openai.com';
                }
            }
        }
        
        // Backward compatibility alias
        function toggleRKLlamaSection(index) {
            toggleTypeSpecificSections(index);
        }

        async function loadEndpointModels(index) {
            const url = document.getElementById(`endpoint_${index}_url`).value;
            const type = document.getElementById(`endpoint_${index}_type`).value;
            const modelSelect = document.getElementById(`endpoint_${index}_model`);
            const loadButton = document.getElementById(`loadModels_${index}`);
            const statusSpan = document.getElementById(`modelStatus_${index}`);
            
            if (!url.trim()) {
                statusSpan.textContent = 'URL do endpoint √© obrigat√≥ria';
                statusSpan.className = 'text-danger';
                return;
            }

            // Update UI state
            loadButton.disabled = true;
            loadButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            statusSpan.textContent = 'Carregando modelos...';
            statusSpan.className = 'text-info';
            modelSelect.disabled = true;

            try {
                let response;
                if (type === 'chatgpt') {
                    // For ChatGPT, get API key and use models API
                    const apikey = document.getElementById(`endpoint_${index}_apikey`).value;
                    if (!apikey) {
                        throw new Error('API Key da OpenAI √© obrigat√≥ria para carregar modelos');
                    }
                    
                    response = await fetch('/api/chatgpt/models', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ url, apikey })
                    });
                } else {
                    response = await fetch('/api/ollama-api/endpoint-models', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ url, type })
                    });
                }

                const result = await response.json();
                
                if (result.success) {
                    // Clear existing options
                    modelSelect.innerHTML = '<option value="">Selecione um modelo...</option>';
                    
                    // Add models to select
                    const models = result.models || [];
                    models.forEach(model => {
                        const option = document.createElement('option');
                        option.value = typeof model === 'string' ? model : model.name || model.model;
                        option.textContent = typeof model === 'string' ? model : model.name || model.model;
                        modelSelect.appendChild(option);
                    });
                    
                    // Restore selected model if it exists
                    const savedModel = currentConfig.ollamaApi?.endpoints?.[index]?.model;
                    if (savedModel && models.some(m => (typeof m === 'string' ? m : m.name || m.model) === savedModel)) {
                        modelSelect.value = savedModel;
                    }
                    
                    modelSelect.disabled = false;
                    statusSpan.textContent = `${models.length} modelo(s) encontrado(s)`;
                    statusSpan.className = 'text-success';
                    
                    // Update load model button for RKLLama
                    if (type === 'rkllama') {
                        updateLoadModelButton(index);
                    }
                } else {
                    statusSpan.textContent = `Erro: ${result.error}`;
                    statusSpan.className = 'text-danger';
                }
            } catch (error) {
                statusSpan.textContent = `Erro na conex√£o: ${error.message}`;
                statusSpan.className = 'text-danger';
            } finally {
                loadButton.disabled = false;
                loadButton.innerHTML = '<i class="fas fa-sync-alt"></i>';
            }
        }

        function updateLoadModelButton(index) {
            const modelSelect = document.getElementById(`endpoint_${index}_model`);
            const loadModelBtn = document.getElementById(`loadModelBtn_${index}`);
            
            if (modelSelect.value) {
                loadModelBtn.disabled = false;
                loadModelBtn.innerHTML = `<i class="fas fa-download"></i> Carregar ${modelSelect.value}`;
            } else {
                loadModelBtn.disabled = true;
                loadModelBtn.innerHTML = '<i class="fas fa-download"></i> Carregar Modelo';
            }
        }

        async function loadModelInRKLlama(index) {
            const url = document.getElementById(`endpoint_${index}_url`).value;
            const model = document.getElementById(`endpoint_${index}_model`).value;
            const loadModelBtn = document.getElementById(`loadModelBtn_${index}`);
            
            if (!url.trim() || !model) {
                showAlert('URL e modelo s√£o obrigat√≥rios para carregar modelo no RKLLama', 'warning');
                return;
            }

            // Update UI state
            loadModelBtn.disabled = true;
            loadModelBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Carregando...';

            try {
                const response = await fetch('/api/ollama-api/load-model', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url, model, type: 'rkllama' })
                });

                const result = await response.json();
                
                if (result.success) {
                    showAlert(`Modelo ${model} carregado com sucesso no RKLLama!`, 'success');
                    loadModelBtn.innerHTML = `<i class="fas fa-check"></i> ${model} Carregado`;
                    loadModelBtn.className = 'btn btn-sm btn-success ms-2';
                    
                    // Update endpoint config
                    updateEndpointConfig(index);
                    
                    // Refresh status
                    setTimeout(() => {
                        loadCurrentStatus();
                    }, 2000);
                } else {
                    showAlert(`Erro ao carregar modelo: ${result.error}`, 'danger');
                    loadModelBtn.innerHTML = `<i class="fas fa-download"></i> Carregar ${model}`;
                    loadModelBtn.className = 'btn btn-sm btn-primary ms-2';
                }
            } catch (error) {
                showAlert(`Erro na conex√£o: ${error.message}`, 'danger');
                loadModelBtn.innerHTML = `<i class="fas fa-download"></i> Carregar ${model}`;
                loadModelBtn.className = 'btn btn-sm btn-primary ms-2';
            } finally {
                loadModelBtn.disabled = false;
            }
        }

        async function diagnoseEndpoint(index) {
            const url = document.getElementById(`endpoint_${index}_url`).value;
            const type = document.getElementById(`endpoint_${index}_type`).value;
            
            if (!url) {
                showAlert('URL do endpoint √© obrigat√≥ria', 'warning');
                return;
            }

            const resultContainer = document.getElementById(`testResult_${index}`);
            const diagnoseButton = document.getElementById(`diagnoseEndpoint_${index}`);
            
            diagnoseButton.disabled = true;
            diagnoseButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Diagnosticando...';

            try {
                const response = await fetch('/api/ollama-api/diagnose', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url, type })
                });

                const result = await response.json();
                
                if (result.success) {
                    const diagnosis = result.diagnosis;
                    let diagnosticHtml = `
                        <div class="test-result ${diagnosis.overall === 'HEALTHY' ? 'success' : 'error'}">
                            <h6><i class="fas fa-stethoscope"></i> Diagn√≥stico Completo</h6>
                            <p><strong>Status Geral:</strong> ${diagnosis.overall}</p>
                            <p><strong>Resumo:</strong> ${diagnosis.summary}</p>
                            <hr>
                            <h6>Testes Realizados:</h6>
                    `;
                    
                    diagnosis.tests.forEach(test => {
                        const icon = test.status === 'PASS' ? 'fa-check-circle text-success' : 'fa-times-circle text-danger';
                        diagnosticHtml += `
                            <div class="mb-2">
                                <i class="fas ${icon}"></i> <strong>${test.name}:</strong> ${test.message}
                            </div>
                        `;
                    });
                    
                    diagnosticHtml += `
                            <small class="text-muted">Diagn√≥stico realizado em: ${new Date(diagnosis.timestamp).toLocaleString('pt-BR')}</small>
                        </div>
                    `;
                    
                    resultContainer.innerHTML = diagnosticHtml;
                } else {
                    resultContainer.innerHTML = `
                        <div class="test-result error">
                            <i class="fas fa-times-circle"></i> Erro no diagn√≥stico<br>
                            ${result.error}
                        </div>
                    `;
                }
            } catch (error) {
                resultContainer.innerHTML = `
                    <div class="test-result error">
                        <i class="fas fa-times-circle"></i> Erro na conex√£o<br>
                        ${error.message}
                    </div>
                `;
            } finally {
                diagnoseButton.disabled = false;
                diagnoseButton.innerHTML = '<i class="fas fa-stethoscope"></i> Diagnosticar';
            }
        }

        async function testEndpoint(index) {
            const url = document.getElementById(`endpoint_${index}_url`).value;
            const type = document.getElementById(`endpoint_${index}_type`).value;
            
            if (!url) {
                showAlert('URL do endpoint √© obrigat√≥ria', 'warning');
                return;
            }

            const resultContainer = document.getElementById(`testResult_${index}`);
            const testButton = document.getElementById(`testEndpoint_${index}`);
            
            testButton.disabled = true;
            testButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Testando...';

            try {
                const response = await fetch('/api/ollama-api/test', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url, type })
                });

                const result = await response.json();
                
                if (result.success) {
                    let successHtml = `
                        <div class="test-result success">
                            <i class="fas fa-check-circle"></i> Teste bem-sucedido!<br>
                            Tipo: ${result.type || type}<br>
                            Vers√£o: ${result.version}<br>
                    `;
                    
                    if (result.type === 'RKLLama') {
                        successHtml += `
                            Modelos dispon√≠veis: ${result.models?.length || 0}<br>
                            Modelo atual: ${result.currentModel || 'Nenhum carregado'}
                        `;
                    } else {
                        successHtml += `
                            Modelos dispon√≠veis: ${result.models?.length || 0}<br>
                            Modelos em execu√ß√£o: ${result.runningModels?.length || 0}
                        `;
                    }
                    
                    successHtml += '</div>';
                    resultContainer.innerHTML = successHtml;
                } else {
                    resultContainer.innerHTML = `
                        <div class="test-result error">
                            <i class="fas fa-times-circle"></i> Teste falhou<br>
                            Tipo: ${type}<br>
                            Erro: ${result.details}
                        </div>
                    `;
                }
            } catch (error) {
                resultContainer.innerHTML = `
                    <div class="test-result error">
                        <i class="fas fa-times-circle"></i> Erro na conex√£o<br>
                        ${error.message}
                    </div>
                `;
            } finally {
                testButton.disabled = false;
                testButton.innerHTML = '<i class="fas fa-vial"></i> Testar';
            }
        }

        async function saveConfiguration() {
            updateConfigFromForm();
            
            // Update endpoints based on current count
            const endpointCount = parseInt(document.getElementById('endpointCount').value) || 5;
            for (let i = 0; i < endpointCount; i++) {
                updateEndpointConfig(i);
            }

            try {
                const response = await fetch('/api/configs', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(currentConfig)
                });

                if (response.ok) {
                    showAlert('Configura√ß√£o salva com sucesso! A aplica√ß√£o ser√° reiniciada.', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    const error = await response.json();
                    showAlert('Erro ao salvar configura√ß√£o: ' + error.error, 'danger');
                }
            } catch (error) {
                showAlert('Erro ao salvar configura√ß√£o: ' + error.message, 'danger');
            }
        }

        async function loadSelectedModels() {
            try {
                const response = await fetch('/api/ollama-api/selected-models');
                const result = await response.json();
                
                if (result.success) {
                    result.selectedModels.forEach((selectedModel, index) => {
                        if (selectedModel.model) {
                            const modelSelect = document.getElementById(`endpoint_${index}_model`);
                            if (modelSelect) {
                                // Add the saved model as an option if it doesn't exist
                                const existingOption = Array.from(modelSelect.options).find(
                                    option => option.value === selectedModel.model
                                );
                                if (!existingOption) {
                                    const option = document.createElement('option');
                                    option.value = selectedModel.model;
                                    option.textContent = selectedModel.model;
                                    option.setAttribute('data-saved', 'true');
                                    modelSelect.appendChild(option);
                                }
                                
                                // Select the saved model
                                modelSelect.value = selectedModel.model;
                                
                                // Update load model button for RKLLama
                                if (selectedModel.type === 'rkllama') {
                                    updateLoadModelButton(index);
                                }
                                
                                // Show indicator that model was loaded from database
                                const statusSpan = document.getElementById(`modelStatus_${index}`);
                                if (statusSpan) {
                                    statusSpan.innerHTML = `
                                        <i class="fas fa-database text-success"></i> 
                                        Modelo salvo carregado: ${selectedModel.model}
                                        ${selectedModel.lastSelectedAt ? 
                                            `<br><small>√öltima sele√ß√£o: ${new Date(selectedModel.lastSelectedAt).toLocaleString('pt-BR')}</small>` : 
                                            ''
                                        }
                                    `;
                                    statusSpan.className = 'text-success';
                                }
                            }
                        }
                    });
                }
            } catch (error) {
                console.error('Erro ao carregar modelos selecionados:', error);
            }
        }

        async function saveSelectedModel(index) {
            const url = document.getElementById(`endpoint_${index}_url`).value;
            const type = document.getElementById(`endpoint_${index}_type`).value;
            const model = document.getElementById(`endpoint_${index}_model`).value;
            
            if (!url.trim() || !model) {
                return; // Don't save if URL or model is empty
            }

            try {
                const response = await fetch('/api/ollama-api/save-selected-model', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        endpointIndex: index,
                        url,
                        type,
                        model
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    const statusSpan = document.getElementById(`modelStatus_${index}`);
                    if (statusSpan) {
                        statusSpan.innerHTML = `<i class="fas fa-save text-success"></i> Modelo ${model} salvo automaticamente`;
                        statusSpan.className = 'text-success';
                        
                        // Clear the message after 3 seconds
                        setTimeout(() => {
                            if (statusSpan.innerHTML.includes('salvo automaticamente')) {
                                statusSpan.innerHTML = `Modelo selecionado: ${model}`;
                                statusSpan.className = 'text-info';
                            }
                        }, 3000);
                    }
                    
                    console.log(`Modelo ${model} salvo para endpoint ${index}`);
                } else {
                    console.error('Erro ao salvar modelo:', result.error);
                }
            } catch (error) {
                console.error('Erro ao salvar modelo selecionado:', error);
            }
        }

        function showAlert(message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            const alertContainer = document.createElement('div');
            alertContainer.innerHTML = alertHtml;
            document.querySelector('.container-fluid').prepend(alertContainer.firstElementChild);
        }
    </script>