<div class="container-fluid py-4">
  <div class="row">
    <div class="col-12">
      <div class="card shadow-lg border-0">
        <div class="card-header bg-gradient-primary text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h3 class="mb-0"><i class="fas fa-cogs me-2"></i>Configurações da Aplicação</h3>
            <div class="d-flex gap-2">
              <div class="badge bg-success" id="mongoStatus">
                <i class="fas fa-database me-1"></i>MongoDB OK
              </div>
              <div class="badge bg-info" id="configStatus">
                <i class="fas fa-check-circle me-1"></i>Configurado
              </div>
            </div>
          </div>
        </div>
        <div class="card-body">
          <form action="/config" method="POST" id="configForm">
            
            <!-- Navegação por Tabs -->
            <ul class="nav nav-pills nav-justified mb-4" id="configTabs" role="tablist">
              <li class="nav-item" role="presentation">
                <button class="nav-link active fw-bold" id="general-tab" data-bs-toggle="tab" data-bs-target="#general" type="button" role="tab">
                  <i class="fas fa-server me-2"></i>
                  <div>Geral</div>
                  <small class="d-block text-muted">Servidor & BD</small>
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link fw-bold" id="llm-tab" data-bs-toggle="tab" data-bs-target="#llm" type="button" role="tab">
                  <i class="fas fa-brain me-2"></i>
                  <div>LLM & IA</div>
                  <small class="d-block text-muted">Modelos & Filas</small>
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link fw-bold" id="audio-tab" data-bs-toggle="tab" data-bs-target="#audio" type="button" role="tab">
                  <i class="fas fa-microphone me-2"></i>
                  <div>Áudio & TTS</div>
                  <small class="d-block text-muted">Whisper & Síntese</small>
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link fw-bold" id="integrations-tab" data-bs-toggle="tab" data-bs-target="#integrations" type="button" role="tab">
                  <i class="fas fa-plug me-2"></i>
                  <div>Integrações</div>
                  <small class="d-block text-muted">APIs & Serviços</small>
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link fw-bold" id="features-tab" data-bs-toggle="tab" data-bs-target="#features" type="button" role="tab">
                  <i class="fas fa-toggle-on me-2"></i>
                  <div>Features</div>
                  <small class="d-block text-muted">Recursos & Toggles</small>
                </button>
              </li>
            </ul>
            
            <div class="tab-content" id="configTabsContent">
              
              <!-- Aba Geral -->
              <div class="tab-pane fade show active" id="general" role="tabpanel">
                <div class="alert alert-info mb-4">
                  <div class="d-flex justify-content-between align-items-center">
                    <div>
                      <i class="fas fa-info-circle me-2"></i>
                      <strong>Configurações Gerais:</strong> Defina as configurações básicas do servidor, banco de dados e sistema de agendamento.
                    </div>
                    <div class="progress" style="width: 150px; height: 20px;">
                      <div class="progress-bar bg-success" id="generalProgress" role="progressbar" style="width: 100%">
                        <small>100%</small>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="col-md-6">
                    <div class="card border-primary mb-4">
                      <div class="card-header bg-primary text-white">
                        <div class="d-flex justify-content-between align-items-center">
                          <h5 class="mb-0"><i class="fas fa-database me-2"></i>MongoDB</h5>
                          <span class="badge bg-light text-dark" id="mongoConfigStatus">
                            <i class="fas fa-check-circle me-1"></i>Configurado
                          </span>
                        </div>
                      </div>
                      <div class="card-body">
                        <!-- Botões de exportação/importação -->
                        <div class="mb-3 d-flex gap-2 flex-wrap">
                          <form action="/api/config/export" method="GET" style="display:inline;">
                            <button type="submit" class="btn btn-outline-primary btn-sm">
                              <i class="fas fa-download me-1"></i>Exportar
                            </button>
                          </form>
                          <form id="configImportForm" action="/api/config/import" method="POST" enctype="multipart/form-data" style="display:inline;">
                            <input type="file" name="configFile" accept="application/json" style="display:none;" onchange="document.getElementById('configImportForm').submit();">
                            <button type="button" class="btn btn-outline-success btn-sm" onclick="document.querySelector('#configImportForm input[type=file]').click();">
                              <i class="fas fa-upload me-1"></i>Importar
                            </button>
                          </form>
                          <button type="button" class="btn btn-outline-info btn-sm" onclick="testMongoConnection()">
                            <i class="fas fa-plug me-1"></i>Testar Conexão
                          </button>
                        </div>
                    <% 
                    const generalKeys = ['MONGO_URI', 'MONGO_DB_NAME', 'MONGO_COLLECTION_NAME'];
                    generalKeys.forEach(key => { 
                      if(env[key] !== undefined) {
                    %>
                      <div class="mb-3">
                        <label class="form-label fw-bold"><%= key.replace('MONGO_', '').replace('_', ' ') %></label>
                        <input type="text" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                        <% if (descriptions[key]) { %>
                          <small class="form-text text-muted"><%= descriptions[key] %></small>
                        <% } %>
                      </div>
                    <% }}); %>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-6">
                    <div class="card border-success mb-4">
                      <div class="card-header bg-success text-white">
                        <div class="d-flex justify-content-between align-items-center">
                          <h5 class="mb-0"><i class="fas fa-server me-2"></i>Servidor</h5>
                          <span class="badge bg-light text-dark" id="serverConfigStatus">
                            <i class="fas fa-check-circle me-1"></i>Ativo
                          </span>
                        </div>
                      </div>
                      <div class="card-body">
                    <% 
                    const serverKeys = ['PORT', 'DEBUG_ENABLED', 'DEBUG_VERBOSE', 'LOG_LEVEL'];
                    serverKeys.forEach(key => { 
                      if(env[key] !== undefined) {
                    %>
                      <div class="mb-3">
                        <label class="form-label fw-bold"><%= key.replace('DEBUG_', '').replace('_', ' ') %></label>
                        <% if (key.includes('ENABLED') || key.includes('VERBOSE')) { %>
                          <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" name="<%= key %>" id="<%= key %>" <%= (env[key] === 'true' || env[key] === true || env[key] === '1' || env[key] === 1) ? 'checked' : '' %>>
                            <label class="form-check-label fw-bold" for="<%= key %>"><%= key.replace('DEBUG_', '').replace('_', ' ') %></label>
                          </div>
                        <% } else { %>
                          <input type="text" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                        <% } %>
                        <% if (descriptions[key]) { %>
                          <small class="form-text text-muted"><%= descriptions[key] %></small>
                        <% } %>
                      </div>
                    <% }}); %>
                      </div>
                    </div>
                  </div>
                </div>
                
                <hr class="my-4">
                
                <div class="row">
                  <div class="col-md-6">
                    <div class="card border-warning mb-4">
                      <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0"><i class="fas fa-clock me-2"></i>Agendador</h5>
                      </div>
                      <div class="card-body">
                    <% 
                    const schedKeys = ['SCHED_INTERVAL', 'SCHED_MAX_ATTEMPTS', 'SCHED_RETRY_DELAY', 'SCHED_CONCURRENCY'];
                    schedKeys.forEach(key => { 
                      if(env[key] !== undefined) {
                    %>
                      <div class="mb-3">
                        <label class="form-label fw-bold"><%= key.replace('SCHED_', '').replace('_', ' ') %></label>
                        <input type="number" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                        <% if (descriptions[key]) { %>
                          <small class="form-text text-muted"><%= descriptions[key] %></small>
                        <% } %>
                      </div>
                    <% }}); %>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-6">
                    <div class="card border-info mb-4">
                      <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="fas fa-tachometer-alt me-2"></i>Concorrência Dinâmica</h5>
                      </div>
                      <div class="card-body">
                    <% 
                    const dynamicKeys = ['DYNAMIC_CONCURRENCY', 'SCHED_DYNAMIC_MIN', 'SCHED_DYNAMIC_MAX', 'SCHED_CPU_THRESHOLD', 'SCHED_MEM_THRESHOLD'];
                    dynamicKeys.forEach(key => { 
                      if(env[key] !== undefined) {
                    %>
                      <div class="mb-3">
                        <label class="form-label fw-bold"><%= key.replace('SCHED_', '').replace('DYNAMIC_', '').replace('_', ' ') %></label>
                        <% if (key.includes('CONCURRENCY') && !key.includes('MIN') && !key.includes('MAX')) { %>
                          <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" name="<%= key %>" id="<%= key %>" <%= (env[key] === 'true' || env[key] === true || env[key] === '1' || env[key] === 1) ? 'checked' : '' %>>
                            <label class="form-check-label fw-bold" for="<%= key %>"><%= key.replace('SCHED_', '').replace('DYNAMIC_', '').replace('_', ' ') %></label>
                          </div>
                        <% } else { %>
                          <input type="number" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>" step="<%= key.includes('THRESHOLD') ? '0.1' : '1' %>">
                        <% } %>
                        <% if (descriptions[key]) { %>
                          <small class="form-text text-muted"><%= descriptions[key] %></small>
                        <% } %>
                      </div>
                    <% }}); %>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Aba LLM & IA -->
              <div class="tab-pane fade" id="llm" role="tabpanel">
                <div class="row">
                  <div class="col-md-6">
                    <h5 class="text-primary mb-3"><i class="fas fa-robot me-2"></i>Modelos LLM</h5>
                    
                    <div class="mb-3">
                      <label class="form-label fw-bold">Modelo Principal</label>
                      <% if (availableModels && availableModels.length > 0) { %>
                        <select class="form-select" name="LLM_MODEL">
                          <% availableModels.forEach(model => { %>
                            <option value="<%= model %>" <%= env['LLM_MODEL'] === model ? 'selected' : '' %>><%= model %></option>
                          <% }); %>
                        </select>
                        <small class="form-text text-success"><i class="fas fa-check-circle me-1"></i>Modelos carregados do Ollama</small>
                      <% } else { %>
                        <input type="text" class="form-control" name="LLM_MODEL" value="<%= env['LLM_MODEL'] %>" placeholder="<%= examples['LLM_MODEL'] %>">
                        <small class="form-text text-warning"><i class="fas fa-exclamation-triangle me-1"></i>Não foi possível conectar ao Ollama</small>
                      <% } %>
                    </div>
                    
                    <div class="mb-3">
                      <label class="form-label fw-bold">Modelo para Imagens</label>
                      <% if (availableModels && availableModels.length > 0) { %>
                        <select class="form-select" name="LLM_IMAGE_MODEL">
                          <% availableModels.filter(m => m.includes('llava') || m.includes('vision')).forEach(model => { %>
                            <option value="<%= model %>" <%= env['LLM_IMAGE_MODEL'] === model ? 'selected' : '' %>><%= model %></option>
                          <% }); %>
                          <% if (!availableModels.some(m => m.includes('llava') || m.includes('vision'))) { %>
                            <option value="<%= env['LLM_IMAGE_MODEL'] %>" selected><%= env['LLM_IMAGE_MODEL'] %> (não encontrado)</option>
                          <% } %>
                        </select>
                      <% } else { %>
                        <input type="text" class="form-control" name="LLM_IMAGE_MODEL" value="<%= env['LLM_IMAGE_MODEL'] %>" placeholder="<%= examples['LLM_IMAGE_MODEL'] %>">
                      <% } %>
                    </div>
                    
                    <% 
                    const llmKeys = ['LLM_MAX_TOKENS', 'OLLAMA_HOST', 'OLLAMA_TIMEOUT_MS'];
                    llmKeys.forEach(key => { 
                    %>
                      <div class="mb-3">
                        <label class="form-label fw-bold"><%= key.replace('LLM_', '').replace('OLLAMA_', '').replace('_', ' ') %></label>
                        <input type="<%= key.includes('TOKENS') || key.includes('TIMEOUT') ? 'number' : 'text' %>" class="form-control" name="<%= key %>" value="<%= env[key] || examples[key] || '' %>" placeholder="<%= examples[key] %>">
                        <% if (descriptions[key]) { %>
                          <small class="form-text text-muted"><%= descriptions[key] %></small>
                        <% } %>
                      </div>
                    <% }); %>
                  </div>
                  
                  <div class="col-md-6">
                    <h5 class="text-primary mb-3"><i class="fas fa-layer-group me-2"></i>Filas de Processamento</h5>
                    <% 
                    const queueKeys = ['LLM_CONCURRENCY', 'WHISPER_CONCURRENCY', 'QUEUE_MEM_THRESHOLD_GB', 'MEM_CHECK_INTERVAL'];
                    queueKeys.forEach(key => { 
                      if(env[key] !== undefined) {
                    %>
                      <div class="mb-3">
                        <label class="form-label fw-bold"><%= key.replace('QUEUE_', '').replace('_', ' ') %></label>
                        <input type="number" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                        <% if (descriptions[key]) { %>
                          <small class="form-text text-muted"><%= descriptions[key] %></small>
                        <% } %>
                      </div>
                    <% }}); %>
                  </div>
                </div>
              </div>
              
              <!-- Aba Áudio & TTS -->
              <div class="tab-pane fade" id="audio" role="tabpanel">
                <div class="row">
                  <div class="col-md-6">
                    <h5 class="text-primary mb-3"><i class="fas fa-microphone me-2"></i>Whisper (Transcrição)</h5>
                    
                    <div class="mb-3">
                      <label class="form-label fw-bold">Modelo Whisper</label>
                      <% if (whisperModels && whisperModels.length > 0) { %>
                        <select class="form-select" name="WHISPER_MODEL">
                          <% whisperModels.forEach(model => { %>
                            <option value="<%= model %>" <%= env['WHISPER_MODEL'] === model ? 'selected' : '' %>><%= model %></option>
                          <% }); %>
                        </select>
                      <% } else { %>
                        <input type="text" class="form-control" name="WHISPER_MODEL" value="<%= env['WHISPER_MODEL'] %>" placeholder="<%= examples['WHISPER_MODEL'] %>">
                      <% } %>
                    </div>
                    
                    <% 
                    const audioKeys = ['AUDIO_SAMPLE_RATE', 'AUDIO_LANGUAGE', 'WHISPER_TIMEOUT_MS'];
                    audioKeys.forEach(key => { 
                      if(env[key] !== undefined) {
                    %>
                      <div class="mb-3">
                        <label class="form-label fw-bold"><%= key.replace('AUDIO_', '').replace('WHISPER_', '').replace('_', ' ') %></label>
                        <input type="<%= key.includes('RATE') || key.includes('TIMEOUT') ? 'number' : 'text' %>" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                        <% if (descriptions[key]) { %>
                          <small class="form-text text-muted"><%= descriptions[key] %></small>
                        <% } %>
                      </div>
                    <% }}); %>
                  </div>
                  
                  <div class="col-md-6">
                    <h5 class="text-primary mb-3"><i class="fas fa-volume-up me-2"></i>Text-to-Speech</h5>
                    
                    <!-- Piper TTS -->
                    <div class="card mb-3">
                      <div class="card-header">
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" name="PIPER_ENABLED" id="PIPER_ENABLED" <%= (env['PIPER_ENABLED'] === 'true' || env['PIPER_ENABLED'] === true || env['PIPER_ENABLED'] === '1' || env['PIPER_ENABLED'] === 1) ? 'checked' : '' %>>
                          <label class="form-check-label fw-bold" for="PIPER_ENABLED">Piper TTS (Local)</label>
                        </div>
                      </div>
                      <div class="card-body" id="piperSettings">
                        <% 
                        const piperKeys = ['PIPER_EXECUTABLE', 'PIPER_MODEL'];
                        piperKeys.forEach(key => { 
                          if(env[key] !== undefined) {
                        %>
                          <div class="mb-3">
                            <label class="form-label"><%= key.replace('PIPER_', '').replace('_', ' ') %></label>
                            <input type="text" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                            <% if (descriptions[key]) { %>
                              <small class="form-text text-muted"><%= descriptions[key] %></small>
                            <% } %>
                          </div>
                        <% }}); %>
                      </div>
                    </div>
                    
                    <!-- ElevenLabs TTS -->
                    <div class="card">
                      <div class="card-header">
                        <h6 class="mb-0">ElevenLabs TTS (Nuvem)</h6>
                      </div>
                      <div class="card-body">
                        <% 
                        const elevenKeys = ['ELEVENLABS_API_KEY', 'ELEVENLABS_VOICE_ID', 'ELEVENLABS_MODEL_ID', 'ELEVENLABS_STABILITY', 'ELEVENLABS_SIMILARITY'];
                        elevenKeys.forEach(key => { 
                        %>
                          <div class="mb-3">
                            <label class="form-label"><%= key.replace('ELEVENLABS_', '').replace('_', ' ') %></label>
                            <input type="<%= key.includes('KEY') ? 'password' : key.includes('STABILITY') || key.includes('SIMILARITY') ? 'number' : 'text' %>" class="form-control" name="<%= key %>" value="<%= env[key] || '' %>" placeholder="<%= examples[key] %>" <%= key.includes('STABILITY') || key.includes('SIMILARITY') ? 'step=\"0.01\" min=\"0\" max=\"1\"' : '' %>>
                            <% if (descriptions[key]) { %>
                              <small class="form-text text-muted"><%= descriptions[key] %></small>
                            <% } %>
                          </div>
                        <% }); %>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Aba Integrações -->
              <div class="tab-pane fade" id="integrations" role="tabpanel">
                <div class="row">
                  <div class="col-md-6">
                    <h5 class="text-primary mb-3"><i class="fab fa-telegram me-2"></i>Telegram</h5>
                    
                    <div class="mb-3">
                      <label class="form-label fw-bold">Bot Token</label>
                      <input type="password" class="form-control" name="TELEGRAM_BOT_TOKEN" value="<%= env['TELEGRAM_BOT_TOKEN'] %>" placeholder="<%= examples['TELEGRAM_BOT_TOKEN'] %>">
                      <small class="form-text text-muted">Token do bot do Telegram</small>
                    </div>
                    
                    <div class="mb-3">
                      <label class="form-label fw-bold">Webhook URL</label>
                      <input type="url" class="form-control" name="TELEGRAM_WEBHOOK_URL" value="<%= env['TELEGRAM_WEBHOOK_URL'] %>" placeholder="<%= examples['TELEGRAM_WEBHOOK_URL'] %>">
                    </div>
                    
                    <div class="mb-3">
                      <label class="form-label fw-bold">Tamanho Máximo de Arquivo (bytes)</label>
                      <input type="number" class="form-control" name="TELEGRAM_MAX_FILE_SIZE" value="<%= env['TELEGRAM_MAX_FILE_SIZE'] %>" placeholder="<%= examples['TELEGRAM_MAX_FILE_SIZE'] %>">
                    </div>
                    
                    <div class="form-check form-switch mb-3">
                      <input class="form-check-input" type="checkbox" name="TELEGRAM_ENABLE_TTS" id="TELEGRAM_ENABLE_TTS" <%= (env['TELEGRAM_ENABLE_TTS'] === 'true' || env['TELEGRAM_ENABLE_TTS'] === true || env['TELEGRAM_ENABLE_TTS'] === '1' || env['TELEGRAM_ENABLE_TTS'] === 1) ? 'checked' : '' %>>
                      <label class="form-check-label fw-bold" for="TELEGRAM_ENABLE_TTS">Habilitar TTS</label>
                    </div>
                  </div>
                  
                  <div class="col-md-6">
                    <h5 class="text-primary mb-3"><i class="fab fa-google me-2"></i>APIs Externas</h5>
                    
                    <!-- Google OAuth -->
                    <div class="card mb-3">
                      <div class="card-header"><h6 class="mb-0">Google OAuth</h6></div>
                      <div class="card-body">
                        <% 
                        const googleKeys = ['GOOGLE_CLIENT_ID', 'GOOGLE_CLIENT_SECRET', 'GOOGLE_REDIRECT'];
                        googleKeys.forEach(key => { 
                          if(env[key] !== undefined) {
                        %>
                          <div class="mb-3">
                            <label class="form-label"><%= key.replace('GOOGLE_', '').replace('_', ' ') %></label>
                            <input type="<%= key.includes('SECRET') ? 'password' : 'text' %>" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                          </div>
                        <% }}); %>
                      </div>
                    </div>
                    
                    <!-- API de Calorias -->
                    <div class="card mb-3">
                      <div class="card-header"><h6 class="mb-0">API de Calorias</h6></div>
                      <div class="card-body">
                        <% 
                        const calorieKeys = ['CALORIE_API_URL', 'CALORIE_API_KEY'];
                        calorieKeys.forEach(key => { 
                          if(env[key] !== undefined) {
                        %>
                          <div class="mb-3">
                            <label class="form-label"><%= key.replace('CALORIE_API_', '').replace('_', ' ') %></label>
                            <input type="<%= key.includes('KEY') ? 'password' : 'text' %>" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                          </div>
                        <% }}); %>
                      </div>
                    </div>
                    
                    <!-- LinkedIn -->
                    <div class="card">
                      <div class="card-header"><h6 class="mb-0">LinkedIn</h6></div>
                      <div class="card-body">
                        <% 
                        const linkedinKeys = ['LINKEDIN_USER', 'LINKEDIN_PASS', 'LINKEDIN_LI_AT', 'LINKEDIN_TIMEOUT_MS'];
                        linkedinKeys.forEach(key => { 
                          if(env[key] !== undefined) {
                        %>
                          <div class="mb-3">
                            <label class="form-label"><%= key.replace('LINKEDIN_', '').replace('_', ' ') %></label>
                            <input type="<%= key.includes('PASS') || key.includes('LI_AT') ? 'password' : key.includes('TIMEOUT') ? 'number' : 'text' %>" class="form-control" name="<%= key %>" value="<%= env[key] %>" placeholder="<%= examples[key] %>">
                          </div>
                        <% }}); %>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Aba Features -->
              <div class="tab-pane fade" id="features" role="tabpanel">
                <div class="row">
                  <div class="col-12">
                    <div class="card">
                      <div class="card-header">
                        <div class="form-check form-switch">
                          <input class="form-check-input" type="checkbox" name="FEATURE_TOGGLES_ENABLED" id="FEATURE_TOGGLES_ENABLED" <%= (env['FEATURE_TOGGLES_ENABLED'] === 'true' || env['FEATURE_TOGGLES_ENABLED'] === true || env['FEATURE_TOGGLES_ENABLED'] === '1' || env['FEATURE_TOGGLES_ENABLED'] === 1) ? 'checked' : '' %>>
                          <label class="form-check-label fw-bold" for="FEATURE_TOGGLES_ENABLED"><i class="fas fa-toggle-on me-2"></i>Sistema de Feature Toggles</label>
                        </div>
                        <small class="text-muted">Controla se o sistema de feature toggles está ativo</small>
                      </div>
                      <div class="card-body" id="featureTogglesContent">
                        <% if (featureToggles && featureToggles.enabled) { %>
                          <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Feature Toggles Globais:</strong> Essas configurações afetam o comportamento global das features, independentemente das configurações de usuário individual.
                          </div>
                          
                          <div class="mb-3">
                            <label class="form-label fw-bold">Configuração JSON</label>
                            <textarea class="form-control" name="FEATURE_TOGGLES_FEATURES" placeholder="<%= examples['featureToggles.features'] %>" rows="4"><%= env['FEATURE_TOGGLES_FEATURES'] || JSON.stringify(featureToggles.features || {}, null, 2) %></textarea>
                            <small class="form-text text-muted">JSON com features toggles globais. Ex: {"feature1": true, "feature2": false}</small>
                          </div>
                          
                          <% if (globalFeatures && Object.keys(globalFeatures).length > 0) { %>
                            <hr>
                            <h6>Features Atuais:</h6>
                            <div class="row">
                              <% Object.entries(globalFeatures).forEach(([featureName, isEnabled]) => { %>
                                <div class="col-md-4 mb-2">
                                  <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" name="global_feature_<%= featureName %>" id="global_feature_<%= featureName %>" <%= (isEnabled === 'true' || isEnabled === true || isEnabled === '1' || isEnabled === 1) ? 'checked' : '' %>>
                                    <label class="form-check-label fw-bold" for="global_feature_<%= featureName %>"><%= featureName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) %></label>
                                  </div>
                                </div>
                              <% }); %>
                            </div>
                          <% } %>
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div class="row mt-4">
                  <div class="col-12">
                    <div class="card">
                      <div class="card-header">
                        <h5 class="mb-0"><i class="fab fa-telegram me-2"></i>Features do Telegram</h5>
                      </div>
                      <div class="card-body">
                        <div class="row">
                          <% 
                          const telegramFeatures = [
                            'TELEGRAM_FEATURE_AI_CHAT',
                            'TELEGRAM_FEATURE_SCHEDULER', 
                            'TELEGRAM_FEATURE_AUDIO_TRANSCRIPTION',
                            'TELEGRAM_FEATURE_IMAGE_ANALYSIS',
                            'TELEGRAM_FEATURE_VIDEO_SUMMARY',
                            'TELEGRAM_FEATURE_TEXT_SUMMARY',
                            'TELEGRAM_FEATURE_TTS',
                            'TELEGRAM_FEATURE_CALORIE_COUNTER',
                            'TELEGRAM_FEATURE_LINKEDIN_ANALYSIS',
                            'TELEGRAM_FEATURE_MEDIA_PROCESSING',
                            'TELEGRAM_FEATURE_PROFESSIONAL_ANALYSIS',
                            'TELEGRAM_FEATURE_SYSTEM_RESOURCES',
                            'TELEGRAM_FEATURE_MODEL_MANAGEMENT',
                            'TELEGRAM_FEATURE_WHISPER_MODEL_MANAGEMENT',
                            'TELEGRAM_FEATURE_SERVICE_MANAGEMENT',
                            'TELEGRAM_FEATURE_CALENDAR_IMPORT',
                            'TELEGRAM_FEATURE_DUAL_VIDEO_SUMMARY',
                            'TELEGRAM_FEATURE_VOICE_RESPONSE_TOGGLE',
                            'TELEGRAM_FEATURE_ADVANCED_FILE_PROCESSING'
                          ];
                          telegramFeatures.forEach((key, index) => { 
                            if(env[key] !== undefined) {
                          %>
                            <div class="col-md-4 mb-3">
                              <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" name="<%= key %>" id="<%= key %>" <%= (env[key] === 'true' || env[key] === true || env[key] === '1' || env[key] === 1) ? 'checked' : '' %>>
                                <label class="form-check-label fw-bold" for="<%= key %>"><%= descriptions[key] || key.replace('TELEGRAM_FEATURE_', '').replace('_', ' ') %></label>
                              </div>
                              <% if (descriptions[key]) { %>
                                <small class="form-text text-muted"><%= descriptions[key] %></small>
                              <% } %>
                            </div>
                          <% }}); %>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
            </div>
            
            <!-- Botões de Ação -->
            <div class="d-flex justify-content-between align-items-center mt-4 pt-3 border-top">
              <div>
                <button type="button" class="btn btn-outline-secondary" onclick="resetForm()">
                  <i class="fas fa-undo me-1"></i> Resetar
                </button>
                <button type="button" class="btn btn-outline-info" onclick="validateConfig()">
                  <i class="fas fa-check-circle me-1"></i> Validar
                </button>
              </div>
              <div>
                <button type="submit" class="btn btn-success btn-lg" id="saveButton">
                  <span id="saveButtonText">
                    <i class="fas fa-save me-2"></i> Salvar Configurações
                  </span>
                  <span id="saveButtonLoading" style="display: none;">
                    <span class="spinner-border spinner-border-sm me-2"></span> Salvando...
                  </span>
                </button>
              </div>
            </div>
            
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<% if (typeof window !== 'undefined') { %>
  <script>
    // Não executa no server-side
  </script>
<% } %>
<script>
  // Função para obter parâmetros da query string
  function getQueryParam(name) {
    const url = new URL(window.location.href);
    return url.searchParams.get(name);
  }
  // Exibir alertas de sucesso/erro
  window.addEventListener('DOMContentLoaded', function() {
    const success = getQueryParam('success');
    const error = getQueryParam('error');
    if (success) {
      const alert = document.createElement('div');
      alert.className = 'alert alert-success alert-dismissible fade show';
      alert.role = 'alert';
      alert.innerHTML = '<i class="fas fa-check-circle me-2"></i>Configuração salva com sucesso! Recarregando...';
      document.body.prepend(alert);
      setTimeout(() => { alert.remove(); }, 4000);
      // Limpar query string após mostrar
      window.history.replaceState({}, document.title, window.location.pathname);
    }
    if (error) {
      const alert = document.createElement('div');
      alert.className = 'alert alert-danger alert-dismissible fade show';
      alert.role = 'alert';
      alert.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i>' + decodeURIComponent(error);
      document.body.prepend(alert);
      setTimeout(() => { alert.remove(); }, 6000);
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  });
  // Após importar, recarregar a página para garantir atualização
  if (getQueryParam('success')) {
    setTimeout(() => { window.location.reload(); }, 2500);
  }
  // Após exportar, mostrar feedback (não é possível saber via redirect, mas pode-se mostrar um toast opcional)


function resetForm() {
  if (confirm('Tem certeza que deseja resetar todas as configurações?')) {
    document.getElementById('configForm').reset();
  }
}

function validateConfig() {
  let errors = [];
  let warnings = [];
  
  // Validar URL do MongoDB
  const mongoUri = document.querySelector('input[name="MONGO_URI"]').value;
  if (mongoUri && !mongoUri.startsWith('mongodb://') && !mongoUri.startsWith('mongodb+srv://')) {
    errors.push('URI do MongoDB deve começar com mongodb:// ou mongodb+srv://');
  }
  
  // Validar URL do Ollama
  const ollamaHost = document.querySelector('input[name="OLLAMA_HOST"]').value;
  if (ollamaHost && !ollamaHost.startsWith('http')) {
    errors.push('URL do Ollama deve começar com http:// ou https://');
  }
  
  // Validar token do Telegram
  const telegramToken = document.querySelector('input[name="TELEGRAM_BOT_TOKEN"]').value;
  if (telegramToken && !telegramToken.match(/^\d+:[A-Za-z0-9_-]+$/)) {
    errors.push('Token do Telegram deve ter o formato: número:string');
  }
  
  // Validar Webhook URL do Telegram
  const webhookUrl = document.querySelector('input[name="TELEGRAM_WEBHOOK_URL"]').value;
  if (webhookUrl && !webhookUrl.startsWith('https://')) {
    warnings.push('Webhook URL do Telegram deve usar HTTPS em produção');
  }
  
  // Validar porta do servidor
  const port = document.querySelector('input[name="PORT"]').value;
  if (port && (parseInt(port) < 1 || parseInt(port) > 65535)) {
    errors.push('Porta deve estar entre 1 e 65535');
  }
  
  // Validar JSON de feature toggles
  const featureTogglesJson = document.querySelector('textarea[name="FEATURE_TOGGLES_FEATURES"]');
  if (featureTogglesJson && featureTogglesJson.value) {
    try {
      JSON.parse(featureTogglesJson.value);
    } catch (e) {
      errors.push('JSON de feature toggles inválido: ' + e.message);
    }
  }
  
  // Validar configurações do ElevenLabs
  const elevenKey = document.querySelector('input[name="ELEVENLABS_API_KEY"]').value;
  const elevenStability = document.querySelector('input[name="ELEVENLABS_STABILITY"]').value;
  const elevenSimilarity = document.querySelector('input[name="ELEVENLABS_SIMILARITY"]').value;
  
  if (elevenStability && (parseFloat(elevenStability) < 0 || parseFloat(elevenStability) > 1)) {
    errors.push('Estabilidade do ElevenLabs deve estar entre 0 e 1');
  }
  if (elevenSimilarity && (parseFloat(elevenSimilarity) < 0 || parseFloat(elevenSimilarity) > 1)) {
    errors.push('Similaridade do ElevenLabs deve estar entre 0 e 1');
  }
  
  // Mostrar resultados da validação
  if (errors.length > 0 || warnings.length > 0) {
    let message = '';
    if (errors.length > 0) {
      message += '❌ Erros encontrados:\n' + errors.join('\n');
    }
    if (warnings.length > 0) {
      message += (errors.length > 0 ? '\n\n' : '') + '⚠️ Avisos:\n' + warnings.join('\n');
    }
    
    // Criar modal de validação
    showValidationModal(errors, warnings);
  } else {
    showSuccessToast('✅ Configuração válida!');
  }
}

function showValidationModal(errors, warnings) {
  const modal = document.createElement('div');
  modal.className = 'modal fade';
  modal.innerHTML = `
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header ${errors.length > 0 ? 'bg-danger text-white' : 'bg-warning text-dark'}">
          <h5 class="modal-title">
            <i class="fas fa-${errors.length > 0 ? 'exclamation-triangle' : 'exclamation-circle'} me-2"></i>
            Resultado da Validação
          </h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          ${errors.length > 0 ? `
            <div class="alert alert-danger">
              <h6><i class="fas fa-times-circle me-2"></i>Erros encontrados:</h6>
              <ul class="mb-0">
                ${errors.map(error => `<li>${error}</li>`).join('')}
              </ul>
            </div>
          ` : ''}
          ${warnings.length > 0 ? `
            <div class="alert alert-warning">
              <h6><i class="fas fa-exclamation-triangle me-2"></i>Avisos:</h6>
              <ul class="mb-0">
                ${warnings.map(warning => `<li>${warning}</li>`).join('')}
              </ul>
            </div>
          ` : ''}
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
        </div>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  const bsModal = new bootstrap.Modal(modal);
  bsModal.show();
  
  modal.addEventListener('hidden.bs.modal', () => {
    document.body.removeChild(modal);
  });
}

function showSuccessToast(message) {
  const toast = document.createElement('div');
  toast.className = 'toast position-fixed top-0 end-0 m-3';
  toast.style.zIndex = '9999';
  toast.innerHTML = `
    <div class="toast-header bg-success text-white">
      <i class="fas fa-check-circle me-2"></i>
      <strong class="me-auto">Sucesso</strong>
      <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
    </div>
    <div class="toast-body">
      ${message}
    </div>
  `;
  
  document.body.appendChild(toast);
  const bsToast = new bootstrap.Toast(toast);
  bsToast.show();
  
  toast.addEventListener('hidden.bs.toast', () => {
    document.body.removeChild(toast);
  });
}

function showErrorToast(message) {
  const toast = document.createElement('div');
  toast.className = 'toast position-fixed top-0 end-0 m-3';
  toast.style.zIndex = '9999';
  toast.innerHTML = `
    <div class="toast-header bg-danger text-white">
      <i class="fas fa-exclamation-triangle me-2"></i>
      <strong class="me-auto">Erro</strong>
      <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
    </div>
    <div class="toast-body">
      ${message}
    </div>
  `;
  
  document.body.appendChild(toast);
  const bsToast = new bootstrap.Toast(toast, {delay: 8000}); // 8 seconds for errors
  bsToast.show();
  
  toast.addEventListener('hidden.bs.toast', () => {
    document.body.removeChild(toast);
  });
}

function toggleCheckbox(id) {
  const checkbox = document.getElementById(id);
  const label = document.querySelector(`label[for="${id}"]`);
  
  if (!checkbox || !label) {
    console.error(`Checkbox or label not found for ID: ${id}`);
    return;
  }
  
  // Toggle checkbox state
  checkbox.checked = !checkbox.checked;
  checkbox.value = checkbox.checked ? 'true' : 'false';
  
  // Update label visual state
  if (checkbox.checked) {
    label.classList.remove('label-off');
    label.classList.add('label-on');
  } else {
    label.classList.remove('label-on');
    label.classList.add('label-off');
  }
  
  // Update label text to show current state
  const dataText = label.getAttribute('data-text') || '';
  const statusText = checkbox.checked ? 'Ativado' : 'Desativado';
  
  if (dataText) {
    label.textContent = `${dataText} - ${statusText}`;
  } else {
    label.textContent = statusText;
  }
  
  // Handle special cases like Piper TTS
  if (id === 'PIPER_ENABLED') {
    togglePiperSettings();
  }
  
  if (id === 'FEATURE_TOGGLES_ENABLED') {
    toggleFeatureToggles();
  }
  
  console.log(`Toggled ${id}: ${checkbox.checked}`);
}

function togglePiperSettings() {
  const piperEnabled = document.getElementById('PIPER_ENABLED');
  const piperSettings = document.getElementById('piperSettings');
  
  if (piperEnabled && piperSettings) {
    if (piperEnabled.checked) {
      piperSettings.style.display = 'block';
    } else {
      piperSettings.style.display = 'none';
    }
  }
}

function toggleFeatureToggles() {
  const featureTogglesEnabled = document.getElementById('FEATURE_TOGGLES_ENABLED');
  const featureTogglesContent = document.getElementById('featureTogglesContent');
  
  if (featureTogglesEnabled && featureTogglesContent) {
    if (featureTogglesEnabled.checked) {
      featureTogglesContent.style.display = 'block';
    } else {
      featureTogglesContent.style.display = 'none';
    }
  }
}

async function testMongoConnection() {
  const mongoUri = document.querySelector('input[name="MONGO_URI"]').value;
  const dbName = document.querySelector('input[name="MONGO_DB_NAME"]').value;
  
  if (!mongoUri) {
    showErrorToast('Por favor, configure a URI do MongoDB primeiro');
    return;
  }
  
  // Simular teste de conexão (você pode implementar um endpoint real para isso)
  showSuccessToast('🔗 Testando conexão MongoDB...');
  
  // Aqui você pode fazer uma chamada real para um endpoint de teste
  // Por enquanto, vamos simular um teste básico de formato
  try {
    const url = new URL(mongoUri.replace('mongodb://', 'http://').replace('mongodb+srv://', 'https://'));
    showSuccessToast('✅ Formato da URI MongoDB parece válido');
  } catch (e) {
    showErrorToast('❌ Formato da URI MongoDB inválido');
  }
}

function setLoadingState(isLoading) {
  const saveButton = document.getElementById('saveButton');
  const saveButtonText = document.getElementById('saveButtonText');
  const saveButtonLoading = document.getElementById('saveButtonLoading');
  
  if (isLoading) {
    saveButton.disabled = true;
    saveButtonText.style.display = 'none';
    saveButtonLoading.style.display = 'inline';
  } else {
    saveButton.disabled = false;
    saveButtonText.style.display = 'inline';
    saveButtonLoading.style.display = 'none';
  }
}

function handleSubmit(event) {
  event.preventDefault();
  console.log('📝 Formulário sendo enviado via handleSubmit...');
  
  const form = document.getElementById('configForm');
  if (form) {
    setLoadingState(true);
    
    // Primeiro, sincroniza todos os toggle labels com seus checkboxes ocultos
    syncToggleStates();
    
    const formData = new FormData(form);
    
    // Garante que todos os checkboxes sejam enviados com valor correto
    form.querySelectorAll('input[type=checkbox]').forEach(cb => {
      // Remove o valor existente se houver
      formData.delete(cb.name);
      // Adiciona o valor correto baseado no estado do checkbox
      formData.append(cb.name, cb.checked ? 'true' : 'false');
      console.log(`Checkbox ${cb.name}: ${cb.checked}`);
    });
    
    console.log('📋 Dados do formulário:', Object.fromEntries(formData));
    
    fetch('/config', {
      method: 'POST',
      body: formData
    })
    .then(response => {
      console.log('📡 Resposta do servidor:', response.status, response.statusText);
      setLoadingState(false);
      
      if (response.ok) {
        showSuccessToast('✅ Configurações salvas com sucesso!');
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        return response.text().then(text => {
          throw new Error(`Server error: ${response.status} - ${text}`);
        });
      }
    })
    .catch(error => {
      console.error('❌ Erro no salvamento:', error);
      setLoadingState(false);
      showErrorToast('Erro ao salvar configurações: ' + error.message);
    });
  } else {
    console.error('❌ Formulário não encontrado!');
  }
}

function syncToggleStates() {
  // Sincroniza todos os toggle labels com seus checkboxes ocultos
  document.querySelectorAll('.toggle-label').forEach(label => {
    const checkboxId = label.getAttribute('for');
    const checkbox = document.getElementById(checkboxId);
    
    if (checkbox && checkbox.type === 'checkbox') {
      const isOn = label.classList.contains('label-on');
      checkbox.checked = isOn;
      checkbox.value = isOn ? 'true' : 'false';
      console.log(`Synced ${checkboxId}: ${checkbox.checked}`);
    }
  });
}

function testSave() {
  console.log('🧪 Testando salvamento...');
  const form = document.getElementById('configForm');
  if (form) {
    const formData = new FormData(form);
    
    // Garante que todos os checkboxes sejam enviados com valor correto
    form.querySelectorAll('input[type=checkbox]').forEach(cb => {
      // Remove o valor existente se houver
      formData.delete(cb.name);
      // Adiciona o valor correto baseado no estado do checkbox
      formData.append(cb.name, cb.checked ? 'true' : 'false');
    });
    
    console.log('📋 Dados do formulário:', Object.fromEntries(formData));
    
    // Teste manual do POST
    fetch('/config', {
      method: 'POST',
      body: formData
    })
    .then(response => {
      console.log('📡 Resposta do servidor:', response.status, response.statusText);
      if (response.redirected) {
        console.log('🔄 Redirecionando para:', response.url);
        window.location.href = response.url;
      }
    })
    .catch(error => {
      console.error('❌ Erro no teste:', error);
    });
  }
}

// Verificar status das configurações
function updateConfigStatus() {
  // Verificar MongoDB
  const mongoUri = document.querySelector('input[name="MONGO_URI"]').value;
  const mongoDb = document.querySelector('input[name="MONGO_DB_NAME"]').value;
  const mongoConfigured = mongoUri && mongoDb;
  
  updateStatusBadge('mongoConfigStatus', mongoConfigured, 'Configurado', 'Pendente');
  
  // Verificar Servidor
  const port = document.querySelector('input[name="PORT"]').value;
  const serverConfigured = port && parseInt(port) > 0;
  
  updateStatusBadge('serverConfigStatus', serverConfigured, 'Ativo', 'Pendente');
  
  // Verificar progresso geral
  const totalSections = 2;
  const configuredSections = (mongoConfigured ? 1 : 0) + (serverConfigured ? 1 : 0);
  const progressPercentage = Math.round((configuredSections / totalSections) * 100);
  
  const progressBar = document.getElementById('generalProgress');
  if (progressBar) {
    progressBar.style.width = progressPercentage + '%';
    progressBar.innerHTML = `<small>${progressPercentage}%</small>`;
    progressBar.className = `progress-bar ${progressPercentage === 100 ? 'bg-success' : progressPercentage > 50 ? 'bg-warning' : 'bg-danger'}`;
  }
  
  // Atualizar status geral
  updateStatusBadge('configStatus', progressPercentage === 100, 'Configurado', 'Incompleto');
  updateStatusBadge('mongoStatus', mongoConfigured, 'MongoDB OK', 'MongoDB Pendente');
}

function updateStatusBadge(elementId, isConfigured, successText, errorText) {
  const element = document.getElementById(elementId);
  if (element) {
    element.className = `badge ${isConfigured ? 'bg-success' : 'bg-warning'}`;
    element.innerHTML = `<i class="fas fa-${isConfigured ? 'check-circle' : 'exclamation-triangle'} me-1"></i>${isConfigured ? successText : errorText}`;
  }
}

// Inicializar estados dos componentes
document.addEventListener('DOMContentLoaded', function() {
  var form = document.getElementById('configForm');
  if (form) {
    form.addEventListener('submit', handleSubmit);
    
    // Monitorar mudanças nos campos principais para atualizar status
    form.addEventListener('input', updateConfigStatus);
    form.addEventListener('change', updateConfigStatus);
    
    // Inicializar toggle states
    initializeToggleStates();
    
    // Atualizar status inicial
    updateConfigStatus();
  }
});

function initializeToggleStates() {
  // Inicializa todos os toggle labels baseado no estado dos checkboxes ocultos
  document.querySelectorAll('input[type=checkbox].d-none').forEach(checkbox => {
    const label = document.querySelector(`label[for="${checkbox.id}"]`);
    if (label && label.classList.contains('toggle-label')) {
      const dataText = label.getAttribute('data-text') || '';
      const statusText = checkbox.checked ? 'Ativado' : 'Desativado';
      
      // Set correct CSS classes
      if (checkbox.checked) {
        label.classList.remove('label-off');
        label.classList.add('label-on');
      } else {
        label.classList.remove('label-on');
        label.classList.add('label-off');
      }
      
      // Update text content
      if (dataText) {
        label.textContent = `${dataText} - ${statusText}`;
      } else {
        label.textContent = statusText;
      }
      
      console.log(`Initialized ${checkbox.id}: ${checkbox.checked}`);
    }
  });
  
  // Initialize special toggle sections
  togglePiperSettings();
  toggleFeatureToggles();
}
</script>
