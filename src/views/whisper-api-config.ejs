<style>
        .endpoint-card {
            border: 1px solid #e9ecef;
            border-radius: 8px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }
        .endpoint-card:hover {
            border-color: #007bff;
            box-shadow: 0 4px 12px rgba(0,123,255,0.15);
        }
        .endpoint-card.active {
            border-color: #28a745;
            background-color: #f8fff9;
        }
        .endpoint-card.error {
            border-color: #dc3545;
            background-color: #fff5f5;
        }
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        .status-indicator.healthy {
            background-color: #28a745;
            animation: pulse 2s infinite;
        }
        .status-indicator.unhealthy {
            background-color: #dc3545;
        }
        .status-indicator.unknown {
            background-color: #ffc107;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .load-score {
            font-family: monospace;
            font-weight: bold;
        }
        .test-result {
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 0.9rem;
        }
        .test-result.success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }
        .test-result.error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }
        .config-section {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
        }
        .form-label {
            font-weight: 600;
            color: #495057;
        }
        .strategy-option {
            padding: 15px;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .strategy-option:hover {
            border-color: #007bff;
            background-color: #f8f9fa;
        }
        .strategy-option.selected {
            border-color: #007bff;
            background-color: #e3f2fd;
        }
    </style>

<!-- Breadcrumb -->
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i> Home</a></li>
        <li class="breadcrumb-item"><a href="/configs"><i class="fas fa-cog"></i> Configurações</a></li>
        <li class="breadcrumb-item active" aria-current="page"><i class="fas fa-microphone"></i> Whisper API</li>
    </ol>
</nav>

<div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h2><i class="fas fa-microphone text-primary"></i> Configuração Whisper API</h2>
                        <p class="text-muted">Configure endpoints de API Whisper com balanceamento de carga</p>
                    </div>
                    <div class="btn-group">
                        <button class="btn btn-outline-info" onclick="loadCurrentStatus()">
                            <i class="fas fa-sync-alt"></i> Atualizar Status
                        </button>
                        <button class="btn btn-success" onclick="saveConfiguration()">
                            <i class="fas fa-save"></i> Salvar Configuração
                        </button>
                    </div>
                </div>

                <!-- Status Geral -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-info-circle"></i> Status Geral</h5>
                    </div>
                    <div class="card-body" id="generalStatus">
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Configuração Principal -->
                <div class="config-section">
                    <h4><i class="fas fa-cogs"></i> Configuração Principal</h4>
                    
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Número de Endpoints</label>
                                <select class="form-select" id="endpointCount">
                                    <!-- Options will be generated dynamically from 1 to 99 -->
                                </select>
                                <div class="form-text">Quantidade de endpoints para configurar (1-99)</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Status Geral do WhisperAPI</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="whisperApiEnabled">
                                    <label class="form-check-label" for="whisperApiEnabled">
                                        <strong>Habilitar WhisperAPI</strong>
                                    </label>
                                </div>
                                <div class="form-text">
                                    Ativa ou desativa completamente o sistema de WhisperAPI
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Modo de Operação</label>
                                <select class="form-select" id="operationMode">
                                    <option value="local">Local (Whisper.cpp)</option>
                                    <option value="api">API (Endpoints externos)</option>
                                </select>
                                <div class="form-text">
                                    <strong>Local:</strong> Usa Whisper.cpp instalado localmente<br>
                                    <strong>API:</strong> Usa endpoints externos com fallback para local
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Timeout (ms)</label>
                                <input type="number" class="form-control" id="apiTimeout" min="30000" max="600000" step="1000">
                                <div class="form-text">Tempo limite para requisições API (30s - 10min)</div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Estratégia de Load Balancing</label>
                                <div id="loadBalancingStrategy">
                                    <div class="strategy-option" data-strategy="queue_length">
                                        <strong>Queue Length</strong><br>
                                        <small>Seleciona o endpoint com menor fila de processamento</small>
                                    </div>
                                    <div class="strategy-option" data-strategy="round_robin">
                                        <strong>Round Robin</strong><br>
                                        <small>Alterna entre endpoints sequencialmente</small>
                                    </div>
                                    <div class="strategy-option" data-strategy="priority">
                                        <strong>Priority</strong><br>
                                        <small>Sempre usa o endpoint de maior prioridade disponível</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Delay entre Tentativas (ms)</label>
                                <input type="number" class="form-control" id="retryDelay" min="1000" max="10000" step="500">
                                <div class="form-text">Tempo de espera entre tentativas de retry</div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Intervalo Health Check (ms)</label>
                                <input type="number" class="form-control" id="healthCheckInterval" min="10000" max="300000" step="5000">
                                <div class="form-text">Frequência de verificação de saúde dos endpoints</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Configuração Whisper Options -->
                <div class="config-section">
                    <h4><i class="fas fa-cogs"></i> Opções de Transcrição (whisperOptions)</h4>
                    <p class="text-muted">Configure parâmetros universais de transcrição aplicados tanto para local quanto API</p>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <h6><i class="fas fa-file-export"></i> Formatos de Saída</h6>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="outputInText">
                                    <label class="form-check-label" for="outputInText">
                                        <strong>Texto (.txt)</strong> - Saída em texto simples
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="outputInSrt" checked>
                                    <label class="form-check-label" for="outputInSrt">
                                        <strong>SubRip (.srt)</strong> - Formato de legendas padrão
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="outputInVtt">
                                    <label class="form-check-label" for="outputInVtt">
                                        <strong>WebVTT (.vtt)</strong> - Formato web de legendas
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="outputInLrc">
                                    <label class="form-check-label" for="outputInLrc">
                                        <strong>LRC (.lrc)</strong> - Formato de letras sincronizadas
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <h6><i class="fas fa-database"></i> Formatos de Dados</h6>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="outputInJson">
                                    <label class="form-check-label" for="outputInJson">
                                        <strong>JSON (.json)</strong> - Dados estruturados básicos
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="outputInJsonFull">
                                    <label class="form-check-label" for="outputInJsonFull">
                                        <strong>JSON Full (.json)</strong> - Dados completos incluindo metadados
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="outputInCsv">
                                    <label class="form-check-label" for="outputInCsv">
                                        <strong>CSV (.csv)</strong> - Planilha de dados tabulares
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="outputInWords">
                                    <label class="form-check-label" for="outputInWords">
                                        <strong>Words (.wts)</strong> - Arquivo de palavras para karaokê
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <h6><i class="fas fa-language"></i> Opções de Idioma</h6>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="translateToEnglish">
                                    <label class="form-check-label" for="translateToEnglish">
                                        <strong>Traduzir para Inglês</strong> - Traduz do idioma fonte para inglês
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <h6><i class="fas fa-clock"></i> Opções de Timestamp</h6>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="splitOnWord" checked>
                                    <label class="form-check-label" for="splitOnWord">
                                        <strong>Split on Word</strong> - Dividir por palavra em vez de token
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="removeTimestamps">
                                    <label class="form-check-label" for="removeTimestamps">
                                        <strong>Remover Timestamps</strong> - Remove linhas de tempo da transcrição
                                    </label>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Duração dos Timestamps (segundos)</label>
                                <input type="number" class="form-control" id="timestampsLength" value="20" min="5" max="60">
                                <div class="form-text">Quantidade de diálogo por par de timestamp</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Endpoints -->
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-server"></i> Endpoints de API</h5>
                    </div>
                    <div class="card-body">
                        <div id="endpointsContainer">
                            <!-- Endpoints serão gerados dinamicamente -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>
        let currentConfig = {};
        let generalStatus = {};

        // Carregar configuração inicial
        document.addEventListener('DOMContentLoaded', function() {
            loadConfiguration();
            loadCurrentStatus();
            setupEventListeners();
        });

        function setupEventListeners() {
            // Strategy selection
            document.querySelectorAll('.strategy-option').forEach(option => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.strategy-option').forEach(o => o.classList.remove('selected'));
                    this.classList.add('selected');
                });
            });

            // Auto-save on change
            ['whisperApiEnabled', 'operationMode', 'apiTimeout', 'retryDelay', 'healthCheckInterval', 'timestampsLength'].forEach(id => {
                document.getElementById(id).addEventListener('change', updateConfigFromForm);
            });
            
            // Endpoint count change
            document.getElementById('endpointCount').addEventListener('change', function() {
                updateConfigFromForm();
                updateEndpointsForm();
            });

            // Special handling for WhisperAPI enabled toggle
            document.getElementById('whisperApiEnabled').addEventListener('change', function() {
                updateConfigFromForm();
                toggleEndpointsSection();
            });

            // WhisperOptions checkboxes
            ['outputInCsv', 'outputInJson', 'outputInJsonFull', 'outputInLrc', 'outputInSrt', 
             'outputInText', 'outputInVtt', 'outputInWords', 'translateToEnglish', 
             'splitOnWord', 'removeTimestamps'].forEach(id => {
                document.getElementById(id).addEventListener('change', updateConfigFromForm);
            });
        }

        async function loadConfiguration() {
            try {
                const response = await fetch('/api/configs');
                const config = await response.json();
                currentConfig = config;
                updateFormFromConfig();
            } catch (error) {
                console.error('Erro ao carregar configuração:', error);
                showAlert('Erro ao carregar configuração', 'danger');
            }
        }

        async function loadCurrentStatus() {
            try {
                // Check if WhisperAPI is enabled before fetching status
                if (currentConfig.whisperApi && !currentConfig.whisperApi.enabled) {
                    generalStatus = {
                        enabled: false,
                        mode: currentConfig.whisperApi.mode || 'local',
                        message: 'WhisperAPI desabilitado'
                    };
                    updateGeneralStatus();
                    return;
                }

                const response = await fetch('/api/whisper-api/status');
                generalStatus = await response.json();
                updateGeneralStatus();
                updateEndpointsStatus();
            } catch (error) {
                console.error('Erro ao carregar status:', error);
                document.getElementById('generalStatus').innerHTML = 
                    '<div class="alert alert-warning">Erro ao carregar status</div>';
            }
        }

        function updateFormFromConfig() {
            const whisperApi = currentConfig.whisperApi || {};
            
            // Initialize endpoint count selector
            initializeEndpointCountSelector();
            
            // Set current endpoint count
            const currentEndpointCount = whisperApi.endpoints ? whisperApi.endpoints.length : 5;
            document.getElementById('endpointCount').value = Math.min(currentEndpointCount, 99);
            
            document.getElementById('whisperApiEnabled').checked = whisperApi.enabled || false;
            document.getElementById('operationMode').value = whisperApi.mode || 'local';
            document.getElementById('apiTimeout').value = whisperApi.timeout || 300000;
            document.getElementById('retryDelay').value = whisperApi.retryDelay || 2000;
            document.getElementById('healthCheckInterval').value = 
                whisperApi.loadBalancing?.healthCheckInterval || 30000;

            // Update strategy selection
            const strategy = whisperApi.loadBalancing?.strategy || 'queue_length';
            document.querySelectorAll('.strategy-option').forEach(option => {
                option.classList.remove('selected');
                if (option.dataset.strategy === strategy) {
                    option.classList.add('selected');
                }
            });

            // Update whisperOptions
            const whisperOptions = whisperApi.whisperOptions || {};
            document.getElementById('outputInCsv').checked = whisperOptions.outputInCsv || false;
            document.getElementById('outputInJson').checked = whisperOptions.outputInJson || false;
            document.getElementById('outputInJsonFull').checked = whisperOptions.outputInJsonFull || false;
            document.getElementById('outputInLrc').checked = whisperOptions.outputInLrc || false;
            document.getElementById('outputInSrt').checked = whisperOptions.outputInSrt !== undefined ? whisperOptions.outputInSrt : true;
            document.getElementById('outputInText').checked = whisperOptions.outputInText || false;
            document.getElementById('outputInVtt').checked = whisperOptions.outputInVtt || false;
            document.getElementById('outputInWords').checked = whisperOptions.outputInWords || false;
            document.getElementById('translateToEnglish').checked = whisperOptions.translateToEnglish || false;
            document.getElementById('splitOnWord').checked = whisperOptions.splitOnWord !== undefined ? whisperOptions.splitOnWord : true;
            document.getElementById('removeTimestamps').checked = whisperOptions.removeTimestamps || false;
            document.getElementById('timestampsLength').value = whisperOptions.timestamps_length || 20;

            updateEndpointsForm();
            toggleEndpointsSection();
        }

        function toggleEndpointsSection() {
            const enabled = document.getElementById('whisperApiEnabled').checked;
            const endpointsContainer = document.getElementById('endpointsContainer');
            const endpointsCard = endpointsContainer ? endpointsContainer.closest('.card') : null;
            
            if (endpointsCard) {
                if (enabled) {
                    endpointsCard.style.opacity = '1';
                    endpointsCard.style.pointerEvents = 'auto';
                } else {
                    endpointsCard.style.opacity = '0.5';
                    endpointsCard.style.pointerEvents = 'none';
                }
            }
        }

        function updateConfigFromForm() {
            if (!currentConfig.whisperApi) currentConfig.whisperApi = {};
            if (!currentConfig.whisperApi.loadBalancing) currentConfig.whisperApi.loadBalancing = {};

            currentConfig.whisperApi.enabled = document.getElementById('whisperApiEnabled').checked;
            currentConfig.whisperApi.mode = document.getElementById('operationMode').value;
            currentConfig.whisperApi.timeout = parseInt(document.getElementById('apiTimeout').value);
            currentConfig.whisperApi.retryDelay = parseInt(document.getElementById('retryDelay').value);
            currentConfig.whisperApi.loadBalancing.healthCheckInterval = 
                parseInt(document.getElementById('healthCheckInterval').value);

            const selectedStrategy = document.querySelector('.strategy-option.selected');
            if (selectedStrategy) {
                currentConfig.whisperApi.loadBalancing.strategy = selectedStrategy.dataset.strategy;
            }

            // Update whisperOptions
            if (!currentConfig.whisperApi.whisperOptions) currentConfig.whisperApi.whisperOptions = {};
            const whisperOptions = currentConfig.whisperApi.whisperOptions;
            
            whisperOptions.outputInCsv = document.getElementById('outputInCsv').checked;
            whisperOptions.outputInJson = document.getElementById('outputInJson').checked;
            whisperOptions.outputInJsonFull = document.getElementById('outputInJsonFull').checked;
            whisperOptions.outputInLrc = document.getElementById('outputInLrc').checked;
            whisperOptions.outputInSrt = document.getElementById('outputInSrt').checked;
            whisperOptions.outputInText = document.getElementById('outputInText').checked;
            whisperOptions.outputInVtt = document.getElementById('outputInVtt').checked;
            whisperOptions.outputInWords = document.getElementById('outputInWords').checked;
            whisperOptions.translateToEnglish = document.getElementById('translateToEnglish').checked;
            whisperOptions.splitOnWord = document.getElementById('splitOnWord').checked;
            whisperOptions.removeTimestamps = document.getElementById('removeTimestamps').checked;
            whisperOptions.timestamps_length = parseInt(document.getElementById('timestampsLength').value);
            
            // Update endpoint count
            const endpointCount = parseInt(document.getElementById('endpointCount').value) || 5;
            if (!currentConfig.whisperApi.endpoints) currentConfig.whisperApi.endpoints = [];
            
            // Ensure endpoints array matches the selected count
            while (currentConfig.whisperApi.endpoints.length < endpointCount) {
                currentConfig.whisperApi.endpoints.push({
                    url: '',
                    name: '',
                    enabled: false,
                    priority: currentConfig.whisperApi.endpoints.length + 1,
                    maxRetries: 2
                });
            }
            
            // Trim if necessary
            if (currentConfig.whisperApi.endpoints.length > endpointCount) {
                currentConfig.whisperApi.endpoints.splice(endpointCount);
            }
        }

        function updateGeneralStatus() {
            const container = document.getElementById('generalStatus');
            
            if (!generalStatus) {
                container.innerHTML = '<div class="alert alert-warning">Status não disponível</div>';
                return;
            }

            const modeClass = generalStatus.mode === 'api' ? 'success' : 'info';
            const healthyCount = generalStatus.healthyEndpoints || 0;
            const totalCount = generalStatus.totalEndpoints || 0;
            
            container.innerHTML = `
                <div class="row">
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">Modo Atual</h5>
                                <span class="badge bg-${modeClass} fs-6">${generalStatus.mode || 'local'}</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">Endpoints</h5>
                                <span class="fs-4">${healthyCount}/${totalCount}</span>
                                <br><small class="text-muted">Saudáveis</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">Estratégia</h5>
                                <span class="badge bg-info fs-6">${generalStatus.strategy || 'queue_length'}</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title">Status</h5>
                                <span class="badge bg-${generalStatus.enabled ? 'success' : 'secondary'} fs-6">
                                    ${generalStatus.enabled ? 'Habilitado' : 'Desabilitado'}
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function initializeEndpointCountSelector() {
            const endpointCountSelect = document.getElementById('endpointCount');
            if (endpointCountSelect.children.length === 0) {
                // Generate options from 1 to 99
                for (let i = 1; i <= 99; i++) {
                    const option = document.createElement('option');
                    option.value = i;
                    option.textContent = i;
                    endpointCountSelect.appendChild(option);
                }
            }
        }

        function updateEndpointsForm() {
            const container = document.getElementById('endpointsContainer');
            const endpoints = currentConfig.whisperApi?.endpoints || [];
            const endpointCount = parseInt(document.getElementById('endpointCount').value) || 5;
            
            // Adjust endpoints array to match selected count
            while (endpoints.length < endpointCount) {
                endpoints.push({
                    url: '',
                    name: '',
                    enabled: false,
                    priority: endpoints.length + 1,
                    maxRetries: 2
                });
            }
            
            // Trim endpoints if count is reduced
            if (endpoints.length > endpointCount) {
                endpoints.splice(endpointCount);
            }

            // Sort endpoints by priority (1 first, then 2, 3, etc.)
            const sortedEndpoints = endpoints.slice(0, endpointCount).sort((a, b) => {
                const priorityA = parseInt(a.priority) || 999;
                const priorityB = parseInt(b.priority) || 999;
                return priorityA - priorityB;
            });

            // Create a mapping from sorted index to original index
            const sortedToOriginalIndex = new Map();
            sortedEndpoints.forEach((endpoint, sortedIndex) => {
                const originalIndex = endpoints.findIndex(ep => ep === endpoint);
                sortedToOriginalIndex.set(sortedIndex, originalIndex);
            });

            container.innerHTML = sortedEndpoints.map((endpoint, index) => 
                createEndpointCard(endpoint, index)
            ).join('');

            // Attach event listeners for visible endpoints only
            sortedEndpoints.forEach((_, sortedIndex) => {
                const originalIndex = sortedToOriginalIndex.get(sortedIndex);
                ['url', 'name', 'enabled', 'priority', 'maxRetries'].forEach(field => {
                    const element = document.getElementById(`endpoint_${sortedIndex}_${field}`);
                    if (element) {
                        element.addEventListener('change', () => updateEndpointConfig(originalIndex));
                    }
                });

                document.getElementById(`testEndpoint_${sortedIndex}`).addEventListener('click', 
                    () => testEndpoint(originalIndex));
            });
        }

        function updateEndpointsStatus() {
            if (!generalStatus.endpoints) return;

            // Clear all cards first
            document.querySelectorAll('.endpoint-card').forEach(card => {
                const indicator = card.querySelector('.status-indicator');
                const statusText = card.querySelector('.endpoint-status');
                const queueInfo = card.querySelector('.queue-info');
                
                // Reset to unknown status
                indicator.className = 'status-indicator unknown';
                card.className = 'endpoint-card';
                statusText.innerHTML = '<i class="fas fa-question-circle text-muted"></i> Desconhecido';
                queueInfo.innerHTML = 'Aguardando informações...';
            });

            // Update cards that have matching status by URL
            generalStatus.endpoints.forEach((status) => {
                // Find the card that matches this status by URL
                const cards = document.querySelectorAll('.endpoint-card');
                let matchingCard = null;
                
                for (const card of cards) {
                    const index = card.getAttribute('data-endpoint-index');
                    const urlInput = document.getElementById(`endpoint_${index}_url`);
                    if (urlInput && urlInput.value === status.url) {
                        matchingCard = card;
                        break;
                    }
                }
                
                if (!matchingCard) return;

                const indicator = matchingCard.querySelector('.status-indicator');
                const statusText = matchingCard.querySelector('.endpoint-status');
                const queueInfo = matchingCard.querySelector('.queue-info');

                if (status.healthy) {
                    indicator.className = 'status-indicator healthy';
                    matchingCard.className = 'endpoint-card active';
                    statusText.innerHTML = `<i class="fas fa-check-circle text-success"></i> Online`;
                    
                    if (status.queueLength !== undefined) {
                        queueInfo.innerHTML = `
                            Fila: ${status.queueLength} | 
                            Tempo médio: ${status.avgProcessingTime}ms | 
                            Score: <span class="load-score">${status.loadScore}</span>
                        `;
                    }
                } else {
                    indicator.className = 'status-indicator unhealthy';
                    matchingCard.className = 'endpoint-card error';
                    statusText.innerHTML = `<i class="fas fa-times-circle text-danger"></i> Offline`;
                    queueInfo.innerHTML = `Health check failed: ${status.error || 'Endpoint não disponível'}`;
                }
            });
        }

        function createEndpointCard(endpoint, index) {
            return `
                <div class="endpoint-card" data-endpoint-index="${index}">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <span class="status-indicator unknown"></span>
                                <span class="endpoint-name">${endpoint.name || `Endpoint ${index + 1}`}</span>
                            </h6>
                            <div class="endpoint-status">
                                <i class="fas fa-question-circle text-muted"></i> Desconhecido
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Nome do Endpoint</label>
                                    <input type="text" class="form-control" id="endpoint_${index}_name" 
                                           value="${endpoint.name || ''}" 
                                           placeholder="Ex: Whisper GPU 1, Servidor Principal, etc.">
                                    <div class="form-text">
                                        Apelido para identificar facilmente este endpoint
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <div class="mb-3">
                                    <label class="form-label">Prioridade</label>
                                    <input type="number" class="form-control" id="endpoint_${index}_priority" 
                                           value="${endpoint.priority || index + 1}" min="1" max="5">
                                    <div class="form-text">Ordem</div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">URL do Endpoint</label>
                                    <input type="url" class="form-control" id="endpoint_${index}_url" 
                                           value="${endpoint.url || ''}" 
                                           placeholder="http://localhost:3001">
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label class="form-label">Max Retries</label>
                                    <input type="number" class="form-control" id="endpoint_${index}_maxRetries" 
                                           value="${endpoint.maxRetries || 2}" min="0" max="5">
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3">
                                    <label class="form-label">Habilitado</label>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" 
                                               id="endpoint_${index}_enabled" 
                                               ${endpoint.enabled ? 'checked' : ''}>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="queue-info text-muted small">
                                Aguardando informações...
                            </div>
                            <button class="btn btn-outline-primary btn-sm" id="testEndpoint_${index}">
                                <i class="fas fa-vial"></i> Testar
                            </button>
                        </div>
                        
                        <div id="testResult_${index}"></div>
                    </div>
                </div>
            `;
        }

        function updateEndpointConfig(index) {
            if (!currentConfig.whisperApi) currentConfig.whisperApi = {};
            if (!currentConfig.whisperApi.endpoints) currentConfig.whisperApi.endpoints = [];

            while (currentConfig.whisperApi.endpoints.length <= index) {
                currentConfig.whisperApi.endpoints.push({});
            }

            const endpoint = currentConfig.whisperApi.endpoints[index];
            endpoint.url = document.getElementById(`endpoint_${index}_url`).value;
            endpoint.name = document.getElementById(`endpoint_${index}_name`).value;
            endpoint.enabled = document.getElementById(`endpoint_${index}_enabled`).checked;
            endpoint.priority = parseInt(document.getElementById(`endpoint_${index}_priority`).value);
            endpoint.maxRetries = parseInt(document.getElementById(`endpoint_${index}_maxRetries`).value);
        }

        async function testEndpoint(index) {
            const url = document.getElementById(`endpoint_${index}_url`).value;
            if (!url) {
                showAlert('URL do endpoint é obrigatória', 'warning');
                return;
            }

            const resultContainer = document.getElementById(`testResult_${index}`);
            const testButton = document.getElementById(`testEndpoint_${index}`);
            
            testButton.disabled = true;
            testButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Testando...';

            try {
                const response = await fetch('/api/whisper-api/test', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                const result = await response.json();
                
                if (result.success) {
                    resultContainer.innerHTML = `
                        <div class="test-result success">
                            <i class="fas fa-check-circle"></i> Teste bem-sucedido!<br>
                            Status: ${result.health.status}<br>
                            Fila: ${result.queueEstimate.queueLength} jobs<br>
                            Formatos: ${result.formats.supportedFormats.join(', ')}
                        </div>
                    `;
                } else {
                    resultContainer.innerHTML = `
                        <div class="test-result error">
                            <i class="fas fa-times-circle"></i> Teste falhou<br>
                            Erro: ${result.details}
                        </div>
                    `;
                }
            } catch (error) {
                resultContainer.innerHTML = `
                    <div class="test-result error">
                        <i class="fas fa-times-circle"></i> Erro na conexão<br>
                        ${error.message}
                    </div>
                `;
            } finally {
                testButton.disabled = false;
                testButton.innerHTML = '<i class="fas fa-vial"></i> Testar';
            }
        }

        async function saveConfiguration() {
            updateConfigFromForm();
            
            // Update endpoints based on current count
            const endpointCount = parseInt(document.getElementById('endpointCount').value) || 5;
            for (let i = 0; i < endpointCount; i++) {
                updateEndpointConfig(i);
            }

            try {
                const response = await fetch('/api/configs', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(currentConfig)
                });

                if (response.ok) {
                    showAlert('Configuração salva com sucesso! A aplicação será reiniciada.', 'success');
                    setTimeout(() => {
                        window.location.reload();
                    }, 2000);
                } else {
                    const error = await response.json();
                    showAlert('Erro ao salvar configuração: ' + error.error, 'danger');
                }
            } catch (error) {
                showAlert('Erro ao salvar configuração: ' + error.message, 'danger');
            }
        }

        function showAlert(message, type) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            const alertContainer = document.createElement('div');
            alertContainer.innerHTML = alertHtml;
            document.querySelector('.container-fluid').prepend(alertContainer.firstElementChild);
        }
</script>