import Scheduler from './services/scheduler.js';
import LLMService from './services/llmService.js';
import AudioTranscriber from './services/audioTranscriber.js';
import TtsService from './services/ttsService.js'; // Importar o novo servi√ßo TTS
import WhatsAppBot from './core/whatsAppBot.js';
import RestAPI from './api/restApi.js';

// ============ Inicializa√ß√£o ============
async function main() {
  try {
    console.log('üöÄ Iniciando aplica√ß√£o...');

    // Banner inicial
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     ü§ñ WhatsApp Bot Assistant ü§ñ      ‚ïë
‚ïë         Vers√£o 2.1 - Com Voz          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);

    // Inicializar servi√ßos
    console.log('üì¶ Inicializando servi√ßos...');
    const scheduler = new Scheduler();
    await scheduler.connect(); // Conectar ao MongoDB

    const llmService = new LLMService();
    const transcriber = new AudioTranscriber();
    const ttsService = new TtsService(); // Instanciar o servi√ßo TTS

    // Inicializar bot, passando todos os servi√ßos
    console.log('ü§ñ Inicializando WhatsApp Bot...');
    const bot = new WhatsAppBot(scheduler, llmService, transcriber, ttsService);
    await bot.initialize(); // Inicializar cliente WhatsApp

    // Inicializar API REST
    console.log('üåê Inicializando API REST...');
    const api = new RestAPI(bot); // Passar a inst√¢ncia do bot para a API
    api.start(); // Iniciar servidor Express

    console.log('\n‚úÖ Aplica√ß√£o iniciada com sucesso!');
    console.log('üì± Escaneie o QR Code para conectar o WhatsApp (se necess√°rio)');

  } catch (err) {
    console.error('‚ùå Erro fatal na inicializa√ß√£o:', err);
    process.exit(1); // Encerrar em caso de erro cr√≠tico na inicializa√ß√£o
  }
}

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (err) => {
  console.error('‚ùå Uncaught Exception:', err);
  process.exit(1);
});

// Tratamento de sinais do sistema para encerramento gracioso
const gracefulShutdown = (signal) => {
  console.log(`\nüëã Recebido sinal ${signal}. Encerrando aplica√ß√£o...`);
  // Adicionar l√≥gica de encerramento gracioso aqui
  console.log('üèÅ Aplica√ß√£o encerrada.');
  process.exit(0);
};

process.on('SIGINT', () => gracefulShutdown('SIGINT')); // Ctrl+C
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // Comando kill

// Iniciar aplica√ß√£o
main();
