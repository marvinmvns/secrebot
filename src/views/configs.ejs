<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Configurações do Sistema</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .config-editor {
            font-family: 'Courier New', monospace;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 20px;
            border-radius: 8px;
            max-height: 800px;
            overflow-y: auto;
        }
        .config-section {
            margin-bottom: 30px;
            padding: 20px;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .config-section-title {
            font-size: 1.2rem;
            font-weight: bold;
            color: #495057;
            margin-bottom: 15px;
            padding-bottom: 8px;
            border-bottom: 2px solid #007bff;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .config-item {
            margin-bottom: 15px;
            padding: 15px;
            background: #fafbfc;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            transition: all 0.2s ease;
        }
        .config-item:hover {
            border-color: #007bff;
            box-shadow: 0 2px 8px rgba(0,123,255,0.1);
        }
        .config-key {
            font-weight: bold;
            color: #495057;
            margin-bottom: 5px;
            font-size: 0.95rem;
        }
        .config-description {
            font-size: 0.85rem;
            color: #6c757d;
            margin-bottom: 8px;
            font-style: italic;
        }
        .config-value {
            font-family: monospace;
            background: white;
            padding: 8px 12px;
            border-radius: 4px;
            border: 1px solid #dee2e6;
            transition: border-color 0.2s ease;
        }
        .config-value:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
        }
        .save-btn {
            position: sticky;
            bottom: 20px;
            right: 20px;
            float: right;
            z-index: 1000;
        }
        .nested-config {
            margin-left: 20px;
            border-left: 3px solid #007bff;
            padding-left: 15px;
            background: rgba(0,123,255,0.02);
            border-radius: 4px;
        }
        .array-item {
            background: #e3f2fd;
            margin: 5px 0;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #bbdefb;
        }
        .config-actions {
            margin-bottom: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 8px;
            border: 1px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .btn-group .btn {
            border-radius: 0;
        }
        .btn-group .btn:first-child {
            border-top-left-radius: 0.375rem;
            border-bottom-left-radius: 0.375rem;
        }
        .btn-group .btn:last-child {
            border-top-right-radius: 0.375rem;
            border-bottom-right-radius: 0.375rem;
        }
        .btn-group .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: all 0.2s ease;
        }
        .spinner-border {
            width: 1rem;
            height: 1rem;
        }
        .config-search {
            margin-bottom: 20px;
        }
        .config-tabs {
            margin-bottom: 20px;
        }
        .tab-content {
            min-height: 400px;
        }
        .toggle-section {
            cursor: pointer;
            user-select: none;
        }
        .toggle-section:hover {
            background-color: #f8f9fa;
        }
        .section-collapsed .config-item {
            display: none;
        }
        .form-switch {
            padding-left: 2.5rem;
        }
        .sensitive-field {
            position: relative;
        }
        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            border: none;
            background: none;
            color: #6c757d;
            cursor: pointer;
        }
        .config-quick-actions {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .quick-action-btn {
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
        }
        .quick-action-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(0,0,0,0.2);
        }
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.9);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        .loading-overlay.show {
            opacity: 1;
            visibility: visible;
        }
        .config-breadcrumb {
            margin-bottom: 20px;
            padding: 15px;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-cog"></i> Sistema de Configuração
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/"><i class="fas fa-home"></i> Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/config"><i class="fas fa-tools"></i> Config Original</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/configs"><i class="fas fa-database"></i> Todas as Configs</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <!-- Breadcrumb -->
                <nav aria-label="breadcrumb" class="config-breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i> Dashboard</a></li>
                        <li class="breadcrumb-item active" aria-current="page"><i class="fas fa-cog"></i> Configurações</li>
                    </ol>
                </nav>
                
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h4><i class="fas fa-database"></i> Configurações do Sistema</h4>
                                <small class="text-muted">Visualize e edite todas as configurações armazenadas na base de dados de forma organizada e intuitiva</small>
                            </div>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleDarkMode()" data-bs-toggle="tooltip" title="Alternar modo escuro">
                                    <i class="fas fa-moon"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleFullscreen()" data-bs-toggle="tooltip" title="Tela cheia">
                                    <i class="fas fa-expand"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle"></i>
                            <strong>Atenção:</strong> Esta tela permite editar diretamente todas as configurações da base de dados. 
                            As configurações são organizadas por categoria para facilitar a navegação. Após salvar, a solução será reiniciada automaticamente.
                        </div>

                        <!-- Busca e Filtros -->
                        <div class="config-search">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                                        <input type="text" class="form-control" id="searchConfig" placeholder="Buscar configuração...">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="d-flex align-items-center gap-3">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="showAdvanced">
                                            <label class="form-check-label" for="showAdvanced">
                                                <i class="fas fa-cogs"></i> Mostrar configurações avançadas
                                            </label>
                                        </div>
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" id="autoSave">
                                            <label class="form-check-label" for="autoSave">
                                                <i class="fas fa-magic"></i> Salvar automaticamente
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Tabs de Categorias -->
                        <div class="config-tabs">
                            <ul class="nav nav-tabs" id="configTabs" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="visual-tab" data-bs-toggle="tab" data-bs-target="#visual" type="button" role="tab">
                                        <i class="fas fa-eye"></i> Visual
                                    </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="json-tab" data-bs-toggle="tab" data-bs-target="#json" type="button" role="tab">
                                        <i class="fas fa-code"></i> JSON
                                    </button>
                                </li>
                            </ul>
                        </div>

                        <div class="config-actions">
                            <div class="row">
                                <div class="col-md-9">
                                    <div class="btn-group" role="group" aria-label="Ações principais">
                                        <button type="button" class="btn btn-outline-primary" onclick="loadConfigs()" data-bs-toggle="tooltip" title="Recarregar configurações do servidor">
                                            <i class="fas fa-sync-alt"></i> Recarregar
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" onclick="formatJson()" data-bs-toggle="tooltip" title="Formatar JSON com indentação">
                                            <i class="fas fa-code"></i> Formatar
                                        </button>
                                        <button type="button" class="btn btn-outline-info" onclick="exportConfig()" data-bs-toggle="tooltip" title="Exportar configuração para arquivo">
                                            <i class="fas fa-download"></i> Exportar
                                        </button>
                                        <button type="button" class="btn btn-outline-warning" onclick="resetToDefaults()" data-bs-toggle="tooltip" title="Restaurar valores padrão">
                                            <i class="fas fa-undo"></i> Padrões
                                        </button>
                                    </div>
                                    <div class="btn-group ms-2" role="group" aria-label="Controle de visualização">
                                        <button type="button" class="btn btn-outline-secondary" onclick="expandAllSections()" data-bs-toggle="tooltip" title="Expandir todas as seções">
                                            <i class="fas fa-expand-alt"></i> Expandir
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" onclick="collapseAllSections()" data-bs-toggle="tooltip" title="Recolher todas as seções">
                                            <i class="fas fa-compress-alt"></i> Recolher
                                        </button>
                                    </div>
                                </div>
                                <div class="col-md-3 text-end">
                                    <button type="button" class="btn btn-success btn-lg" onclick="saveConfigs()" id="saveBtn" data-bs-toggle="tooltip" title="Salvar alterações e reiniciar sistema">
                                        <i class="fas fa-save"></i> Salvar e Reiniciar
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="tab-content" id="configTabContent">
                            <div class="tab-pane fade show active" id="visual" role="tabpanel">
                                <div id="configEditor" class="config-editor">
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Carregando...</span>
                                        </div>
                                        <p class="mt-2">Carregando configurações...</p>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="json" role="tabpanel">
                                <div class="mt-3">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <label for="jsonEditor" class="form-label mb-0">
                                            <i class="fas fa-edit"></i> Editor JSON Avançado:
                                        </label>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="validateJson()" data-bs-toggle="tooltip" title="Verificar se o JSON está válido">
                                                <i class="fas fa-check-circle"></i> Validar
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="minifyJson()" data-bs-toggle="tooltip" title="Remover espaços desnecessários">
                                                <i class="fas fa-compress"></i> Minificar
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-info" onclick="prettifyJson()" data-bs-toggle="tooltip" title="Formatar JSON com cores">
                                                <i class="fas fa-paint-brush"></i> Colorir
                                            </button>
                                        </div>
                                    </div>
                                    <textarea id="jsonEditor" class="form-control" rows="25" style="font-family: 'Courier New', monospace; font-size: 0.9rem;"></textarea>
                                    <div class="d-flex justify-content-between align-items-center mt-2">
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle"></i> 
                                            Edite o JSON diretamente aqui. Use Ctrl+A para selecionar tudo, Ctrl+F para buscar.
                                        </small>
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button type="button" class="btn btn-outline-secondary" onclick="undoJsonEdit()" data-bs-toggle="tooltip" title="Desfazer última alteração">
                                                <i class="fas fa-undo"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-secondary" onclick="redoJsonEdit()" data-bs-toggle="tooltip" title="Refazer alteração">
                                                <i class="fas fa-redo"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Carregando...</span>
            </div>
            <p class="mt-3 text-muted">Processando configurações...</p>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="config-quick-actions">
        <button type="button" class="btn btn-primary quick-action-btn" onclick="quickSave()" data-bs-toggle="tooltip" title="Salvar rápido">
            <i class="fas fa-save"></i>
        </button>
        <button type="button" class="btn btn-secondary quick-action-btn" onclick="scrollToTop()" data-bs-toggle="tooltip" title="Voltar ao topo">
            <i class="fas fa-arrow-up"></i>
        </button>
        <button type="button" class="btn btn-info quick-action-btn" onclick="showHelp()" data-bs-toggle="tooltip" title="Ajuda">
            <i class="fas fa-question"></i>
        </button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentConfig = {};

        // Carregar configurações
        async function loadConfigs() {
            try {
                const response = await fetch('/api/configs');
                if (!response.ok) throw new Error('Erro ao carregar configurações');
                
                currentConfig = await response.json();
                renderConfigEditor();
                updateJsonEditor();
            } catch (error) {
                console.error('Erro:', error);
                showAlert('Erro ao carregar configurações: ' + error.message, 'danger');
            }
        }

        // Renderizar editor visual
        function renderConfigEditor() {
            const container = document.getElementById('configEditor');
            container.innerHTML = '';
            
            const configHtml = renderConfigObject(currentConfig, '');
            container.innerHTML = configHtml;
        }

        // Renderizar objeto de configuração recursivamente
        function renderConfigObject(obj, path) {
            let html = '';
            
            for (const [key, value] of Object.entries(obj)) {
                const fullPath = path ? `${path}.${key}` : key;
                
                html += `<div class="config-item">`;
                html += `<div class="config-key">${key}</div>`;
                
                if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                    html += `<div class="nested-config">`;
                    html += renderConfigObject(value, fullPath);
                    html += `</div>`;
                } else if (Array.isArray(value)) {
                    html += `<div class="array-item">`;
                    html += `<strong>Array com ${value.length} itens:</strong><br>`;
                    value.forEach((item, index) => {
                        html += `<input type="text" class="form-control form-control-sm mt-1" 
                                value="${typeof item === 'string' ? item : JSON.stringify(item)}" 
                                onchange="updateConfigValue('${fullPath}', ${index}, this.value)">`;
                    });
                    html += `</div>`;
                } else {
                    const inputType = typeof value === 'boolean' ? 'checkbox' : 
                                     typeof value === 'number' ? 'number' : 'text';
                    
                    if (inputType === 'checkbox') {
                        html += `<div class="form-check">`;
                        html += `<input class="form-check-input" type="checkbox" ${value ? 'checked' : ''} 
                                onchange="updateConfigValue('${fullPath}', null, this.checked)">`;
                        html += `<label class="form-check-label">${value ? 'Habilitado' : 'Desabilitado'}</label>`;
                        html += `</div>`;
                    } else {
                        html += `<input type="${inputType}" class="form-control config-value" 
                                value="${value}" 
                                onchange="updateConfigValue('${fullPath}', null, this.value)">`;
                    }
                }
                
                html += `</div>`;
            }
            
            return html;
        }

        // Atualizar valor de configuração
        function updateConfigValue(path, index, value) {
            const keys = path.split('.');
            let current = currentConfig;
            
            // Navegar até o objeto pai
            for (let i = 0; i < keys.length - 1; i++) {
                current = current[keys[i]];
            }
            
            const lastKey = keys[keys.length - 1];
            
            if (index !== null) {
                // Atualizar item do array
                current[lastKey][index] = value;
            } else {
                // Converter tipo se necessário
                if (typeof current[lastKey] === 'number') {
                    value = parseFloat(value);
                } else if (typeof current[lastKey] === 'boolean') {
                    value = Boolean(value);
                }
                current[lastKey] = value;
            }
            
            updateJsonEditor();
        }

        // Atualizar editor JSON
        function updateJsonEditor() {
            const jsonEditor = document.getElementById('jsonEditor');
            jsonEditor.value = JSON.stringify(currentConfig, null, 2);
        }

        // Formatar JSON
        function formatJson() {
            const jsonEditor = document.getElementById('jsonEditor');
            try {
                const parsed = JSON.parse(jsonEditor.value);
                jsonEditor.value = JSON.stringify(parsed, null, 2);
                currentConfig = parsed;
                renderConfigEditor();
                showAlert('JSON formatado com sucesso!', 'success');
            } catch (error) {
                showAlert('Erro ao formatar JSON: ' + error.message, 'danger');
            }
        }

        // Salvar configurações
        async function saveConfigs() {
            const saveBtn = document.getElementById('saveBtn');
            const originalText = saveBtn.innerHTML;
            
            try {
                // Atualizar configuração a partir do editor JSON
                const jsonEditor = document.getElementById('jsonEditor');
                currentConfig = JSON.parse(jsonEditor.value);
                
                saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Salvando...';
                saveBtn.disabled = true;
                
                const response = await fetch('/api/configs', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(currentConfig)
                });
                
                if (!response.ok) throw new Error('Erro ao salvar configurações');
                
                const result = await response.json();
                showAlert('Configurações salvas com sucesso! A solução será reiniciada.', 'success');
                
                // Recarregar configurações após salvar
                setTimeout(() => {
                    loadConfigs();
                }, 2000);
                
            } catch (error) {
                console.error('Erro:', error);
                showAlert('Erro ao salvar configurações: ' + error.message, 'danger');
            } finally {
                saveBtn.innerHTML = originalText;
                saveBtn.disabled = false;
            }
        }

        // Mostrar alerta
        function showAlert(message, type) {
            const alertContainer = document.querySelector('.card-body');
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            alertContainer.insertBefore(alertDiv, alertContainer.firstChild);
            
            // Remover alerta após 5 segundos
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        // Funções auxiliares para melhorar a experiência do usuário
        function getConfigDescription(path) {
            const descriptions = {
                'debug.enabled': 'Ativa logs detalhados para depuração',
                'debug.verbose': 'Exibe informações técnicas extras nos logs',
                'server.port': 'Porta onde o servidor web será executado',
                'mongo.uri': 'Endereço de conexão com o banco MongoDB',
                'llm.model': 'Modelo de IA usado para respostas',
                'llm.host': 'Endereço do servidor Ollama',
                'telegram.botToken': 'Token do bot obtido no @BotFather',
                'elevenlabs.apiKey': 'Chave da API ElevenLabs para síntese de voz',
                'elevenlabs.voiceId': 'ID da voz específica no ElevenLabs'
            };
            return descriptions[path] || '';
        }
        
        function formatConfigKey(key) {
            return key.replace(/([A-Z])/g, ' $1')
                     .replace(/^./, str => str.toUpperCase())
                     .replace(/api/gi, 'API')
                     .replace(/tts/gi, 'TTS')
                     .replace(/llm/gi, 'LLM')
                     .replace(/uri/gi, 'URI');
        }
        
        function toggleSection(sectionId) {
            const section = document.getElementById(`section-${sectionId}`);
            const icon = section.querySelector('.toggle-icon');
            section.classList.toggle('section-collapsed');
            icon.classList.toggle('fa-chevron-down');
            icon.classList.toggle('fa-chevron-right');
        }
        
        function expandAllSections() {
            document.querySelectorAll('.config-section').forEach(section => {
                section.classList.remove('section-collapsed');
                const icon = section.querySelector('.toggle-icon');
                icon.className = 'fas fa-chevron-down ms-auto toggle-icon';
            });
        }
        
        function collapseAllSections() {
            document.querySelectorAll('.config-section').forEach(section => {
                section.classList.add('section-collapsed');
                const icon = section.querySelector('.toggle-icon');
                icon.className = 'fas fa-chevron-right ms-auto toggle-icon';
            });
        }
        
        function togglePasswordVisibility(fieldId) {
            const field = document.getElementById(fieldId);
            const button = field.nextElementSibling;
            const icon = button.querySelector('i');
            
            if (field.type === 'password') {
                field.type = 'text';
                icon.className = 'fas fa-eye-slash';
            } else {
                field.type = 'password';
                icon.className = 'fas fa-eye';
            }
        }
        
        function applySearchFilter() {
            const searchTerm = document.getElementById('searchConfig').value.toLowerCase();
            const items = document.querySelectorAll('.config-item');
            
            items.forEach(item => {
                const searchData = item.getAttribute('data-search') || '';
                if (searchData.includes(searchTerm)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = searchTerm ? 'none' : 'block';
                }
            });
        }
        
        function toggleAdvancedSections() {
            const showAdvanced = document.getElementById('showAdvanced').checked;
            const advancedSections = document.querySelectorAll('.advanced-section');
            
            advancedSections.forEach(section => {
                section.style.display = showAdvanced ? 'block' : 'none';
            });
        }
        
        function validateJson() {
            const jsonEditor = document.getElementById('jsonEditor');
            try {
                JSON.parse(jsonEditor.value);
                showAlert('JSON válido! ✅', 'success');
            } catch (error) {
                showAlert('JSON inválido: ' + error.message, 'danger');
            }
        }
        
        function minifyJson() {
            const jsonEditor = document.getElementById('jsonEditor');
            try {
                const parsed = JSON.parse(jsonEditor.value);
                jsonEditor.value = JSON.stringify(parsed);
                showAlert('JSON minificado!', 'info');
            } catch (error) {
                showAlert('Erro ao minificar JSON: ' + error.message, 'danger');
            }
        }
        
        function addArrayItem(path) {
            const keys = path.split('.');
            let current = currentConfig;
            
            for (let i = 0; i < keys.length - 1; i++) {
                current = current[keys[i]];
            }
            
            const lastKey = keys[keys.length - 1];
            if (Array.isArray(current[lastKey])) {
                current[lastKey].push('');
                renderConfigEditor();
                updateJsonEditor();
            }
        }
        
        function removeArrayItem(path, index) {
            const keys = path.split('.');
            let current = currentConfig;
            
            for (let i = 0; i < keys.length - 1; i++) {
                current = current[keys[i]];
            }
            
            const lastKey = keys[keys.length - 1];
            if (Array.isArray(current[lastKey])) {
                current[lastKey].splice(index, 1);
                renderConfigEditor();
                updateJsonEditor();
            }
        }
        
        // Variáveis para histórico de edição
        let jsonHistory = [];
        let historyIndex = -1;
        let autoSaveInterval;
        
        // Funções adicionais
        function showLoadingOverlay() {
            document.getElementById('loadingOverlay').classList.add('show');
        }
        
        function hideLoadingOverlay() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }
        
        function exportConfig() {
            const dataStr = JSON.stringify(currentConfig, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            const exportFileDefaultName = 'secrebot-config-' + new Date().toISOString().slice(0,10) + '.json';
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            
            showAlert('Configuração exportada com sucesso!', 'success');
        }
        
        function resetToDefaults() {
            if (confirm('Tem certeza que deseja restaurar todas as configurações para os valores padrão?')) {
                showLoadingOverlay();
                fetch('/api/configs/reset', { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        currentConfig = data;
                        renderConfigEditor();
                        updateJsonEditor();
                        showAlert('Configurações restauradas para os valores padrão!', 'success');
                    })
                    .catch(error => showAlert('Erro ao restaurar configurações: ' + error.message, 'danger'))
                    .finally(() => hideLoadingOverlay());
            }
        }
        
        function prettifyJson() {
            const jsonEditor = document.getElementById('jsonEditor');
            try {
                const parsed = JSON.parse(jsonEditor.value);
                jsonEditor.value = JSON.stringify(parsed, null, 2);
                jsonEditor.style.color = '#0066cc';
                setTimeout(() => { jsonEditor.style.color = ''; }, 500);
                showAlert('JSON formatado com destaque!', 'info');
            } catch (error) {
                showAlert('JSON inválido para formatar: ' + error.message, 'danger');
            }
        }
        
        function saveJsonHistory() {
            const jsonEditor = document.getElementById('jsonEditor');
            const currentJson = jsonEditor.value;
            
            if (jsonHistory.length === 0 || jsonHistory[historyIndex] !== currentJson) {
                jsonHistory = jsonHistory.slice(0, historyIndex + 1);
                jsonHistory.push(currentJson);
                historyIndex = jsonHistory.length - 1;
                
                if (jsonHistory.length > 50) {
                    jsonHistory.shift();
                    historyIndex--;
                }
            }
        }
        
        function undoJsonEdit() {
            if (historyIndex > 0) {
                historyIndex--;
                document.getElementById('jsonEditor').value = jsonHistory[historyIndex];
                showAlert('Undo aplicado!', 'info');
            } else {
                showAlert('Nenhuma ação para desfazer', 'warning');
            }
        }
        
        function redoJsonEdit() {
            if (historyIndex < jsonHistory.length - 1) {
                historyIndex++;
                document.getElementById('jsonEditor').value = jsonHistory[historyIndex];
                showAlert('Redo aplicado!', 'info');
            } else {
                showAlert('Nenhuma ação para refazer', 'warning');
            }
        }
        
        function quickSave() {
            saveConfigs();
        }
        
        function scrollToTop() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
        
        function showHelp() {
            showAlert('Dicas: Use as abas Visual/JSON para diferentes visualizações. Ctrl+F para buscar. Hover nos botões para dicas.', 'info');
        }
        
        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
            const isDark = document.body.classList.contains('dark-mode');
            localStorage.setItem('darkMode', isDark);
        }
        
        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
            } else {
                document.exitFullscreen();
            }
        }
        
        function setupAutoSave() {
            const autoSaveCheckbox = document.getElementById('autoSave');
            autoSaveCheckbox.addEventListener('change', function() {
                if (this.checked) {
                    autoSaveInterval = setInterval(() => {
                        saveConfigs();
                    }, 30000); // Auto-save a cada 30 segundos
                    showAlert('Auto-save ativado (30s)', 'info');
                } else {
                    clearInterval(autoSaveInterval);
                    showAlert('Auto-save desativado', 'warning');
                }
            });
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            loadConfigs();
            
            // Inicializar tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Busca em tempo real
            document.getElementById('searchConfig').addEventListener('input', applySearchFilter);
            
            // Toggle seções avançadas
            document.getElementById('showAdvanced').addEventListener('change', toggleAdvancedSections);
            
            // Setup auto-save
            setupAutoSave();
            
            // Histórico JSON
            const jsonEditor = document.getElementById('jsonEditor');
            jsonEditor.addEventListener('input', function() {
                saveJsonHistory();
            });
            
            // Carregar preferência de modo escuro
            if (localStorage.getItem('darkMode') === 'true') {
                document.body.classList.add('dark-mode');
            }
            
            // Sync entre tabs
            document.getElementById('json-tab').addEventListener('shown.bs.tab', function() {
                updateJsonEditor();
            });
            
            document.getElementById('visual-tab').addEventListener('shown.bs.tab', function() {
                try {
                    const jsonEditor = document.getElementById('jsonEditor');
                    const parsed = JSON.parse(jsonEditor.value);
                    currentConfig = parsed;
                    renderConfigEditor();
                } catch (error) {
                    console.warn('JSON inválido no editor, mantendo configuração atual');
                }
            });
        });
    </script>
</body>
</html>