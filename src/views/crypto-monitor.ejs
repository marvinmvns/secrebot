<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Monitor de Criptomoedas - SecreBot</title>
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      margin: 0;
      padding: 20px;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .header {
      text-align: center;
      color: white;
      margin-bottom: 30px;
    }
    
    .crypto-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .crypto-card {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 15px;
      padding: 20px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      transition: transform 0.3s ease;
    }
    
    .crypto-card:hover {
      transform: translateY(-5px);
    }
    
    .crypto-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .crypto-name {
      font-weight: 600;
      font-size: 1.2rem;
      color: #2d3748;
    }
    
    .crypto-symbol {
      background: #667eea;
      color: white;
      padding: 4px 8px;
      border-radius: 6px;
      font-size: 0.8rem;
      font-weight: 500;
    }
    
    .price-info {
      margin-bottom: 15px;
    }
    
    .price-usd {
      font-size: 1.5rem;
      font-weight: 700;
      color: #2d3748;
      margin-bottom: 5px;
    }
    
    .price-brl {
      color: #718096;
      font-size: 1rem;
    }
    
    .change-24h {
      padding: 4px 8px;
      border-radius: 6px;
      font-weight: 500;
      font-size: 0.9rem;
    }
    
    .positive {
      background: #c6f6d5;
      color: #22543d;
    }
    
    .negative {
      background: #fed7d7;
      color: #742a2a;
    }
    
    .market-cap {
      color: #718096;
      font-size: 0.9rem;
      margin-top: 10px;
    }
    
    .chart-container {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 15px;
      padding: 20px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 20px;
    }
    
    .loading {
      text-align: center;
      color: #718096;
      padding: 20px;
    }
    
    .error {
      background: #fed7d7;
      color: #742a2a;
      padding: 15px;
      border-radius: 8px;
      margin: 10px 0;
    }
    
    .refresh-btn {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #667eea;
      color: white;
      border: none;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      font-size: 1.2rem;
      box-shadow: 0 4px 20px rgba(102, 126, 234, 0.3);
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .refresh-btn:hover {
      background: #5a67d8;
      transform: scale(1.1);
    }
    
    .last-update {
      text-align: center;
      color: rgba(255, 255, 255, 0.8);
      margin-top: 20px;
    }
    
    .controls-panel {
      background: rgba(255, 255, 255, 0.95);
      border-radius: 15px;
      padding: 20px;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
      margin-bottom: 20px;
    }
    
    .controls-row {
      display: flex;
      gap: 20px;
      align-items: center;
      flex-wrap: wrap;
      margin-bottom: 15px;
    }
    
    .control-group {
      display: flex;
      flex-direction: column;
      gap: 5px;
    }
    
    .control-group label {
      font-weight: 600;
      color: #2d3748;
      font-size: 0.9rem;
    }
    
    .control-group select, .control-group input {
      padding: 8px 12px;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 0.9rem;
      background: white;
      min-width: 120px;
    }
    
    .control-group select:focus, .control-group input:focus {
      outline: none;
      border-color: #667eea;
    }
    
    .btn-update {
      background: #667eea;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 10px 20px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .btn-update:hover {
      background: #5a67d8;
      transform: translateY(-2px);
    }
    
    .coin-selector {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }
    
    .coin-checkbox {
      display: flex;
      align-items: center;
      gap: 5px;
      background: #f7fafc;
      padding: 8px 12px;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .coin-checkbox:hover {
      background: #edf2f7;
    }
    
    .coin-checkbox input[type="checkbox"] {
      margin: 0;
    }
    
    .coin-checkbox.selected {
      background: #667eea;
      color: white;
    }
    
    .chart-coin-selector {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }
    
    .chart-coin.selected {
      background: #48bb78;
      color: white;
      border: 2px solid #38a169;
    }
    
    .chart-coin {
      border: 2px solid transparent;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1><i class="fas fa-chart-line"></i> Monitor de Criptomoedas</h1>
      <p>Acompanhamento em tempo real dos principais ativos</p>
    </div>
    
    <div id="loading" class="loading">
      <i class="fas fa-spinner fa-spin"></i> Carregando dados...
    </div>
    
    <div id="error" class="error" style="display: none;"></div>
    
    <div id="crypto-container" style="display: none;">
      <!-- Painel de Controles -->
      <div class="controls-panel">
        <h3><i class="fas fa-cog"></i> Configurações de Monitoramento</h3>
        
        <div class="controls-row">
          <div class="control-group">
            <label>Moedas para Exibir:</label>
            <div class="coin-selector">
              <label class="coin-checkbox">
                <input type="checkbox" value="bitcoin" checked> BTC
              </label>
              <label class="coin-checkbox">
                <input type="checkbox" value="ethereum" checked> ETH
              </label>
              <label class="coin-checkbox">
                <input type="checkbox" value="cardano" checked> ADA
              </label>
              <label class="coin-checkbox">
                <input type="checkbox" value="polkadot" checked> DOT
              </label>
              <label class="coin-checkbox">
                <input type="checkbox" value="polygon" checked> MATIC
              </label>
            </div>
          </div>
        </div>
        
        <div class="controls-row">
          <div class="control-group">
            <label>Moedas do Gráfico:</label>
            <div class="chart-coin-selector">
              <label class="coin-checkbox chart-coin">
                <input type="checkbox" value="bitcoin" checked> BTC
              </label>
              <label class="coin-checkbox chart-coin">
                <input type="checkbox" value="ethereum"> ETH
              </label>
              <label class="coin-checkbox chart-coin">
                <input type="checkbox" value="cardano"> ADA
              </label>
              <label class="coin-checkbox chart-coin">
                <input type="checkbox" value="polkadot"> DOT
              </label>
              <label class="coin-checkbox chart-coin">
                <input type="checkbox" value="polygon"> MATIC
              </label>
            </div>
          </div>
          
          <div class="control-group">
            <label>Intervalo de Tempo:</label>
            <select id="timeInterval">
              <option value="1s">Últimos Segundos (tempo real)</option>
              <option value="1m">Últimos Minutos</option>
              <option value="1h">Últimas Horas</option>
              <option value="1d" selected>Últimos Dias</option>
              <option value="7d">Últimas Semanas</option>
              <option value="1M">Últimos Meses</option>
              <option value="1y">Últimos Anos</option>
              <option value="10y">Última Década</option>
            </select>
          </div>
          
          <div class="control-group">
            <label>Quantidade:</label>
            <select id="timeQuantity">
              <option value="10">10</option>
              <option value="30">30</option>
              <option value="60">60</option>
              <option value="100">100</option>
              <option value="200">200</option>
              <option value="500">500</option>
              <option value="1000">1000</option>
            </select>
          </div>
          
          <div class="control-group">
            <label>Atualização:</label>
            <select id="updateInterval">
              <option value="15">15 segundos</option>
              <option value="30" selected>30 segundos</option>
              <option value="60">1 minuto</option>
              <option value="300">5 minutos</option>
            </select>
          </div>
          
          <button class="btn-update" onclick="applySettings()">
            <i class="fas fa-sync-alt"></i> Aplicar
          </button>
        </div>
      </div>
      
      <div class="crypto-grid" id="crypto-grid">
        <!-- Cards serão inseridos dinamicamente -->
      </div>
      
      <div class="chart-container">
        <h3 id="chart-title">Histórico de Preços - Bitcoin (7 dias)</h3>
        <canvas id="priceChart" width="400" height="200"></canvas>
      </div>
    </div>
    
    <div class="last-update" id="last-update"></div>
  </div>
  
  <button class="refresh-btn" onclick="loadCryptoData()" title="Atualizar dados">
    <i class="fas fa-sync-alt"></i>
  </button>

  <script>
    let priceChart = null;
    let updateTimer = null;
    let currentSettings = {
      selectedCoins: ['bitcoin', 'ethereum', 'cardano', 'polkadot', 'polygon'],
      chartCoins: ['bitcoin'], // Array de moedas para o gráfico
      timeInterval: '1d', // Intervalo: 1s, 1m, 1h, 1d, 7d, 1M, 1y, 10y
      timeQuantity: 7, // Quantidade de intervalos
      updateInterval: 30
    };
    
    async function loadCryptoData() {
      try {
        document.getElementById('loading').style.display = 'block';
        document.getElementById('error').style.display = 'none';
        document.getElementById('crypto-container').style.display = 'none';
        
        const response = await fetch('/api/crypto/prices');
        const result = await response.json();
        
        if (!result.success) {
          throw new Error(result.error || 'Erro ao carregar dados');
        }
        
        displayCryptoData(result.data);
        await loadCoinHistory();
        
        document.getElementById('loading').style.display = 'none';
        document.getElementById('crypto-container').style.display = 'block';
        document.getElementById('last-update').textContent = `Última atualização: ${new Date().toLocaleString('pt-BR')}`;
        
      } catch (error) {
        console.error('Erro:', error);
        document.getElementById('loading').style.display = 'none';
        document.getElementById('error').style.display = 'block';
        document.getElementById('error').textContent = `Erro: ${error.message}`;
      }
    }
    
    function displayCryptoData(data) {
      const grid = document.getElementById('crypto-grid');
      grid.innerHTML = '';
      
      // Filtrar apenas moedas selecionadas
      const filteredData = Object.entries(data).filter(([key, crypto]) => 
        currentSettings.selectedCoins.includes(key)
      );
      
      filteredData.forEach(([key, crypto]) => {
        const change24h = crypto.usd_24h_change || 0;
        const isPositive = change24h >= 0;
        
        const card = document.createElement('div');
        card.className = 'crypto-card';
        card.innerHTML = `
          <div class="crypto-header">
            <div class="crypto-name">${crypto.name}</div>
            <div class="crypto-symbol">${crypto.symbol}</div>
          </div>
          <div class="price-info">
            <div class="price-usd">$${crypto.usd?.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2}) || 'N/A'}</div>
            <div class="price-brl">R$ ${crypto.brl?.toLocaleString('pt-BR', {minimumFractionDigits: 2, maximumFractionDigits: 2}) || 'N/A'}</div>
          </div>
          <div class="change-24h ${isPositive ? 'positive' : 'negative'}">
            <i class="fas fa-${isPositive ? 'arrow-up' : 'arrow-down'}"></i>
            ${isPositive ? '+' : ''}${change24h.toFixed(2)}% (24h)
          </div>
          <div class="market-cap">
            Cap. Mercado: $${crypto.usd_market_cap ? (crypto.usd_market_cap / 1e9).toFixed(2) + 'B' : 'N/A'}
          </div>
        `;
        grid.appendChild(card);
      });
    }
    
    async function loadCoinHistory() {
      try {
        const { timeInterval, timeQuantity } = currentSettings;
        
        if (currentSettings.chartCoins.length === 0) {
          // Se nenhuma moeda selecionada, limpar gráfico
          if (priceChart) {
            priceChart.destroy();
            priceChart = null;
          }
          document.getElementById('chart-title').textContent = 'Selecione moedas para o gráfico';
          return;
        }
        
        // Usar nova API para buscar múltiplas moedas com parâmetros avançados
        const response = await fetch('/api/crypto/history/advanced', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            coins: currentSettings.chartCoins,
            interval: timeInterval,
            quantity: timeQuantity
          })
        });
        
        const result = await response.json();
        
        if (result.success && result.data) {
          const chartData = {};
          
          // Processar dados de cada moeda
          Object.entries(result.data).forEach(([coinId, data]) => {
            if (data.prices && !data.error) {
              chartData[coinId] = data.prices;
            }
          });
          
          if (Object.keys(chartData).length > 0) {
            displayMultiChart(chartData);
            
            // Atualizar título do gráfico
            const coinNames = {
              bitcoin: 'Bitcoin',
              ethereum: 'Ethereum', 
              cardano: 'Cardano',
              polkadot: 'Polkadot',
              polygon: 'Polygon'
            };
            
            const selectedNames = currentSettings.chartCoins.map(coin => coinNames[coin]).join(', ');
            const source = result.source ? ` (${result.source})` : '';
            const intervalLabel = getIntervalLabel(timeInterval, timeQuantity);
            document.getElementById('chart-title').textContent = 
              `Histórico de Preços - ${selectedNames} (${intervalLabel})${source}`;
          }
        }
      } catch (error) {
        console.error('Erro ao carregar histórico:', error);
      }
    }
    
    // Função para gerar label do intervalo
    function getIntervalLabel(interval, quantity) {
      const labels = {
        '1s': `${quantity} segundos`,
        '1m': `${quantity} minutos`, 
        '1h': `${quantity} horas`,
        '1d': `${quantity} dias`,
        '7d': `${quantity} semanas`,
        '1M': `${quantity} meses`,
        '1y': `${quantity} anos`,
        '10y': `${quantity} décadas`
      };
      return labels[interval] || `${quantity} períodos`;
    }
    
    // Função para formatar timestamp conforme o intervalo
    function formatTimestampLabel(date, interval) {
      switch(interval) {
        case '1s':
          return date.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit', 
            second: '2-digit' 
          });
        case '1m':
          return date.toLocaleTimeString('pt-BR', { 
            hour: '2-digit', 
            minute: '2-digit' 
          });
        case '1h':
          return date.toLocaleDateString('pt-BR', { 
            day: '2-digit', 
            month: '2-digit',
            hour: '2-digit'
          });
        case '1d':
          return date.toLocaleDateString('pt-BR', { 
            day: '2-digit', 
            month: '2-digit' 
          });
        case '7d':
          return date.toLocaleDateString('pt-BR', { 
            day: '2-digit', 
            month: '2-digit' 
          });
        case '1M':
          return date.toLocaleDateString('pt-BR', { 
            month: '2-digit', 
            year: '2-digit' 
          });
        case '1y':
          return date.getFullYear().toString();
        case '10y':
          return date.getFullYear().toString();
        default:
          return date.toLocaleDateString('pt-BR', { 
            day: '2-digit', 
            month: '2-digit' 
          });
      }
    }
    
    function displayMultiChart(chartData) {
      const ctx = document.getElementById('priceChart').getContext('2d');
      
      if (priceChart) {
        priceChart.destroy();
      }
      
      const coinNames = {
        bitcoin: 'Bitcoin (USD)',
        ethereum: 'Ethereum (USD)',
        cardano: 'Cardano (USD)',
        polkadot: 'Polkadot (USD)',
        polygon: 'Polygon (USD)'
      };
      
      const colors = {
        bitcoin: '#f7931a',
        ethereum: '#627eea',
        cardano: '#0033ad',
        polkadot: '#e6007a',
        polygon: '#8247e5'
      };
      
      // Obter todas as labels (timestamps) únicas e ordená-las
      const allTimestamps = new Set();
      Object.values(chartData).forEach(prices => {
        prices.forEach(price => allTimestamps.add(price[0]));
      });
      
      const sortedTimestamps = Array.from(allTimestamps).sort((a, b) => a - b);
      const labels = sortedTimestamps.map(timestamp => {
        const date = new Date(timestamp);
        return formatTimestampLabel(date, currentSettings.timeInterval);
      });
      
      // Criar datasets para cada moeda
      const datasets = [];
      Object.entries(chartData).forEach(([coinId, prices]) => {
        // Criar mapa de timestamp -> preço para essa moeda
        const priceMap = new Map();
        prices.forEach(([timestamp, price]) => {
          priceMap.set(timestamp, price);
        });
        
        // Preencher dados alinhados com os timestamps ordenados
        const alignedPrices = sortedTimestamps.map(timestamp => {
          return priceMap.get(timestamp) || null;
        });
        
        datasets.push({
          label: coinNames[coinId] || `${coinId.toUpperCase()} (USD)`,
          data: alignedPrices,
          borderColor: colors[coinId] || '#667eea',
          backgroundColor: `${colors[coinId] || '#667eea'}10`,
          borderWidth: 3,
          fill: false,
          tension: 0.4,
          pointRadius: 2,
          pointHoverRadius: 6,
          spanGaps: true // Conectar pontos mesmo com valores null
        });
      });
      
      priceChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: datasets
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: false,
              ticks: {
                callback: function(value) {
                  return '$' + value.toLocaleString('en-US');
                }
              }
            }
          },
          plugins: {
            legend: {
              display: true,
              position: 'top'
            }
          }
        }
      });
    }
    
    // Função para aplicar configurações
    function applySettings() {
      // Obter moedas selecionadas para os cards
      const coinCheckboxes = document.querySelectorAll('.coin-selector .coin-checkbox input[type="checkbox"]');
      currentSettings.selectedCoins = Array.from(coinCheckboxes)
        .filter(cb => cb.checked)
        .map(cb => cb.value);
      
      // Obter moedas selecionadas para o gráfico
      const chartCoinCheckboxes = document.querySelectorAll('.chart-coin-selector .chart-coin input[type="checkbox"]');
      currentSettings.chartCoins = Array.from(chartCoinCheckboxes)
        .filter(cb => cb.checked)
        .map(cb => cb.value);
      
      // Obter outras configurações
      currentSettings.timeInterval = document.getElementById('timeInterval').value;
      currentSettings.timeQuantity = parseInt(document.getElementById('timeQuantity').value);
      currentSettings.updateInterval = parseInt(document.getElementById('updateInterval').value);
      
      // Atualizar visual dos checkboxes dos cards
      coinCheckboxes.forEach(cb => {
        const label = cb.closest('.coin-checkbox');
        if (cb.checked) {
          label.classList.add('selected');
        } else {
          label.classList.remove('selected');
        }
      });
      
      // Atualizar visual dos checkboxes do gráfico
      chartCoinCheckboxes.forEach(cb => {
        const label = cb.closest('.chart-coin');
        if (cb.checked) {
          label.classList.add('selected');
        } else {
          label.classList.remove('selected');
        }
      });
      
      // Reiniciar timer com novo intervalo
      if (updateTimer) {
        clearInterval(updateTimer);
      }
      updateTimer = setInterval(loadCryptoData, currentSettings.updateInterval * 1000);
      
      // Recarregar dados imediatamente
      loadCryptoData();
    }
    
    // Função para inicializar eventos dos checkboxes
    function initializeEvents() {
      // Checkboxes dos cards
      const coinCheckboxes = document.querySelectorAll('.coin-selector .coin-checkbox input[type="checkbox"]');
      coinCheckboxes.forEach(cb => {
        const label = cb.closest('.coin-checkbox');
        if (cb.checked) {
          label.classList.add('selected');
        }
        
        cb.addEventListener('change', function() {
          if (this.checked) {
            label.classList.add('selected');
          } else {
            label.classList.remove('selected');
          }
        });
      });
      
      // Checkboxes do gráfico
      const chartCoinCheckboxes = document.querySelectorAll('.chart-coin-selector .chart-coin input[type="checkbox"]');
      chartCoinCheckboxes.forEach(cb => {
        const label = cb.closest('.chart-coin');
        if (cb.checked) {
          label.classList.add('selected');
        }
        
        cb.addEventListener('change', function() {
          if (this.checked) {
            label.classList.add('selected');
          } else {
            label.classList.remove('selected');
          }
        });
      });
    }
    
    // Carregar dados ao inicializar
    loadCryptoData();
    initializeEvents();
    
    // Configurar timer inicial
    updateTimer = setInterval(loadCryptoData, currentSettings.updateInterval * 1000);
  </script>
</body>
</html>